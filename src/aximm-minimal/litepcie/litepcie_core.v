// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : litepcie_core.v
// Device     : xc7a
// LiteX sha1 : e6c63abe2
// Date       : 2025-04-04 23:01:15
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module litepcie_core (
    output wire          clk,
    output wire   [31:0] mmap_axi_lite_araddr,
    output wire    [2:0] mmap_axi_lite_arprot,
    input  wire          mmap_axi_lite_arready,
    output wire          mmap_axi_lite_arvalid,
    output wire   [31:0] mmap_axi_lite_awaddr,
    output wire    [2:0] mmap_axi_lite_awprot,
    input  wire          mmap_axi_lite_awready,
    output wire          mmap_axi_lite_awvalid,
    output wire          mmap_axi_lite_bready,
    input  wire    [1:0] mmap_axi_lite_bresp,
    input  wire          mmap_axi_lite_bvalid,
    input  wire   [31:0] mmap_axi_lite_rdata,
    output wire          mmap_axi_lite_rready,
    input  wire    [1:0] mmap_axi_lite_rresp,
    input  wire          mmap_axi_lite_rvalid,
    output wire   [31:0] mmap_axi_lite_wdata,
    input  wire          mmap_axi_lite_wready,
    output wire    [3:0] mmap_axi_lite_wstrb,
    output wire          mmap_axi_lite_wvalid,
    input  wire   [31:0] msi_irqs,
    input  wire          pcie_clk_n,
    (* dont_touch = "true" *)
    input  wire          pcie_clk_p,
    input  wire          pcie_rst_n,
    input  wire          pcie_rx_n,
    input  wire          pcie_rx_p,
    output wire          pcie_tx_n,
    output wire          pcie_tx_p,
    input  wire          ptm_time_clk,
    input  wire   [63:0] ptm_time_ns,
    input  wire          ptm_time_rst,
    output wire          rst
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
LitePCIeCore
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (CPUNone)
└─── identifier (Identifier)
└─── crg (LitePCIeCRG)
└─── pcie_phy (S7PCIEPHY)
│    └─── tx_datapath (PHYTXDatapath)
│    │    └─── pipevalid_0* (PipeValid)
│    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── strideconverter_0* (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _identityconverter_0* (_IdentityConverter)
│    │    └─── pipeready_0* (PipeReady)
│    └─── rx_datapath (PHYRXDatapath)
│    │    └─── pipeready_0* (PipeReady)
│    │    └─── strideconverter_0* (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _identityconverter_0* (_IdentityConverter)
│    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── pipevalid_0* (PipeValid)
│    └─── msi_cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── mmcm (S7MMCM)
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [MMCME2_ADV]
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    └─── [pcie_s7]
│    └─── [BUFGCTRL]
│    └─── [BUFG]
│    └─── [IBUFDS_GTE2]
└─── pcie_endpoint (LitePCIeEndpoint)
│    └─── phy (S7PCIEPHY)
│    │    └─── tx_datapath (PHYTXDatapath)
│    │    │    └─── pipevalid_0* (PipeValid)
│    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _identityconverter_0* (_IdentityConverter)
│    │    │    └─── pipeready_0* (PipeReady)
│    │    └─── rx_datapath (PHYRXDatapath)
│    │    │    └─── pipeready_0* (PipeReady)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _identityconverter_0* (_IdentityConverter)
│    │    │    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    └─── pipevalid_0* (PipeValid)
│    │    └─── msi_cdc (ClockDomainCrossing)
│    │    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── mmcm (S7MMCM)
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [FDCE]
│    │    │    └─── [MMCME2_ADV]
│    │    │    └─── [BUFG]
│    │    │    └─── [BUFG]
│    │    │    └─── [BUFG]
│    │    │    └─── [BUFG]
│    │    └─── [pcie_s7]
│    │    └─── [BUFGCTRL]
│    │    └─── [BUFG]
│    │    └─── [IBUFDS_GTE2]
│    └─── depacketizer (LitePCIeTLPDepacketizer)
│    │    └─── header_extracter (LitePCIeTLPHeaderExtracter64b)
│    │    │    └─── fsm (FSM)
│    │    └─── dispatcher (Dispatcher)
│    │    │    └─── status_0* (Status)
│    └─── packetizer (LitePCIeTLPPacketizer)
│    │    └─── arbitrer (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    │    └─── status_0* (Status)
│    │    │    └─── status_1* (Status)
│    │    │    └─── status_2* (Status)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── litepcietlpheaderinserter64b_0* (LitePCIeTLPHeaderInserter64b)
│    │    │    └─── litepcietlpheaderinserter64b3dws_0* (LitePCIeTLPHeaderInserter64b3DWs)
│    │    │    │    └─── fsm (FSM)
│    │    │    └─── litepcietlpheaderinserter64b4dws_0* (LitePCIeTLPHeaderInserter64b4DWs)
│    │    │    │    └─── fsm (FSM)
│    └─── crossbar (LitePCIeCrossbar)
│    │    └─── dispatcher_0* (Dispatcher)
│    │    │    └─── status_0* (Status)
│    │    └─── arbiter_0* (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    │    └─── status_0* (Status)
│    │    │    └─── status_1* (Status)
│    │    └─── controller (LitePCIeTLPController)
│    │    │    └─── tag_queue (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── req_queue (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── req_fsm (FSM)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_1* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_2* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_3* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_4* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_5* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_6* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── syncfifo_7* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── cmp_fsm (FSM)
│    │    └─── arbiter_1* (Arbiter)
│    │    └─── dispatcher_1* (Dispatcher)
│    │    │    └─── status_0* (Status)
│    │    └─── arbiter_2* (Arbiter)
└─── litepciewishbonemaster_0* (LitePCIeWishboneMaster)
│    └─── fsm (FSM)
└─── wishbone2axilite_0* (Wishbone2AXILite)
│    └─── fsm (FSM)
└─── pcie_msi (LitePCIeMSIX)
│    └─── fsm (FSM)
└─── pcie_ptm_sniffer (PCIePTMSniffer)
│    └─── raw_datapath (RawDatapath)
│    │    └─── converter (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    └─── cdc (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFOBuffered)
│    │    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    └─── word_aligner (RawWordAligner)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── buffer_1* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    └─── pipeline_0* (Pipeline)
│    └─── raw_descrambler (RawDescrambler)
│    │    └─── scrambler_0* (Scrambler)
│    │    │    └─── unit (ScramblerUnit)
│    └─── tlp_aligner (TLPAligner)
│    │    └─── fsm (FSM)
│    └─── tlp_endianness_swap (TLPEndiannessSwap)
│    │    └─── endiannessswap_0* (EndiannessSwap)
│    └─── tlp_filter_formater (TLPFilterFormater)
│    │    └─── fifo (SyncFIFO)
│    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    └─── conv (StrideConverter)
│    │    │    └─── converter_0* (Converter)
│    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    └─── fsm (FSM)
│    └─── pipeline_0* (Pipeline)
│    └─── tlp_depacketizer (LitePCIeTLPDepacketizer)
│    │    └─── header_extracter (LitePCIeTLPHeaderExtracter64b)
│    │    │    └─── fsm (FSM)
│    │    └─── dispatcher (Dispatcher)
│    │    │    └─── status_0* (Status)
│    └─── cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
└─── ptm_capabilities (PTMCapabilities)
│    └─── fsm (FSM)
└─── ptm_requester (PTMRequester)
│    └─── clockdomaincrossing_0* (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── req_timer (WaitTimer)
│    └─── fsm (FSM)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── sram_1* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    │    └─── csrstatus_6* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [sniffer_tap]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [29:0] addr;
wire   [13:0] adr;
reg    [31:0] ar_payload_addr = 32'd0;
reg     [2:0] ar_payload_prot = 3'd0;
wire          ar_ready;
reg           ar_valid = 1'd0;
reg    [31:0] aw_payload_addr = 32'd0;
reg     [2:0] aw_payload_prot = 3'd0;
wire          aw_ready;
reg           aw_valid = 1'd0;
wire    [1:0] b_payload_resp;
reg           b_ready = 1'd0;
wire          b_valid;
wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
reg           bus_errors_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
wire          clk125_clk;
wire          clk125_rst;
wire          clk250_clk;
wire          clk250_rst;
reg     [1:0] clockdomainsrenamer0_next_state = 2'd0;
reg     [1:0] clockdomainsrenamer0_state = 2'd0;
reg     [1:0] clockdomainsrenamer1_next_state = 2'd0;
reg     [1:0] clockdomainsrenamer1_state = 2'd0;
reg     [1:0] clockdomainsrenamer2_next_state = 2'd0;
reg    [31:0] clockdomainsrenamer2_next_value0 = 32'd0;
reg    [31:0] clockdomainsrenamer2_next_value1 = 32'd0;
reg    [31:0] clockdomainsrenamer2_next_value2 = 32'd0;
reg    [31:0] clockdomainsrenamer2_next_value3 = 32'd0;
reg           clockdomainsrenamer2_next_value_ce0 = 1'd0;
reg           clockdomainsrenamer2_next_value_ce1 = 1'd0;
reg           clockdomainsrenamer2_next_value_ce2 = 1'd0;
reg           clockdomainsrenamer2_next_value_ce3 = 1'd0;
reg     [1:0] clockdomainsrenamer2_state = 2'd0;
reg           cmd_done = 1'd0;
reg           cmd_done_wishbone2axilite_next_value0 = 1'd0;
reg           cmd_done_wishbone2axilite_next_value_ce0 = 1'd0;
reg    [19:0] count = 20'd1000000;
wire          cpu_rst;
wire   [31:0] csrbank0_bus_errors_r;
reg           csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csrbank0_bus_errors_w;
reg           csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csrbank0_reset0_r;
reg           csrbank0_reset0_re = 1'd0;
wire    [1:0] csrbank0_reset0_w;
reg           csrbank0_reset0_we = 1'd0;
wire   [31:0] csrbank0_scratch0_r;
reg           csrbank0_scratch0_re = 1'd0;
wire   [31:0] csrbank0_scratch0_w;
reg           csrbank0_scratch0_we = 1'd0;
wire          csrbank0_sel;
reg           csrbank1_phy_bus_master_enable_r = 1'd0;
reg           csrbank1_phy_bus_master_enable_re = 1'd0;
wire          csrbank1_phy_bus_master_enable_w;
reg           csrbank1_phy_bus_master_enable_we = 1'd0;
reg     [9:0] csrbank1_phy_link_status_r = 10'd0;
reg           csrbank1_phy_link_status_re = 1'd0;
wire    [9:0] csrbank1_phy_link_status_w;
reg           csrbank1_phy_link_status_we = 1'd0;
reg    [15:0] csrbank1_phy_max_payload_size_r = 16'd0;
reg           csrbank1_phy_max_payload_size_re = 1'd0;
wire   [15:0] csrbank1_phy_max_payload_size_w;
reg           csrbank1_phy_max_payload_size_we = 1'd0;
reg    [15:0] csrbank1_phy_max_request_size_r = 16'd0;
reg           csrbank1_phy_max_request_size_re = 1'd0;
wire   [15:0] csrbank1_phy_max_request_size_w;
reg           csrbank1_phy_max_request_size_we = 1'd0;
reg           csrbank1_phy_msi_enable_r = 1'd0;
reg           csrbank1_phy_msi_enable_re = 1'd0;
wire          csrbank1_phy_msi_enable_w;
reg           csrbank1_phy_msi_enable_we = 1'd0;
reg           csrbank1_phy_msix_enable_r = 1'd0;
reg           csrbank1_phy_msix_enable_re = 1'd0;
wire          csrbank1_phy_msix_enable_w;
reg           csrbank1_phy_msix_enable_we = 1'd0;
wire          csrbank1_sel;
wire   [31:0] csrbank2_enable0_r;
reg           csrbank2_enable0_re = 1'd0;
wire   [31:0] csrbank2_enable0_w;
reg           csrbank2_enable0_we = 1'd0;
wire   [31:0] csrbank2_enable1_r;
reg           csrbank2_enable1_re = 1'd0;
wire   [31:0] csrbank2_enable1_w;
reg           csrbank2_enable1_we = 1'd0;
wire   [31:0] csrbank2_pba0_r;
reg           csrbank2_pba0_re = 1'd0;
wire   [31:0] csrbank2_pba0_w;
reg           csrbank2_pba0_we = 1'd0;
wire   [31:0] csrbank2_pba1_r;
reg           csrbank2_pba1_re = 1'd0;
wire   [31:0] csrbank2_pba1_w;
reg           csrbank2_pba1_we = 1'd0;
wire          csrbank2_sel;
wire          csrbank3_sel;
wire    [1:0] csrbank4_control0_r;
reg           csrbank4_control0_re = 1'd0;
wire    [1:0] csrbank4_control0_w;
reg           csrbank4_control0_we = 1'd0;
wire   [31:0] csrbank4_link_delay_r;
reg           csrbank4_link_delay_re = 1'd0;
wire   [31:0] csrbank4_link_delay_w;
reg           csrbank4_link_delay_we = 1'd0;
wire   [31:0] csrbank4_master_time0_r;
reg           csrbank4_master_time0_re = 1'd0;
wire   [31:0] csrbank4_master_time0_w;
reg           csrbank4_master_time0_we = 1'd0;
wire   [31:0] csrbank4_master_time1_r;
reg           csrbank4_master_time1_re = 1'd0;
wire   [31:0] csrbank4_master_time1_w;
reg           csrbank4_master_time1_we = 1'd0;
wire   [31:0] csrbank4_phy_rx_delay_r;
reg           csrbank4_phy_rx_delay_re = 1'd0;
wire   [31:0] csrbank4_phy_rx_delay_w;
reg           csrbank4_phy_rx_delay_we = 1'd0;
wire   [31:0] csrbank4_phy_tx_delay_r;
reg           csrbank4_phy_tx_delay_re = 1'd0;
wire   [31:0] csrbank4_phy_tx_delay_w;
reg           csrbank4_phy_tx_delay_we = 1'd0;
wire          csrbank4_sel;
wire    [1:0] csrbank4_status_r;
reg           csrbank4_status_re = 1'd0;
wire    [1:0] csrbank4_status_w;
reg           csrbank4_status_we = 1'd0;
wire   [31:0] csrbank4_t1_time0_r;
reg           csrbank4_t1_time0_re = 1'd0;
wire   [31:0] csrbank4_t1_time0_w;
reg           csrbank4_t1_time0_we = 1'd0;
wire   [31:0] csrbank4_t1_time1_r;
reg           csrbank4_t1_time1_re = 1'd0;
wire   [31:0] csrbank4_t1_time1_w;
reg           csrbank4_t1_time1_we = 1'd0;
wire   [31:0] csrbank4_t4_time0_r;
reg           csrbank4_t4_time0_re = 1'd0;
wire   [31:0] csrbank4_t4_time0_w;
reg           csrbank4_t4_time0_we = 1'd0;
wire   [31:0] csrbank4_t4_time1_r;
reg           csrbank4_t4_time1_re = 1'd0;
wire   [31:0] csrbank4_t4_time1_w;
reg           csrbank4_t4_time1_we = 1'd0;
wire   [31:0] dat_r;
wire   [31:0] dat_w;
reg           data_done = 1'd0;
reg           data_done_wishbone2axilite_next_value1 = 1'd0;
reg           data_done_wishbone2axilite_next_value_ce1 = 1'd0;
wire          depacketizer_cmp_source_first;
wire          depacketizer_cmp_source_last;
wire   [31:0] depacketizer_cmp_source_payload_adr;
reg     [7:0] depacketizer_cmp_source_payload_channel = 8'd0;
wire   [15:0] depacketizer_cmp_source_payload_cmp_id;
wire   [63:0] depacketizer_cmp_source_payload_dat;
wire          depacketizer_cmp_source_payload_end;
wire          depacketizer_cmp_source_payload_err;
wire    [9:0] depacketizer_cmp_source_payload_len;
wire   [15:0] depacketizer_cmp_source_payload_req_id;
wire    [7:0] depacketizer_cmp_source_payload_tag;
reg     [7:0] depacketizer_cmp_source_payload_user_id = 8'd0;
wire          depacketizer_cmp_source_ready;
wire          depacketizer_cmp_source_valid;
wire          depacketizer_conf_source_first;
wire          depacketizer_conf_source_last;
wire    [7:0] depacketizer_conf_source_payload_bus_number;
wire   [63:0] depacketizer_conf_source_payload_dat;
wire    [4:0] depacketizer_conf_source_payload_device_no;
wire    [2:0] depacketizer_conf_source_payload_ext_reg;
wire    [2:0] depacketizer_conf_source_payload_func;
wire    [5:0] depacketizer_conf_source_payload_register_no;
wire   [15:0] depacketizer_conf_source_payload_req_id;
wire    [7:0] depacketizer_conf_source_payload_tag;
reg           depacketizer_conf_source_payload_we = 1'd0;
reg           depacketizer_conf_source_ready = 1'd0;
wire          depacketizer_conf_source_valid;
wire          depacketizer_dispatch_sink_first;
wire          depacketizer_dispatch_sink_last;
reg     [7:0] depacketizer_dispatch_sink_payload_be = 8'd0;
reg    [63:0] depacketizer_dispatch_sink_payload_dat = 64'd0;
wire    [1:0] depacketizer_dispatch_sink_payload_fmt;
wire    [4:0] depacketizer_dispatch_sink_payload_type;
reg           depacketizer_dispatch_sink_ready = 1'd0;
wire          depacketizer_dispatch_sink_valid;
reg           depacketizer_dispatcher_first = 1'd1;
wire          depacketizer_dispatcher_last;
wire          depacketizer_dispatcher_ongoing0;
reg           depacketizer_dispatcher_ongoing1 = 1'd0;
reg     [2:0] depacketizer_dispatcher_sel0 = 3'd0;
reg     [2:0] depacketizer_dispatcher_sel1 = 3'd0;
reg     [2:0] depacketizer_dispatcher_sel_ongoing = 3'd0;
reg           depacketizer_endpoint0_first = 1'd0;
reg           depacketizer_endpoint0_last = 1'd0;
reg     [7:0] depacketizer_endpoint0_payload_be = 8'd0;
reg    [63:0] depacketizer_endpoint0_payload_dat = 64'd0;
reg     [1:0] depacketizer_endpoint0_payload_fmt = 2'd0;
reg     [4:0] depacketizer_endpoint0_payload_type = 5'd0;
wire          depacketizer_endpoint0_ready;
reg           depacketizer_endpoint0_valid = 1'd0;
reg           depacketizer_endpoint1_first = 1'd0;
reg           depacketizer_endpoint1_last = 1'd0;
reg     [7:0] depacketizer_endpoint1_payload_be = 8'd0;
reg    [63:0] depacketizer_endpoint1_payload_dat = 64'd0;
reg     [1:0] depacketizer_endpoint1_payload_fmt = 2'd0;
reg     [4:0] depacketizer_endpoint1_payload_type = 5'd0;
wire          depacketizer_endpoint1_ready;
reg           depacketizer_endpoint1_valid = 1'd0;
reg           depacketizer_endpoint2_first = 1'd0;
reg           depacketizer_endpoint2_last = 1'd0;
reg     [7:0] depacketizer_endpoint2_payload_be = 8'd0;
reg    [63:0] depacketizer_endpoint2_payload_dat = 64'd0;
reg     [1:0] depacketizer_endpoint2_payload_fmt = 2'd0;
reg     [4:0] depacketizer_endpoint2_payload_type = 5'd0;
wire          depacketizer_endpoint2_ready;
reg           depacketizer_endpoint2_valid = 1'd0;
reg           depacketizer_endpoint3_first = 1'd0;
reg           depacketizer_endpoint3_last = 1'd0;
reg     [7:0] depacketizer_endpoint3_payload_be = 8'd0;
reg    [63:0] depacketizer_endpoint3_payload_dat = 64'd0;
reg     [1:0] depacketizer_endpoint3_payload_fmt = 2'd0;
reg     [4:0] depacketizer_endpoint3_payload_type = 5'd0;
wire          depacketizer_endpoint3_ready;
reg           depacketizer_endpoint3_valid = 1'd0;
reg           depacketizer_endpoint4_first = 1'd0;
reg           depacketizer_endpoint4_last = 1'd0;
reg     [7:0] depacketizer_endpoint4_payload_be = 8'd0;
reg    [63:0] depacketizer_endpoint4_payload_dat = 64'd0;
reg     [1:0] depacketizer_endpoint4_payload_fmt = 2'd0;
reg     [4:0] depacketizer_endpoint4_payload_type = 5'd0;
wire          depacketizer_endpoint4_ready;
reg           depacketizer_endpoint4_valid = 1'd0;
reg     [7:0] depacketizer_header_extracter_be = 8'd0;
reg           depacketizer_header_extracter_count = 1'd0;
reg           depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value2 = 1'd0;
reg           depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value_ce2 = 1'd0;
reg    [63:0] depacketizer_header_extracter_dat = 64'd0;
reg           depacketizer_header_extracter_first = 1'd0;
reg           depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value0 = 1'd0;
reg           depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value_ce0 = 1'd0;
reg           depacketizer_header_extracter_last = 1'd0;
reg           depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value1 = 1'd0;
reg           depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value_ce1 = 1'd0;
wire          depacketizer_header_extracter_sink_first;
wire          depacketizer_header_extracter_sink_last;
wire    [7:0] depacketizer_header_extracter_sink_payload_be;
wire   [63:0] depacketizer_header_extracter_sink_payload_dat;
reg           depacketizer_header_extracter_sink_ready = 1'd0;
wire          depacketizer_header_extracter_sink_valid;
reg           depacketizer_header_extracter_source_first = 1'd0;
reg           depacketizer_header_extracter_source_last = 1'd0;
reg     [7:0] depacketizer_header_extracter_source_payload_be = 8'd0;
reg    [63:0] depacketizer_header_extracter_source_payload_dat = 64'd0;
reg   [127:0] depacketizer_header_extracter_source_payload_header = 128'd0;
wire          depacketizer_header_extracter_source_ready;
reg           depacketizer_header_extracter_source_valid = 1'd0;
wire          depacketizer_ptm_source_first;
wire          depacketizer_ptm_source_last;
wire   [63:0] depacketizer_ptm_source_payload_dat;
wire    [9:0] depacketizer_ptm_source_payload_length;
wire   [63:0] depacketizer_ptm_source_payload_master_time;
wire    [7:0] depacketizer_ptm_source_payload_message_code;
wire   [15:0] depacketizer_ptm_source_payload_requester_id;
reg           depacketizer_ptm_source_ready = 1'd0;
wire          depacketizer_ptm_source_valid;
wire          depacketizer_req_source_first;
wire          depacketizer_req_source_last;
wire   [31:0] depacketizer_req_source_payload_adr;
reg     [7:0] depacketizer_req_source_payload_channel = 8'd0;
wire   [63:0] depacketizer_req_source_payload_dat;
wire    [9:0] depacketizer_req_source_payload_len;
wire   [15:0] depacketizer_req_source_payload_req_id;
wire    [7:0] depacketizer_req_source_payload_tag;
reg     [7:0] depacketizer_req_source_payload_user_id = 8'd0;
wire          depacketizer_req_source_payload_we;
wire          depacketizer_req_source_ready;
wire          depacketizer_req_source_valid;
wire          depacketizer_sink_sink_first;
wire          depacketizer_sink_sink_last;
wire    [7:0] depacketizer_sink_sink_payload_be;
wire   [63:0] depacketizer_sink_sink_payload_dat;
wire          depacketizer_sink_sink_ready;
wire          depacketizer_sink_sink_valid;
wire          depacketizer_tlp_cmp_first;
wire          depacketizer_tlp_cmp_last;
wire    [1:0] depacketizer_tlp_cmp_payload_attr;
wire          depacketizer_tlp_cmp_payload_bcm;
wire    [7:0] depacketizer_tlp_cmp_payload_be;
wire   [11:0] depacketizer_tlp_cmp_payload_byte_count;
wire   [15:0] depacketizer_tlp_cmp_payload_completer_id;
wire   [63:0] depacketizer_tlp_cmp_payload_dat;
wire          depacketizer_tlp_cmp_payload_ep;
reg     [1:0] depacketizer_tlp_cmp_payload_fmt = 2'd0;
wire    [9:0] depacketizer_tlp_cmp_payload_length;
wire    [6:0] depacketizer_tlp_cmp_payload_lower_address;
wire   [15:0] depacketizer_tlp_cmp_payload_requester_id;
wire    [2:0] depacketizer_tlp_cmp_payload_status;
wire    [7:0] depacketizer_tlp_cmp_payload_tag;
wire    [2:0] depacketizer_tlp_cmp_payload_tc;
wire          depacketizer_tlp_cmp_payload_td;
reg     [4:0] depacketizer_tlp_cmp_payload_type = 5'd0;
wire          depacketizer_tlp_cmp_ready;
wire          depacketizer_tlp_cmp_valid;
wire          depacketizer_tlp_conf_first;
wire          depacketizer_tlp_conf_last;
wire    [7:0] depacketizer_tlp_conf_payload_be;
wire    [7:0] depacketizer_tlp_conf_payload_bus_number;
wire   [63:0] depacketizer_tlp_conf_payload_dat;
wire    [4:0] depacketizer_tlp_conf_payload_device_no;
wire          depacketizer_tlp_conf_payload_ep;
wire    [2:0] depacketizer_tlp_conf_payload_ext_reg;
wire    [3:0] depacketizer_tlp_conf_payload_first_be;
reg     [1:0] depacketizer_tlp_conf_payload_fmt = 2'd0;
wire    [2:0] depacketizer_tlp_conf_payload_func;
wire    [5:0] depacketizer_tlp_conf_payload_register_no;
wire   [15:0] depacketizer_tlp_conf_payload_requester_id;
wire    [7:0] depacketizer_tlp_conf_payload_tag;
wire          depacketizer_tlp_conf_payload_td;
reg     [4:0] depacketizer_tlp_conf_payload_type = 5'd0;
wire          depacketizer_tlp_conf_ready;
wire          depacketizer_tlp_conf_valid;
wire          depacketizer_tlp_ptm_first;
wire          depacketizer_tlp_ptm_last;
wire    [1:0] depacketizer_tlp_ptm_payload_attr;
wire    [7:0] depacketizer_tlp_ptm_payload_be;
wire   [63:0] depacketizer_tlp_ptm_payload_dat;
wire          depacketizer_tlp_ptm_payload_ep;
reg     [1:0] depacketizer_tlp_ptm_payload_fmt = 2'd0;
wire    [9:0] depacketizer_tlp_ptm_payload_length;
wire          depacketizer_tlp_ptm_payload_ln;
wire   [63:0] depacketizer_tlp_ptm_payload_master_time;
wire    [7:0] depacketizer_tlp_ptm_payload_message_code;
wire   [15:0] depacketizer_tlp_ptm_payload_requester_id;
wire    [2:0] depacketizer_tlp_ptm_payload_tc;
wire          depacketizer_tlp_ptm_payload_td;
wire          depacketizer_tlp_ptm_payload_th;
reg     [4:0] depacketizer_tlp_ptm_payload_type = 5'd0;
wire          depacketizer_tlp_ptm_ready;
wire          depacketizer_tlp_ptm_valid;
wire          depacketizer_tlp_req_first;
wire          depacketizer_tlp_req_last;
wire   [63:0] depacketizer_tlp_req_payload_address;
wire    [1:0] depacketizer_tlp_req_payload_attr;
wire    [7:0] depacketizer_tlp_req_payload_be;
wire   [63:0] depacketizer_tlp_req_payload_dat;
wire          depacketizer_tlp_req_payload_ep;
wire    [3:0] depacketizer_tlp_req_payload_first_be;
reg     [1:0] depacketizer_tlp_req_payload_fmt = 2'd0;
wire    [3:0] depacketizer_tlp_req_payload_last_be;
wire    [9:0] depacketizer_tlp_req_payload_length;
wire   [15:0] depacketizer_tlp_req_payload_requester_id;
wire    [7:0] depacketizer_tlp_req_payload_tag;
wire    [2:0] depacketizer_tlp_req_payload_tc;
wire          depacketizer_tlp_req_payload_td;
reg     [4:0] depacketizer_tlp_req_payload_type = 5'd0;
wire          depacketizer_tlp_req_ready;
wire          depacketizer_tlp_req_valid;
wire          done;
reg           error = 1'd0;
wire          from216_clk;
wire          from216_rst;
wire          from617_clk;
wire          from617_rst;
wire          from808_clk;
wire          from808_rst;
wire          grant;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_re;
wire          interface0_bank_bus_we;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire   [13:0] interface0_sram_bus_adr;
reg    [31:0] interface0_sram_bus_dat_r = 32'd0;
wire   [31:0] interface0_sram_bus_dat_w;
wire          interface0_sram_bus_re;
wire          interface0_sram_bus_we;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_re;
wire          interface1_bank_bus_we;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_re = 1'd0;
wire   [13:0] interface1_sram_bus_adr;
reg    [31:0] interface1_sram_bus_dat_r = 32'd0;
wire   [31:0] interface1_sram_bus_dat_w;
wire          interface1_sram_bus_re;
wire          interface1_sram_bus_we;
reg           interface1_we = 1'd0;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_re;
wire          interface2_bank_bus_we;
wire   [13:0] interface3_bank_bus_adr;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] interface3_bank_bus_dat_w;
wire          interface3_bank_bus_re;
wire          interface3_bank_bus_we;
wire   [13:0] interface4_bank_bus_adr;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] interface4_bank_bus_dat_w;
wire          interface4_bank_bus_re;
wire          interface4_bank_bus_we;
wire          litepcieendpoint_cmp_reorder_first;
wire          litepcieendpoint_cmp_reorder_last;
wire   [31:0] litepcieendpoint_cmp_reorder_payload_adr;
wire    [7:0] litepcieendpoint_cmp_reorder_payload_channel;
wire   [15:0] litepcieendpoint_cmp_reorder_payload_cmp_id;
wire   [63:0] litepcieendpoint_cmp_reorder_payload_dat;
wire          litepcieendpoint_cmp_reorder_payload_end;
wire          litepcieendpoint_cmp_reorder_payload_err;
wire    [9:0] litepcieendpoint_cmp_reorder_payload_len;
wire   [15:0] litepcieendpoint_cmp_reorder_payload_req_id;
wire    [7:0] litepcieendpoint_cmp_reorder_payload_tag;
wire    [7:0] litepcieendpoint_cmp_reorder_payload_user_id;
reg           litepcieendpoint_cmp_reorder_ready = 1'd0;
reg           litepcieendpoint_cmp_reorder_valid = 1'd0;
reg     [2:0] litepcieendpoint_fill_tag = 3'd0;
reg     [2:0] litepcieendpoint_fill_tag_litepciecrossbar_next_value = 3'd0;
reg           litepcieendpoint_fill_tag_litepciecrossbar_next_value_ce = 1'd0;
reg     [1:0] litepcieendpoint_fsm0_next_state = 2'd0;
reg     [1:0] litepcieendpoint_fsm0_state = 2'd0;
reg     [1:0] litepcieendpoint_fsm1_next_state = 2'd0;
reg     [1:0] litepcieendpoint_fsm1_state = 2'd0;
reg           litepcieendpoint_grant = 1'd0;
reg           litepcieendpoint_litepcietlpheaderinserter64b3dws_next_state = 1'd0;
reg           litepcieendpoint_litepcietlpheaderinserter64b3dws_state = 1'd0;
reg           litepcieendpoint_litepcietlpheaderinserter64b4dws_next_state = 1'd0;
reg           litepcieendpoint_litepcietlpheaderinserter64b4dws_state = 1'd0;
reg           litepcieendpoint_m_dispatcher_first = 1'd1;
wire          litepcieendpoint_m_dispatcher_last;
wire          litepcieendpoint_m_dispatcher_ongoing0;
reg           litepcieendpoint_m_dispatcher_ongoing1 = 1'd0;
wire          litepcieendpoint_m_dispatcher_sel0;
reg           litepcieendpoint_m_dispatcher_sel1 = 1'd0;
reg           litepcieendpoint_m_dispatcher_sel_ongoing = 1'd0;
wire          litepcieendpoint_master_in_sink_first;
wire          litepcieendpoint_master_in_sink_last;
wire   [31:0] litepcieendpoint_master_in_sink_payload_adr;
wire    [7:0] litepcieendpoint_master_in_sink_payload_channel;
wire   [63:0] litepcieendpoint_master_in_sink_payload_dat;
wire    [9:0] litepcieendpoint_master_in_sink_payload_len;
wire   [15:0] litepcieendpoint_master_in_sink_payload_req_id;
wire    [7:0] litepcieendpoint_master_in_sink_payload_tag;
wire    [7:0] litepcieendpoint_master_in_sink_payload_user_id;
wire          litepcieendpoint_master_in_sink_payload_we;
reg           litepcieendpoint_master_in_sink_ready = 1'd0;
wire          litepcieendpoint_master_in_sink_valid;
reg           litepcieendpoint_master_in_source_first = 1'd0;
reg           litepcieendpoint_master_in_source_last = 1'd0;
reg    [31:0] litepcieendpoint_master_in_source_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_master_in_source_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_master_in_source_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_master_in_source_payload_dat = 64'd0;
reg           litepcieendpoint_master_in_source_payload_end = 1'd0;
reg           litepcieendpoint_master_in_source_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_master_in_source_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_master_in_source_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_master_in_source_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_master_in_source_payload_user_id = 8'd0;
reg           litepcieendpoint_master_in_source_ready = 1'd0;
reg           litepcieendpoint_master_in_source_valid = 1'd0;
wire          litepcieendpoint_master_out_sink_first;
wire          litepcieendpoint_master_out_sink_last;
wire   [31:0] litepcieendpoint_master_out_sink_payload_adr;
wire    [7:0] litepcieendpoint_master_out_sink_payload_channel;
wire   [63:0] litepcieendpoint_master_out_sink_payload_dat;
wire    [9:0] litepcieendpoint_master_out_sink_payload_len;
wire   [15:0] litepcieendpoint_master_out_sink_payload_req_id;
reg     [7:0] litepcieendpoint_master_out_sink_payload_tag = 8'd0;
wire    [7:0] litepcieendpoint_master_out_sink_payload_user_id;
wire          litepcieendpoint_master_out_sink_payload_we;
wire          litepcieendpoint_master_out_sink_ready;
reg           litepcieendpoint_master_out_sink_valid = 1'd0;
wire          litepcieendpoint_master_out_source_first;
wire          litepcieendpoint_master_out_source_last;
wire   [31:0] litepcieendpoint_master_out_source_payload_adr;
wire    [7:0] litepcieendpoint_master_out_source_payload_channel;
wire   [15:0] litepcieendpoint_master_out_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_master_out_source_payload_dat;
wire          litepcieendpoint_master_out_source_payload_end;
wire          litepcieendpoint_master_out_source_payload_err;
wire    [9:0] litepcieendpoint_master_out_source_payload_len;
wire   [15:0] litepcieendpoint_master_out_source_payload_req_id;
wire    [7:0] litepcieendpoint_master_out_source_payload_tag;
wire    [7:0] litepcieendpoint_master_out_source_payload_user_id;
reg           litepcieendpoint_master_out_source_ready = 1'd0;
wire          litepcieendpoint_master_out_source_valid;
reg     [1:0] litepcieendpoint_next_state = 2'd0;
reg    [31:0] litepcieendpoint_next_value0 = 32'd0;
reg    [31:0] litepcieendpoint_next_value1 = 32'd0;
reg    [31:0] litepcieendpoint_next_value2 = 32'd0;
reg    [31:0] litepcieendpoint_next_value3 = 32'd0;
reg           litepcieendpoint_next_value_ce0 = 1'd0;
reg           litepcieendpoint_next_value_ce1 = 1'd0;
reg           litepcieendpoint_next_value_ce2 = 1'd0;
reg           litepcieendpoint_next_value_ce3 = 1'd0;
reg     [2:0] litepcieendpoint_req_queue_consume = 3'd0;
wire          litepcieendpoint_req_queue_do_read;
wire          litepcieendpoint_req_queue_fifo_in_first;
wire          litepcieendpoint_req_queue_fifo_in_last;
wire    [7:0] litepcieendpoint_req_queue_fifo_in_payload_channel;
wire    [2:0] litepcieendpoint_req_queue_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_req_queue_fifo_in_payload_user_id;
wire          litepcieendpoint_req_queue_fifo_out_first;
wire          litepcieendpoint_req_queue_fifo_out_last;
wire    [7:0] litepcieendpoint_req_queue_fifo_out_payload_channel;
wire    [2:0] litepcieendpoint_req_queue_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_req_queue_fifo_out_payload_user_id;
reg     [3:0] litepcieendpoint_req_queue_level0 = 4'd0;
wire    [3:0] litepcieendpoint_req_queue_level1;
reg     [2:0] litepcieendpoint_req_queue_produce = 3'd0;
wire    [2:0] litepcieendpoint_req_queue_rdport_adr;
wire   [20:0] litepcieendpoint_req_queue_rdport_dat_r;
wire          litepcieendpoint_req_queue_rdport_re;
wire          litepcieendpoint_req_queue_re;
reg           litepcieendpoint_req_queue_readable = 1'd0;
reg           litepcieendpoint_req_queue_replace = 1'd0;
reg           litepcieendpoint_req_queue_sink_first = 1'd0;
reg           litepcieendpoint_req_queue_sink_last = 1'd0;
wire    [7:0] litepcieendpoint_req_queue_sink_payload_channel;
wire    [2:0] litepcieendpoint_req_queue_sink_payload_tag;
wire    [7:0] litepcieendpoint_req_queue_sink_payload_user_id;
wire          litepcieendpoint_req_queue_sink_ready;
reg           litepcieendpoint_req_queue_sink_valid = 1'd0;
wire          litepcieendpoint_req_queue_source_first;
wire          litepcieendpoint_req_queue_source_last;
wire    [7:0] litepcieendpoint_req_queue_source_payload_channel;
wire    [2:0] litepcieendpoint_req_queue_source_payload_tag;
wire    [7:0] litepcieendpoint_req_queue_source_payload_user_id;
reg           litepcieendpoint_req_queue_source_ready = 1'd0;
wire          litepcieendpoint_req_queue_source_valid;
wire   [20:0] litepcieendpoint_req_queue_syncfifo_din;
wire   [20:0] litepcieendpoint_req_queue_syncfifo_dout;
wire          litepcieendpoint_req_queue_syncfifo_re;
wire          litepcieendpoint_req_queue_syncfifo_readable;
wire          litepcieendpoint_req_queue_syncfifo_we;
wire          litepcieendpoint_req_queue_syncfifo_writable;
reg     [2:0] litepcieendpoint_req_queue_wrport_adr = 3'd0;
wire   [20:0] litepcieendpoint_req_queue_wrport_dat_r;
wire   [20:0] litepcieendpoint_req_queue_wrport_dat_w;
wire          litepcieendpoint_req_queue_wrport_we;
reg     [1:0] litepcieendpoint_request = 2'd0;
reg           litepcieendpoint_s_dispatcher_first = 1'd1;
wire          litepcieendpoint_s_dispatcher_last;
wire          litepcieendpoint_s_dispatcher_ongoing0;
reg           litepcieendpoint_s_dispatcher_ongoing1 = 1'd0;
reg     [1:0] litepcieendpoint_s_dispatcher_sel0 = 2'd0;
reg     [1:0] litepcieendpoint_s_dispatcher_sel1 = 2'd0;
reg     [1:0] litepcieendpoint_s_dispatcher_sel_ongoing = 2'd0;
reg     [1:0] litepcieendpoint_state = 2'd0;
reg           litepcieendpoint_status0_first = 1'd1;
wire          litepcieendpoint_status0_last;
wire          litepcieendpoint_status0_ongoing0;
reg           litepcieendpoint_status0_ongoing1 = 1'd0;
reg           litepcieendpoint_status1_first = 1'd1;
wire          litepcieendpoint_status1_last;
wire          litepcieendpoint_status1_ongoing0;
reg           litepcieendpoint_status1_ongoing1 = 1'd0;
reg     [7:0] litepcieendpoint_syncfifo0_consume = 8'd0;
wire          litepcieendpoint_syncfifo0_do_read;
wire          litepcieendpoint_syncfifo0_fifo_in_first;
wire          litepcieendpoint_syncfifo0_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo0_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo0_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo0_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo0_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo0_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo0_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo0_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo0_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo0_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo0_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo0_fifo_out_first;
wire          litepcieendpoint_syncfifo0_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo0_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo0_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo0_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo0_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo0_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo0_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo0_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo0_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo0_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo0_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo0_level1;
reg     [7:0] litepcieendpoint_syncfifo0_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo0_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo0_rdport_dat_r;
wire          litepcieendpoint_syncfifo0_rdport_re;
wire          litepcieendpoint_syncfifo0_re;
reg           litepcieendpoint_syncfifo0_readable = 1'd0;
reg           litepcieendpoint_syncfifo0_replace = 1'd0;
reg           litepcieendpoint_syncfifo0_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo0_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo0_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo0_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo0_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo0_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo0_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo0_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo0_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo0_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo0_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo0_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo0_sink_ready;
reg           litepcieendpoint_syncfifo0_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo0_source_first;
wire          litepcieendpoint_syncfifo0_source_last;
wire   [31:0] litepcieendpoint_syncfifo0_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo0_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo0_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo0_source_payload_dat;
wire          litepcieendpoint_syncfifo0_source_payload_end;
wire          litepcieendpoint_syncfifo0_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo0_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo0_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo0_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo0_source_payload_user_id;
reg           litepcieendpoint_syncfifo0_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo0_source_valid;
wire  [165:0] litepcieendpoint_syncfifo0_syncfifo0_din;
wire  [165:0] litepcieendpoint_syncfifo0_syncfifo0_dout;
wire          litepcieendpoint_syncfifo0_syncfifo0_re;
wire          litepcieendpoint_syncfifo0_syncfifo0_readable;
wire          litepcieendpoint_syncfifo0_syncfifo0_we;
wire          litepcieendpoint_syncfifo0_syncfifo0_writable;
reg     [7:0] litepcieendpoint_syncfifo0_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo0_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo0_wrport_dat_w;
wire          litepcieendpoint_syncfifo0_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo1_consume = 8'd0;
wire          litepcieendpoint_syncfifo1_do_read;
wire          litepcieendpoint_syncfifo1_fifo_in_first;
wire          litepcieendpoint_syncfifo1_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo1_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo1_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo1_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo1_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo1_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo1_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo1_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo1_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo1_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo1_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo1_fifo_out_first;
wire          litepcieendpoint_syncfifo1_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo1_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo1_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo1_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo1_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo1_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo1_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo1_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo1_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo1_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo1_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo1_level1;
reg     [7:0] litepcieendpoint_syncfifo1_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo1_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo1_rdport_dat_r;
wire          litepcieendpoint_syncfifo1_rdport_re;
wire          litepcieendpoint_syncfifo1_re;
reg           litepcieendpoint_syncfifo1_readable = 1'd0;
reg           litepcieendpoint_syncfifo1_replace = 1'd0;
reg           litepcieendpoint_syncfifo1_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo1_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo1_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo1_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo1_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo1_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo1_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo1_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo1_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo1_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo1_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo1_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo1_sink_ready;
reg           litepcieendpoint_syncfifo1_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo1_source_first;
wire          litepcieendpoint_syncfifo1_source_last;
wire   [31:0] litepcieendpoint_syncfifo1_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo1_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo1_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo1_source_payload_dat;
wire          litepcieendpoint_syncfifo1_source_payload_end;
wire          litepcieendpoint_syncfifo1_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo1_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo1_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo1_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo1_source_payload_user_id;
reg           litepcieendpoint_syncfifo1_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo1_source_valid;
wire  [165:0] litepcieendpoint_syncfifo1_syncfifo1_din;
wire  [165:0] litepcieendpoint_syncfifo1_syncfifo1_dout;
wire          litepcieendpoint_syncfifo1_syncfifo1_re;
wire          litepcieendpoint_syncfifo1_syncfifo1_readable;
wire          litepcieendpoint_syncfifo1_syncfifo1_we;
wire          litepcieendpoint_syncfifo1_syncfifo1_writable;
reg     [7:0] litepcieendpoint_syncfifo1_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo1_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo1_wrport_dat_w;
wire          litepcieendpoint_syncfifo1_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo2_consume = 8'd0;
wire          litepcieendpoint_syncfifo2_do_read;
wire          litepcieendpoint_syncfifo2_fifo_in_first;
wire          litepcieendpoint_syncfifo2_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo2_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo2_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo2_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo2_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo2_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo2_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo2_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo2_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo2_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo2_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo2_fifo_out_first;
wire          litepcieendpoint_syncfifo2_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo2_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo2_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo2_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo2_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo2_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo2_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo2_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo2_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo2_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo2_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo2_level1;
reg     [7:0] litepcieendpoint_syncfifo2_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo2_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo2_rdport_dat_r;
wire          litepcieendpoint_syncfifo2_rdport_re;
wire          litepcieendpoint_syncfifo2_re;
reg           litepcieendpoint_syncfifo2_readable = 1'd0;
reg           litepcieendpoint_syncfifo2_replace = 1'd0;
reg           litepcieendpoint_syncfifo2_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo2_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo2_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo2_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo2_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo2_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo2_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo2_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo2_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo2_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo2_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo2_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo2_sink_ready;
reg           litepcieendpoint_syncfifo2_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo2_source_first;
wire          litepcieendpoint_syncfifo2_source_last;
wire   [31:0] litepcieendpoint_syncfifo2_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo2_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo2_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo2_source_payload_dat;
wire          litepcieendpoint_syncfifo2_source_payload_end;
wire          litepcieendpoint_syncfifo2_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo2_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo2_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo2_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo2_source_payload_user_id;
reg           litepcieendpoint_syncfifo2_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo2_source_valid;
wire  [165:0] litepcieendpoint_syncfifo2_syncfifo2_din;
wire  [165:0] litepcieendpoint_syncfifo2_syncfifo2_dout;
wire          litepcieendpoint_syncfifo2_syncfifo2_re;
wire          litepcieendpoint_syncfifo2_syncfifo2_readable;
wire          litepcieendpoint_syncfifo2_syncfifo2_we;
wire          litepcieendpoint_syncfifo2_syncfifo2_writable;
reg     [7:0] litepcieendpoint_syncfifo2_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo2_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo2_wrport_dat_w;
wire          litepcieendpoint_syncfifo2_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo3_consume = 8'd0;
wire          litepcieendpoint_syncfifo3_do_read;
wire          litepcieendpoint_syncfifo3_fifo_in_first;
wire          litepcieendpoint_syncfifo3_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo3_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo3_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo3_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo3_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo3_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo3_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo3_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo3_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo3_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo3_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo3_fifo_out_first;
wire          litepcieendpoint_syncfifo3_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo3_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo3_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo3_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo3_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo3_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo3_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo3_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo3_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo3_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo3_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo3_level1;
reg     [7:0] litepcieendpoint_syncfifo3_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo3_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo3_rdport_dat_r;
wire          litepcieendpoint_syncfifo3_rdport_re;
wire          litepcieendpoint_syncfifo3_re;
reg           litepcieendpoint_syncfifo3_readable = 1'd0;
reg           litepcieendpoint_syncfifo3_replace = 1'd0;
reg           litepcieendpoint_syncfifo3_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo3_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo3_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo3_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo3_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo3_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo3_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo3_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo3_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo3_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo3_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo3_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo3_sink_ready;
reg           litepcieendpoint_syncfifo3_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo3_source_first;
wire          litepcieendpoint_syncfifo3_source_last;
wire   [31:0] litepcieendpoint_syncfifo3_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo3_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo3_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo3_source_payload_dat;
wire          litepcieendpoint_syncfifo3_source_payload_end;
wire          litepcieendpoint_syncfifo3_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo3_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo3_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo3_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo3_source_payload_user_id;
reg           litepcieendpoint_syncfifo3_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo3_source_valid;
wire  [165:0] litepcieendpoint_syncfifo3_syncfifo3_din;
wire  [165:0] litepcieendpoint_syncfifo3_syncfifo3_dout;
wire          litepcieendpoint_syncfifo3_syncfifo3_re;
wire          litepcieendpoint_syncfifo3_syncfifo3_readable;
wire          litepcieendpoint_syncfifo3_syncfifo3_we;
wire          litepcieendpoint_syncfifo3_syncfifo3_writable;
reg     [7:0] litepcieendpoint_syncfifo3_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo3_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo3_wrport_dat_w;
wire          litepcieendpoint_syncfifo3_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo4_consume = 8'd0;
wire          litepcieendpoint_syncfifo4_do_read;
wire          litepcieendpoint_syncfifo4_fifo_in_first;
wire          litepcieendpoint_syncfifo4_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo4_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo4_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo4_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo4_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo4_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo4_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo4_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo4_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo4_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo4_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo4_fifo_out_first;
wire          litepcieendpoint_syncfifo4_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo4_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo4_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo4_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo4_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo4_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo4_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo4_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo4_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo4_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo4_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo4_level1;
reg     [7:0] litepcieendpoint_syncfifo4_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo4_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo4_rdport_dat_r;
wire          litepcieendpoint_syncfifo4_rdport_re;
wire          litepcieendpoint_syncfifo4_re;
reg           litepcieendpoint_syncfifo4_readable = 1'd0;
reg           litepcieendpoint_syncfifo4_replace = 1'd0;
reg           litepcieendpoint_syncfifo4_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo4_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo4_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo4_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo4_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo4_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo4_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo4_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo4_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo4_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo4_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo4_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo4_sink_ready;
reg           litepcieendpoint_syncfifo4_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo4_source_first;
wire          litepcieendpoint_syncfifo4_source_last;
wire   [31:0] litepcieendpoint_syncfifo4_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo4_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo4_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo4_source_payload_dat;
wire          litepcieendpoint_syncfifo4_source_payload_end;
wire          litepcieendpoint_syncfifo4_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo4_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo4_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo4_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo4_source_payload_user_id;
reg           litepcieendpoint_syncfifo4_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo4_source_valid;
wire  [165:0] litepcieendpoint_syncfifo4_syncfifo4_din;
wire  [165:0] litepcieendpoint_syncfifo4_syncfifo4_dout;
wire          litepcieendpoint_syncfifo4_syncfifo4_re;
wire          litepcieendpoint_syncfifo4_syncfifo4_readable;
wire          litepcieendpoint_syncfifo4_syncfifo4_we;
wire          litepcieendpoint_syncfifo4_syncfifo4_writable;
reg     [7:0] litepcieendpoint_syncfifo4_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo4_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo4_wrport_dat_w;
wire          litepcieendpoint_syncfifo4_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo5_consume = 8'd0;
wire          litepcieendpoint_syncfifo5_do_read;
wire          litepcieendpoint_syncfifo5_fifo_in_first;
wire          litepcieendpoint_syncfifo5_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo5_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo5_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo5_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo5_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo5_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo5_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo5_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo5_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo5_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo5_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo5_fifo_out_first;
wire          litepcieendpoint_syncfifo5_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo5_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo5_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo5_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo5_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo5_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo5_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo5_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo5_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo5_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo5_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo5_level1;
reg     [7:0] litepcieendpoint_syncfifo5_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo5_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo5_rdport_dat_r;
wire          litepcieendpoint_syncfifo5_rdport_re;
wire          litepcieendpoint_syncfifo5_re;
reg           litepcieendpoint_syncfifo5_readable = 1'd0;
reg           litepcieendpoint_syncfifo5_replace = 1'd0;
reg           litepcieendpoint_syncfifo5_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo5_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo5_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo5_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo5_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo5_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo5_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo5_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo5_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo5_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo5_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo5_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo5_sink_ready;
reg           litepcieendpoint_syncfifo5_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo5_source_first;
wire          litepcieendpoint_syncfifo5_source_last;
wire   [31:0] litepcieendpoint_syncfifo5_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo5_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo5_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo5_source_payload_dat;
wire          litepcieendpoint_syncfifo5_source_payload_end;
wire          litepcieendpoint_syncfifo5_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo5_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo5_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo5_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo5_source_payload_user_id;
reg           litepcieendpoint_syncfifo5_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo5_source_valid;
wire  [165:0] litepcieendpoint_syncfifo5_syncfifo5_din;
wire  [165:0] litepcieendpoint_syncfifo5_syncfifo5_dout;
wire          litepcieendpoint_syncfifo5_syncfifo5_re;
wire          litepcieendpoint_syncfifo5_syncfifo5_readable;
wire          litepcieendpoint_syncfifo5_syncfifo5_we;
wire          litepcieendpoint_syncfifo5_syncfifo5_writable;
reg     [7:0] litepcieendpoint_syncfifo5_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo5_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo5_wrport_dat_w;
wire          litepcieendpoint_syncfifo5_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo6_consume = 8'd0;
wire          litepcieendpoint_syncfifo6_do_read;
wire          litepcieendpoint_syncfifo6_fifo_in_first;
wire          litepcieendpoint_syncfifo6_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo6_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo6_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo6_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo6_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo6_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo6_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo6_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo6_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo6_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo6_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo6_fifo_out_first;
wire          litepcieendpoint_syncfifo6_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo6_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo6_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo6_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo6_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo6_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo6_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo6_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo6_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo6_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo6_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo6_level1;
reg     [7:0] litepcieendpoint_syncfifo6_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo6_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo6_rdport_dat_r;
wire          litepcieendpoint_syncfifo6_rdport_re;
wire          litepcieendpoint_syncfifo6_re;
reg           litepcieendpoint_syncfifo6_readable = 1'd0;
reg           litepcieendpoint_syncfifo6_replace = 1'd0;
reg           litepcieendpoint_syncfifo6_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo6_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo6_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo6_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo6_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo6_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo6_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo6_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo6_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo6_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo6_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo6_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo6_sink_ready;
reg           litepcieendpoint_syncfifo6_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo6_source_first;
wire          litepcieendpoint_syncfifo6_source_last;
wire   [31:0] litepcieendpoint_syncfifo6_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo6_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo6_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo6_source_payload_dat;
wire          litepcieendpoint_syncfifo6_source_payload_end;
wire          litepcieendpoint_syncfifo6_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo6_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo6_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo6_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo6_source_payload_user_id;
reg           litepcieendpoint_syncfifo6_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo6_source_valid;
wire  [165:0] litepcieendpoint_syncfifo6_syncfifo6_din;
wire  [165:0] litepcieendpoint_syncfifo6_syncfifo6_dout;
wire          litepcieendpoint_syncfifo6_syncfifo6_re;
wire          litepcieendpoint_syncfifo6_syncfifo6_readable;
wire          litepcieendpoint_syncfifo6_syncfifo6_we;
wire          litepcieendpoint_syncfifo6_syncfifo6_writable;
reg     [7:0] litepcieendpoint_syncfifo6_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo6_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo6_wrport_dat_w;
wire          litepcieendpoint_syncfifo6_wrport_we;
reg     [7:0] litepcieendpoint_syncfifo7_consume = 8'd0;
wire          litepcieendpoint_syncfifo7_do_read;
wire          litepcieendpoint_syncfifo7_fifo_in_first;
wire          litepcieendpoint_syncfifo7_fifo_in_last;
wire   [31:0] litepcieendpoint_syncfifo7_fifo_in_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo7_fifo_in_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo7_fifo_in_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo7_fifo_in_payload_dat;
wire          litepcieendpoint_syncfifo7_fifo_in_payload_end;
wire          litepcieendpoint_syncfifo7_fifo_in_payload_err;
wire    [9:0] litepcieendpoint_syncfifo7_fifo_in_payload_len;
wire   [15:0] litepcieendpoint_syncfifo7_fifo_in_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo7_fifo_in_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo7_fifo_in_payload_user_id;
wire          litepcieendpoint_syncfifo7_fifo_out_first;
wire          litepcieendpoint_syncfifo7_fifo_out_last;
wire   [31:0] litepcieendpoint_syncfifo7_fifo_out_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo7_fifo_out_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo7_fifo_out_payload_dat;
wire          litepcieendpoint_syncfifo7_fifo_out_payload_end;
wire          litepcieendpoint_syncfifo7_fifo_out_payload_err;
wire    [9:0] litepcieendpoint_syncfifo7_fifo_out_payload_len;
wire   [15:0] litepcieendpoint_syncfifo7_fifo_out_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo7_fifo_out_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo7_fifo_out_payload_user_id;
reg     [8:0] litepcieendpoint_syncfifo7_level0 = 9'd0;
wire    [8:0] litepcieendpoint_syncfifo7_level1;
reg     [7:0] litepcieendpoint_syncfifo7_produce = 8'd0;
wire    [7:0] litepcieendpoint_syncfifo7_rdport_adr;
wire  [165:0] litepcieendpoint_syncfifo7_rdport_dat_r;
wire          litepcieendpoint_syncfifo7_rdport_re;
wire          litepcieendpoint_syncfifo7_re;
reg           litepcieendpoint_syncfifo7_readable = 1'd0;
reg           litepcieendpoint_syncfifo7_replace = 1'd0;
reg           litepcieendpoint_syncfifo7_sink_first = 1'd0;
reg           litepcieendpoint_syncfifo7_sink_last = 1'd0;
reg    [31:0] litepcieendpoint_syncfifo7_sink_payload_adr = 32'd0;
reg     [7:0] litepcieendpoint_syncfifo7_sink_payload_channel = 8'd0;
reg    [15:0] litepcieendpoint_syncfifo7_sink_payload_cmp_id = 16'd0;
reg    [63:0] litepcieendpoint_syncfifo7_sink_payload_dat = 64'd0;
reg           litepcieendpoint_syncfifo7_sink_payload_end = 1'd0;
reg           litepcieendpoint_syncfifo7_sink_payload_err = 1'd0;
reg     [9:0] litepcieendpoint_syncfifo7_sink_payload_len = 10'd0;
reg    [15:0] litepcieendpoint_syncfifo7_sink_payload_req_id = 16'd0;
reg     [7:0] litepcieendpoint_syncfifo7_sink_payload_tag = 8'd0;
reg     [7:0] litepcieendpoint_syncfifo7_sink_payload_user_id = 8'd0;
wire          litepcieendpoint_syncfifo7_sink_ready;
reg           litepcieendpoint_syncfifo7_sink_valid = 1'd0;
wire          litepcieendpoint_syncfifo7_source_first;
wire          litepcieendpoint_syncfifo7_source_last;
wire   [31:0] litepcieendpoint_syncfifo7_source_payload_adr;
wire    [7:0] litepcieendpoint_syncfifo7_source_payload_channel;
wire   [15:0] litepcieendpoint_syncfifo7_source_payload_cmp_id;
wire   [63:0] litepcieendpoint_syncfifo7_source_payload_dat;
wire          litepcieendpoint_syncfifo7_source_payload_end;
wire          litepcieendpoint_syncfifo7_source_payload_err;
wire    [9:0] litepcieendpoint_syncfifo7_source_payload_len;
wire   [15:0] litepcieendpoint_syncfifo7_source_payload_req_id;
wire    [7:0] litepcieendpoint_syncfifo7_source_payload_tag;
wire    [7:0] litepcieendpoint_syncfifo7_source_payload_user_id;
reg           litepcieendpoint_syncfifo7_source_ready = 1'd0;
wire          litepcieendpoint_syncfifo7_source_valid;
wire  [165:0] litepcieendpoint_syncfifo7_syncfifo7_din;
wire  [165:0] litepcieendpoint_syncfifo7_syncfifo7_dout;
wire          litepcieendpoint_syncfifo7_syncfifo7_re;
wire          litepcieendpoint_syncfifo7_syncfifo7_readable;
wire          litepcieendpoint_syncfifo7_syncfifo7_we;
wire          litepcieendpoint_syncfifo7_syncfifo7_writable;
reg     [7:0] litepcieendpoint_syncfifo7_wrport_adr = 8'd0;
wire  [165:0] litepcieendpoint_syncfifo7_wrport_dat_r;
wire  [165:0] litepcieendpoint_syncfifo7_wrport_dat_w;
wire          litepcieendpoint_syncfifo7_wrport_we;
reg     [2:0] litepcieendpoint_tag_queue_consume = 3'd0;
wire          litepcieendpoint_tag_queue_do_read;
wire          litepcieendpoint_tag_queue_fifo_in_first;
wire          litepcieendpoint_tag_queue_fifo_in_last;
wire    [2:0] litepcieendpoint_tag_queue_fifo_in_payload_tag;
wire          litepcieendpoint_tag_queue_fifo_out_first;
wire          litepcieendpoint_tag_queue_fifo_out_last;
wire    [2:0] litepcieendpoint_tag_queue_fifo_out_payload_tag;
reg     [3:0] litepcieendpoint_tag_queue_level0 = 4'd0;
wire    [3:0] litepcieendpoint_tag_queue_level1;
reg     [2:0] litepcieendpoint_tag_queue_produce = 3'd0;
wire    [2:0] litepcieendpoint_tag_queue_rdport_adr;
wire    [4:0] litepcieendpoint_tag_queue_rdport_dat_r;
wire          litepcieendpoint_tag_queue_rdport_re;
wire          litepcieendpoint_tag_queue_re;
reg           litepcieendpoint_tag_queue_readable = 1'd0;
reg           litepcieendpoint_tag_queue_replace = 1'd0;
reg           litepcieendpoint_tag_queue_sink_first = 1'd0;
reg           litepcieendpoint_tag_queue_sink_last = 1'd0;
reg     [2:0] litepcieendpoint_tag_queue_sink_payload_tag = 3'd0;
wire          litepcieendpoint_tag_queue_sink_ready;
reg           litepcieendpoint_tag_queue_sink_valid = 1'd0;
wire          litepcieendpoint_tag_queue_source_first;
wire          litepcieendpoint_tag_queue_source_last;
wire    [2:0] litepcieendpoint_tag_queue_source_payload_tag;
reg           litepcieendpoint_tag_queue_source_ready = 1'd0;
wire          litepcieendpoint_tag_queue_source_valid;
wire    [4:0] litepcieendpoint_tag_queue_syncfifo_din;
wire    [4:0] litepcieendpoint_tag_queue_syncfifo_dout;
wire          litepcieendpoint_tag_queue_syncfifo_re;
wire          litepcieendpoint_tag_queue_syncfifo_readable;
wire          litepcieendpoint_tag_queue_syncfifo_we;
wire          litepcieendpoint_tag_queue_syncfifo_writable;
reg     [2:0] litepcieendpoint_tag_queue_wrport_adr = 3'd0;
wire    [4:0] litepcieendpoint_tag_queue_wrport_dat_r;
wire    [4:0] litepcieendpoint_tag_queue_wrport_dat_w;
wire          litepcieendpoint_tag_queue_wrport_we;
reg           litepciemsix_next_state = 1'd0;
reg           litepciemsix_state = 1'd0;
reg     [1:0] litepciewishbonemaster_next_state = 2'd0;
reg     [1:0] litepciewishbonemaster_state = 2'd0;
wire          master_sink_first;
wire          master_sink_last;
wire   [31:0] master_sink_payload_adr;
wire    [7:0] master_sink_payload_channel;
wire   [63:0] master_sink_payload_dat;
wire    [9:0] master_sink_payload_len;
wire   [15:0] master_sink_payload_req_id;
wire    [7:0] master_sink_payload_tag;
wire    [7:0] master_sink_payload_user_id;
wire          master_sink_payload_we;
wire          master_sink_ready;
wire          master_sink_valid;
wire          master_source_first;
wire          master_source_last;
wire   [31:0] master_source_payload_adr;
wire    [7:0] master_source_payload_channel;
wire   [15:0] master_source_payload_cmp_id;
wire   [63:0] master_source_payload_dat;
wire          master_source_payload_end;
wire          master_source_payload_err;
wire    [9:0] master_source_payload_len;
wire   [15:0] master_source_payload_req_id;
wire    [7:0] master_source_payload_tag;
wire    [7:0] master_source_payload_user_id;
wire          master_source_ready;
wire          master_source_valid;
wire          mmcm_fb;
wire          packetizer_cmp_sink_first;
wire          packetizer_cmp_sink_last;
wire   [31:0] packetizer_cmp_sink_payload_adr;
wire    [7:0] packetizer_cmp_sink_payload_channel;
wire   [15:0] packetizer_cmp_sink_payload_cmp_id;
wire   [63:0] packetizer_cmp_sink_payload_dat;
wire          packetizer_cmp_sink_payload_end;
wire          packetizer_cmp_sink_payload_err;
wire    [9:0] packetizer_cmp_sink_payload_len;
wire   [15:0] packetizer_cmp_sink_payload_req_id;
wire    [7:0] packetizer_cmp_sink_payload_tag;
wire    [7:0] packetizer_cmp_sink_payload_user_id;
wire          packetizer_cmp_sink_ready;
wire          packetizer_cmp_sink_valid;
reg     [1:0] packetizer_grant = 2'd0;
reg     [7:0] packetizer_header_inserter_header_inserter_3dws_be = 8'd0;
reg           packetizer_header_inserter_header_inserter_3dws_count = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value_ce = 1'd0;
reg    [63:0] packetizer_header_inserter_header_inserter_3dws_dat = 64'd0;
reg           packetizer_header_inserter_header_inserter_3dws_last = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_sink_first = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_sink_last = 1'd0;
reg     [7:0] packetizer_header_inserter_header_inserter_3dws_sink_payload_be = 8'd0;
reg    [63:0] packetizer_header_inserter_header_inserter_3dws_sink_payload_dat = 64'd0;
reg     [1:0] packetizer_header_inserter_header_inserter_3dws_sink_payload_fmt = 2'd0;
reg   [127:0] packetizer_header_inserter_header_inserter_3dws_sink_payload_header = 128'd0;
reg           packetizer_header_inserter_header_inserter_3dws_sink_ready = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_sink_valid = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_source_first = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_source_last = 1'd0;
reg     [7:0] packetizer_header_inserter_header_inserter_3dws_source_payload_be = 8'd0;
reg    [63:0] packetizer_header_inserter_header_inserter_3dws_source_payload_dat = 64'd0;
reg           packetizer_header_inserter_header_inserter_3dws_source_ready = 1'd0;
reg           packetizer_header_inserter_header_inserter_3dws_source_valid = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_count = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value_ce = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_sink_first = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_sink_last = 1'd0;
reg     [7:0] packetizer_header_inserter_header_inserter_4dws_sink_payload_be = 8'd0;
reg    [63:0] packetizer_header_inserter_header_inserter_4dws_sink_payload_dat = 64'd0;
reg     [1:0] packetizer_header_inserter_header_inserter_4dws_sink_payload_fmt = 2'd0;
reg   [127:0] packetizer_header_inserter_header_inserter_4dws_sink_payload_header = 128'd0;
reg           packetizer_header_inserter_header_inserter_4dws_sink_ready = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_sink_valid = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_source_first = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_source_last = 1'd0;
reg     [7:0] packetizer_header_inserter_header_inserter_4dws_source_payload_be = 8'd0;
reg    [63:0] packetizer_header_inserter_header_inserter_4dws_source_payload_dat = 64'd0;
reg           packetizer_header_inserter_header_inserter_4dws_source_ready = 1'd0;
reg           packetizer_header_inserter_header_inserter_4dws_source_valid = 1'd0;
reg           packetizer_header_inserter_header_sel = 1'd0;
wire          packetizer_header_inserter_sink_sink_first;
wire          packetizer_header_inserter_sink_sink_last;
wire    [7:0] packetizer_header_inserter_sink_sink_payload_be;
wire   [63:0] packetizer_header_inserter_sink_sink_payload_dat;
wire    [1:0] packetizer_header_inserter_sink_sink_payload_fmt;
wire  [127:0] packetizer_header_inserter_sink_sink_payload_header;
reg           packetizer_header_inserter_sink_sink_ready = 1'd0;
wire          packetizer_header_inserter_sink_sink_valid;
reg           packetizer_header_inserter_source_source_first = 1'd0;
reg           packetizer_header_inserter_source_source_last = 1'd0;
reg     [7:0] packetizer_header_inserter_source_source_payload_be = 8'd0;
reg    [63:0] packetizer_header_inserter_source_source_payload_dat = 64'd0;
wire          packetizer_header_inserter_source_source_ready;
reg           packetizer_header_inserter_source_source_valid = 1'd0;
reg           packetizer_ptm_sink_first = 1'd0;
reg           packetizer_ptm_sink_last = 1'd0;
reg    [63:0] packetizer_ptm_sink_payload_dat = 64'd0;
reg     [9:0] packetizer_ptm_sink_payload_length = 10'd0;
reg    [63:0] packetizer_ptm_sink_payload_master_time = 64'd0;
reg     [7:0] packetizer_ptm_sink_payload_message_code = 8'd0;
reg           packetizer_ptm_sink_payload_request = 1'd0;
reg    [15:0] packetizer_ptm_sink_payload_requester_id = 16'd0;
reg           packetizer_ptm_sink_payload_response = 1'd0;
wire          packetizer_ptm_sink_ready;
reg           packetizer_ptm_sink_valid = 1'd0;
wire          packetizer_req_sink_first;
wire          packetizer_req_sink_last;
wire   [31:0] packetizer_req_sink_payload_adr;
wire    [7:0] packetizer_req_sink_payload_channel;
wire   [63:0] packetizer_req_sink_payload_dat;
wire    [9:0] packetizer_req_sink_payload_len;
wire   [15:0] packetizer_req_sink_payload_req_id;
wire    [7:0] packetizer_req_sink_payload_tag;
wire    [7:0] packetizer_req_sink_payload_user_id;
wire          packetizer_req_sink_payload_we;
wire          packetizer_req_sink_ready;
wire          packetizer_req_sink_valid;
reg     [2:0] packetizer_request = 3'd0;
wire          packetizer_source_first;
wire          packetizer_source_last;
reg     [7:0] packetizer_source_payload_be = 8'd0;
reg    [63:0] packetizer_source_payload_dat = 64'd0;
wire          packetizer_source_ready;
wire          packetizer_source_valid;
reg           packetizer_status0_first = 1'd1;
wire          packetizer_status0_last;
wire          packetizer_status0_ongoing0;
reg           packetizer_status0_ongoing1 = 1'd0;
reg           packetizer_status1_first = 1'd1;
wire          packetizer_status1_last;
wire          packetizer_status1_ongoing0;
reg           packetizer_status1_ongoing1 = 1'd0;
reg           packetizer_status2_first = 1'd1;
wire          packetizer_status2_last;
wire          packetizer_status2_ongoing0;
reg           packetizer_status2_ongoing1 = 1'd0;
wire          packetizer_tlp_cmp_first;
wire          packetizer_tlp_cmp_last;
wire    [1:0] packetizer_tlp_cmp_payload_attr;
wire          packetizer_tlp_cmp_payload_bcm;
reg     [7:0] packetizer_tlp_cmp_payload_be = 8'd0;
wire   [11:0] packetizer_tlp_cmp_payload_byte_count;
wire   [15:0] packetizer_tlp_cmp_payload_completer_id;
wire   [63:0] packetizer_tlp_cmp_payload_dat;
wire          packetizer_tlp_cmp_payload_ep;
reg     [1:0] packetizer_tlp_cmp_payload_fmt = 2'd0;
wire    [9:0] packetizer_tlp_cmp_payload_length;
wire    [6:0] packetizer_tlp_cmp_payload_lower_address;
wire   [15:0] packetizer_tlp_cmp_payload_requester_id;
reg     [2:0] packetizer_tlp_cmp_payload_status = 3'd0;
wire    [7:0] packetizer_tlp_cmp_payload_tag;
wire    [2:0] packetizer_tlp_cmp_payload_tc;
wire          packetizer_tlp_cmp_payload_td;
reg     [4:0] packetizer_tlp_cmp_payload_type = 5'd0;
wire          packetizer_tlp_cmp_ready;
wire          packetizer_tlp_cmp_valid;
wire          packetizer_tlp_ptm_first;
wire          packetizer_tlp_ptm_last;
wire    [1:0] packetizer_tlp_ptm_payload_attr;
reg     [7:0] packetizer_tlp_ptm_payload_be = 8'd0;
reg    [63:0] packetizer_tlp_ptm_payload_dat = 64'd0;
wire          packetizer_tlp_ptm_payload_ep;
reg     [1:0] packetizer_tlp_ptm_payload_fmt = 2'd0;
wire    [9:0] packetizer_tlp_ptm_payload_length;
wire          packetizer_tlp_ptm_payload_ln;
wire   [63:0] packetizer_tlp_ptm_payload_master_time;
wire    [7:0] packetizer_tlp_ptm_payload_message_code;
wire   [15:0] packetizer_tlp_ptm_payload_requester_id;
wire    [2:0] packetizer_tlp_ptm_payload_tc;
wire          packetizer_tlp_ptm_payload_td;
wire          packetizer_tlp_ptm_payload_th;
reg     [4:0] packetizer_tlp_ptm_payload_type = 5'd0;
wire          packetizer_tlp_ptm_ready;
wire          packetizer_tlp_ptm_valid;
wire          packetizer_tlp_raw_buf_pipe_valid_sink_first;
wire          packetizer_tlp_raw_buf_pipe_valid_sink_last;
wire    [7:0] packetizer_tlp_raw_buf_pipe_valid_sink_payload_be;
wire   [63:0] packetizer_tlp_raw_buf_pipe_valid_sink_payload_dat;
wire    [1:0] packetizer_tlp_raw_buf_pipe_valid_sink_payload_fmt;
wire  [127:0] packetizer_tlp_raw_buf_pipe_valid_sink_payload_header;
wire          packetizer_tlp_raw_buf_pipe_valid_sink_ready;
wire          packetizer_tlp_raw_buf_pipe_valid_sink_valid;
reg           packetizer_tlp_raw_buf_pipe_valid_source_first = 1'd0;
reg           packetizer_tlp_raw_buf_pipe_valid_source_last = 1'd0;
reg     [7:0] packetizer_tlp_raw_buf_pipe_valid_source_payload_be = 8'd0;
reg    [63:0] packetizer_tlp_raw_buf_pipe_valid_source_payload_dat = 64'd0;
reg     [1:0] packetizer_tlp_raw_buf_pipe_valid_source_payload_fmt = 2'd0;
reg   [127:0] packetizer_tlp_raw_buf_pipe_valid_source_payload_header = 128'd0;
wire          packetizer_tlp_raw_buf_pipe_valid_source_ready;
reg           packetizer_tlp_raw_buf_pipe_valid_source_valid = 1'd0;
wire          packetizer_tlp_raw_buf_sink_sink_first;
wire          packetizer_tlp_raw_buf_sink_sink_last;
wire    [7:0] packetizer_tlp_raw_buf_sink_sink_payload_be;
wire   [63:0] packetizer_tlp_raw_buf_sink_sink_payload_dat;
wire    [1:0] packetizer_tlp_raw_buf_sink_sink_payload_fmt;
wire  [127:0] packetizer_tlp_raw_buf_sink_sink_payload_header;
wire          packetizer_tlp_raw_buf_sink_sink_ready;
wire          packetizer_tlp_raw_buf_sink_sink_valid;
wire          packetizer_tlp_raw_buf_source_source_first;
wire          packetizer_tlp_raw_buf_source_source_last;
wire    [7:0] packetizer_tlp_raw_buf_source_source_payload_be;
wire   [63:0] packetizer_tlp_raw_buf_source_source_payload_dat;
wire    [1:0] packetizer_tlp_raw_buf_source_source_payload_fmt;
wire  [127:0] packetizer_tlp_raw_buf_source_source_payload_header;
wire          packetizer_tlp_raw_buf_source_source_ready;
wire          packetizer_tlp_raw_buf_source_source_valid;
wire          packetizer_tlp_raw_cmp_first;
reg   [127:0] packetizer_tlp_raw_cmp_header = 128'd0;
wire          packetizer_tlp_raw_cmp_last;
wire    [7:0] packetizer_tlp_raw_cmp_payload_be;
wire   [63:0] packetizer_tlp_raw_cmp_payload_dat;
wire    [1:0] packetizer_tlp_raw_cmp_payload_fmt;
reg   [127:0] packetizer_tlp_raw_cmp_payload_header = 128'd0;
reg           packetizer_tlp_raw_cmp_ready = 1'd0;
wire          packetizer_tlp_raw_cmp_valid;
wire          packetizer_tlp_raw_d_first;
wire          packetizer_tlp_raw_d_last;
wire    [7:0] packetizer_tlp_raw_d_payload_be;
wire   [63:0] packetizer_tlp_raw_d_payload_dat;
wire    [1:0] packetizer_tlp_raw_d_payload_fmt;
wire  [127:0] packetizer_tlp_raw_d_payload_header;
wire          packetizer_tlp_raw_d_ready;
wire          packetizer_tlp_raw_d_valid;
reg           packetizer_tlp_raw_first = 1'd0;
reg           packetizer_tlp_raw_last = 1'd0;
reg     [7:0] packetizer_tlp_raw_payload_be = 8'd0;
reg    [63:0] packetizer_tlp_raw_payload_dat = 64'd0;
reg     [1:0] packetizer_tlp_raw_payload_fmt = 2'd0;
reg   [127:0] packetizer_tlp_raw_payload_header = 128'd0;
wire          packetizer_tlp_raw_ptm_first;
reg   [127:0] packetizer_tlp_raw_ptm_header = 128'd0;
wire          packetizer_tlp_raw_ptm_last;
wire    [7:0] packetizer_tlp_raw_ptm_payload_be;
wire   [63:0] packetizer_tlp_raw_ptm_payload_dat;
wire    [1:0] packetizer_tlp_raw_ptm_payload_fmt;
reg   [127:0] packetizer_tlp_raw_ptm_payload_header = 128'd0;
reg           packetizer_tlp_raw_ptm_ready = 1'd0;
wire          packetizer_tlp_raw_ptm_valid;
wire          packetizer_tlp_raw_ready;
wire          packetizer_tlp_raw_req_first;
reg   [127:0] packetizer_tlp_raw_req_header = 128'd0;
wire          packetizer_tlp_raw_req_last;
wire    [7:0] packetizer_tlp_raw_req_payload_be;
wire   [63:0] packetizer_tlp_raw_req_payload_dat;
wire    [1:0] packetizer_tlp_raw_req_payload_fmt;
reg   [127:0] packetizer_tlp_raw_req_payload_header = 128'd0;
reg           packetizer_tlp_raw_req_ready = 1'd0;
wire          packetizer_tlp_raw_req_valid;
reg           packetizer_tlp_raw_valid = 1'd0;
wire          packetizer_tlp_req_first;
wire          packetizer_tlp_req_last;
wire   [63:0] packetizer_tlp_req_payload_address;
wire    [1:0] packetizer_tlp_req_payload_attr;
reg     [7:0] packetizer_tlp_req_payload_be = 8'd0;
wire   [63:0] packetizer_tlp_req_payload_dat;
wire          packetizer_tlp_req_payload_ep;
wire    [3:0] packetizer_tlp_req_payload_first_be;
reg     [1:0] packetizer_tlp_req_payload_fmt = 2'd0;
reg     [3:0] packetizer_tlp_req_payload_last_be = 4'd0;
wire    [9:0] packetizer_tlp_req_payload_length;
wire   [15:0] packetizer_tlp_req_payload_requester_id;
wire    [7:0] packetizer_tlp_req_payload_tag;
wire    [2:0] packetizer_tlp_req_payload_tc;
wire          packetizer_tlp_req_payload_td;
wire    [4:0] packetizer_tlp_req_payload_type;
wire          packetizer_tlp_req_ready;
wire          packetizer_tlp_req_valid;
wire          pcie_clk;
reg    [63:0] pcie_msi_clear = 64'd0;
wire   [63:0] pcie_msi_enable;
reg           pcie_msi_enable_re = 1'd0;
reg    [63:0] pcie_msi_enable_storage = 64'd0;
reg    [63:0] pcie_msi_irqs = 64'd0;
reg    [63:0] pcie_msi_msix_clear = 64'd0;
reg    [63:0] pcie_msi_msix_clear_on_ready = 64'd0;
reg    [63:0] pcie_msi_msix_clear_on_ready_litepciemsix_next_value = 64'd0;
reg           pcie_msi_msix_clear_on_ready_litepciemsix_next_value_ce = 1'd0;
reg     [5:0] pcie_msi_msix_num = 6'd0;
reg           pcie_msi_msix_valid = 1'd0;
reg           pcie_msi_pba_re = 1'd0;
wire   [63:0] pcie_msi_pba_status;
wire          pcie_msi_pba_we;
wire          pcie_msi_sink_first;
wire          pcie_msi_sink_last;
wire   [31:0] pcie_msi_sink_payload_adr;
wire    [7:0] pcie_msi_sink_payload_channel;
wire   [63:0] pcie_msi_sink_payload_dat;
wire    [9:0] pcie_msi_sink_payload_len;
wire   [15:0] pcie_msi_sink_payload_req_id;
wire    [7:0] pcie_msi_sink_payload_tag;
reg     [7:0] pcie_msi_sink_payload_user_id = 8'd0;
reg           pcie_msi_sink_payload_we = 1'd0;
wire          pcie_msi_sink_ready;
reg           pcie_msi_sink_valid = 1'd0;
reg           pcie_msi_source_first = 1'd0;
reg           pcie_msi_source_last = 1'd0;
reg    [31:0] pcie_msi_source_payload_adr = 32'd0;
reg     [7:0] pcie_msi_source_payload_channel = 8'd0;
reg    [15:0] pcie_msi_source_payload_cmp_id = 16'd0;
reg    [63:0] pcie_msi_source_payload_dat = 64'd0;
reg           pcie_msi_source_payload_end = 1'd0;
reg           pcie_msi_source_payload_err = 1'd0;
reg     [9:0] pcie_msi_source_payload_len = 10'd0;
reg    [15:0] pcie_msi_source_payload_req_id = 16'd0;
reg     [7:0] pcie_msi_source_payload_tag = 8'd0;
reg     [7:0] pcie_msi_source_payload_user_id = 8'd0;
reg           pcie_msi_source_ready = 1'd0;
reg           pcie_msi_source_valid = 1'd0;
reg     [5:0] pcie_msi_table_port_adr = 6'd0;
wire  [127:0] pcie_msi_table_port_dat_r;
reg           pcie_msi_table_port_re = 1'd0;
reg    [63:0] pcie_msi_vector = 64'd0;
wire  [105:0] pcie_ptm_sniffer_cdc_cdc_asyncfifo_din;
wire  [105:0] pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout;
wire          pcie_ptm_sniffer_cdc_cdc_asyncfifo_re;
wire          pcie_ptm_sniffer_cdc_cdc_asyncfifo_readable;
wire          pcie_ptm_sniffer_cdc_cdc_asyncfifo_we;
wire          pcie_ptm_sniffer_cdc_cdc_asyncfifo_writable;
wire    [2:0] pcie_ptm_sniffer_cdc_cdc_consume_wdomain;
wire          pcie_ptm_sniffer_cdc_cdc_fifo_in_first;
wire          pcie_ptm_sniffer_cdc_cdc_fifo_in_last;
wire   [31:0] pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_link_delay;
wire   [63:0] pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_message_code;
wire          pcie_ptm_sniffer_cdc_cdc_fifo_out_first;
wire          pcie_ptm_sniffer_cdc_cdc_fifo_out_last;
wire   [31:0] pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay;
wire   [63:0] pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code;
wire          pcie_ptm_sniffer_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next;
reg     [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          pcie_ptm_sniffer_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next;
reg     [2:0] pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] pcie_ptm_sniffer_cdc_cdc_produce_rdomain;
wire    [1:0] pcie_ptm_sniffer_cdc_cdc_rdport_adr;
wire  [105:0] pcie_ptm_sniffer_cdc_cdc_rdport_dat_r;
wire          pcie_ptm_sniffer_cdc_cdc_sink_first;
wire          pcie_ptm_sniffer_cdc_cdc_sink_last;
wire   [31:0] pcie_ptm_sniffer_cdc_cdc_sink_payload_link_delay;
wire   [63:0] pcie_ptm_sniffer_cdc_cdc_sink_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_cdc_cdc_sink_payload_message_code;
wire          pcie_ptm_sniffer_cdc_cdc_sink_ready;
wire          pcie_ptm_sniffer_cdc_cdc_sink_valid;
wire          pcie_ptm_sniffer_cdc_cdc_source_first;
wire          pcie_ptm_sniffer_cdc_cdc_source_last;
wire   [31:0] pcie_ptm_sniffer_cdc_cdc_source_payload_link_delay;
wire   [63:0] pcie_ptm_sniffer_cdc_cdc_source_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_cdc_cdc_source_payload_message_code;
wire          pcie_ptm_sniffer_cdc_cdc_source_ready;
wire          pcie_ptm_sniffer_cdc_cdc_source_valid;
wire    [1:0] pcie_ptm_sniffer_cdc_cdc_wrport_adr;
wire  [105:0] pcie_ptm_sniffer_cdc_cdc_wrport_dat_r;
wire  [105:0] pcie_ptm_sniffer_cdc_cdc_wrport_dat_w;
wire          pcie_ptm_sniffer_cdc_cdc_wrport_we;
reg           pcie_ptm_sniffer_cdc_sink_sink_first = 1'd0;
reg           pcie_ptm_sniffer_cdc_sink_sink_last = 1'd0;
wire   [31:0] pcie_ptm_sniffer_cdc_sink_sink_payload_link_delay;
reg    [63:0] pcie_ptm_sniffer_cdc_sink_sink_payload_master_time = 64'd0;
wire    [7:0] pcie_ptm_sniffer_cdc_sink_sink_payload_message_code;
wire          pcie_ptm_sniffer_cdc_sink_sink_ready;
wire          pcie_ptm_sniffer_cdc_sink_sink_valid;
wire          pcie_ptm_sniffer_cdc_source_source_first;
wire          pcie_ptm_sniffer_cdc_source_source_last;
wire   [31:0] pcie_ptm_sniffer_cdc_source_source_payload_link_delay;
wire   [63:0] pcie_ptm_sniffer_cdc_source_source_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_cdc_source_source_payload_message_code;
wire          pcie_ptm_sniffer_cdc_source_source_ready;
wire          pcie_ptm_sniffer_cdc_source_source_valid;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_first;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_last;
reg     [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_be = 8'd0;
reg    [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_dat = 64'd0;
wire    [1:0] pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_fmt;
wire    [4:0] pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_type;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready = 1'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_first = 1'd1;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_last;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing1 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel0 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel_ongoing = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_first = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_last = 1'd0;
reg     [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_be = 8'd0;
reg    [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_dat = 64'd0;
reg     [1:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_fmt = 2'd0;
reg     [4:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_type = 5'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_ready;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_valid = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_first = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_last = 1'd0;
reg     [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_be = 8'd0;
reg    [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_dat = 64'd0;
reg     [1:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_fmt = 2'd0;
reg     [4:0] pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_type = 5'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_ready;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_valid = 1'd0;
reg     [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_be = 8'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value2 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value_ce2 = 1'd0;
reg    [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_dat = 64'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value0 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value_ce0 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value1 = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value_ce1 = 1'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_first;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_last;
wire    [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_be;
wire   [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_dat;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_ready = 1'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_first = 1'd0;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_last = 1'd0;
reg     [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be = 8'd0;
reg    [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat = 64'd0;
reg   [127:0] pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header = 128'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_ready;
reg           pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid = 1'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_first;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_last;
wire   [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_dat;
wire    [9:0] pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_length;
wire   [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_message_code;
wire   [15:0] pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_requester_id;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_ready;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_valid;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_first;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_last;
wire    [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_payload_be;
wire   [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_payload_dat;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_ready;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_valid;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_first;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_last;
wire    [1:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_attr;
wire    [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_be;
wire   [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_dat;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_ep;
reg     [1:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_fmt = 2'd0;
wire    [9:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_length;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_ln;
wire   [63:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_message_code;
wire   [15:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_requester_id;
wire    [2:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_tc;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_td;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_th;
reg     [4:0] pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_type = 5'd0;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_ready;
wire          pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_valid;
wire   [37:0] pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_din;
wire   [37:0] pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_dout;
wire          pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_re;
wire          pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_readable;
wire          pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_we;
wire          pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_writable;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_consume_wdomain;
reg    [37:0] pcie_ptm_sniffer_rawdatapath_cdc_dout = 38'd0;
wire          pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_first;
wire          pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_first;
wire          pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q = 4'd0;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_binary = 4'd0;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary = 4'd0;
wire          pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q = 4'd0;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_binary = 4'd0;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary = 4'd0;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_produce_rdomain;
wire    [2:0] pcie_ptm_sniffer_rawdatapath_cdc_rdport_adr;
wire   [37:0] pcie_ptm_sniffer_rawdatapath_cdc_rdport_dat_r;
wire          pcie_ptm_sniffer_rawdatapath_cdc_re;
reg           pcie_ptm_sniffer_rawdatapath_cdc_readable = 1'd0;
wire          pcie_ptm_sniffer_rawdatapath_cdc_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_cdc_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_cdc_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_cdc_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_cdc_sink_valid;
wire          pcie_ptm_sniffer_rawdatapath_cdc_source_first;
wire          pcie_ptm_sniffer_rawdatapath_cdc_source_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_cdc_source_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_cdc_source_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_cdc_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_cdc_source_valid;
wire    [2:0] pcie_ptm_sniffer_rawdatapath_cdc_wrport_adr;
wire   [37:0] pcie_ptm_sniffer_rawdatapath_cdc_wrport_dat_r;
wire   [37:0] pcie_ptm_sniffer_rawdatapath_cdc_wrport_dat_w;
wire          pcie_ptm_sniffer_rawdatapath_cdc_wrport_we;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_last;
wire    [1:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_payload_ctrl;
wire   [15:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_valid;
reg           pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_first = 1'd0;
reg           pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_last = 1'd0;
reg     [1:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_ctrl = 2'd0;
reg    [15:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_data = 16'd0;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_ready;
reg           pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_valid = 1'd0;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_last;
wire    [1:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_payload_ctrl;
wire   [15:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_valid;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_last;
wire    [1:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_payload_ctrl;
wire   [15:0] pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_valid;
reg           pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux = 1'd0;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_load_part;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_last;
wire   [17:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_valid;
reg           pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_first = 1'd0;
reg           pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_last = 1'd0;
reg    [35:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_data = 36'd0;
reg     [1:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_valid_token_count = 2'd0;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_valid;
reg           pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_strobe_all = 1'd0;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_last;
wire    [1:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_payload_ctrl;
wire   [15:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_valid;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_last;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_ctrl = 4'd0;
reg    [31:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_first;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_last;
wire   [35:0] pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_valid;
wire          pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_valid;
reg           pcie_ptm_sniffer_rawdatapath_sink_sink_first = 1'd0;
reg           pcie_ptm_sniffer_rawdatapath_sink_sink_last = 1'd0;
wire    [1:0] pcie_ptm_sniffer_rawdatapath_sink_sink_payload_ctrl;
wire   [15:0] pcie_ptm_sniffer_rawdatapath_sink_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_sink_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_sink_sink_valid;
wire          pcie_ptm_sniffer_rawdatapath_source_source_first;
wire          pcie_ptm_sniffer_rawdatapath_source_source_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_source_source_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_source_source_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_source_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_source_source_valid;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_valid;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_first = 1'd0;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_last = 1'd0;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_ctrl = 4'd0;
reg    [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_ready;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_valid = 1'd0;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_valid;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_valid;
reg     [1:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment = 2'd0;
reg     [1:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment_d = 2'd0;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_enable = 1'd1;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_valid;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_first = 1'd0;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_last = 1'd0;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_ctrl = 4'd0;
reg    [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_ready;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_valid = 1'd0;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_valid;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_first = 1'd0;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_last = 1'd0;
reg     [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl = 4'd0;
reg    [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_first;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_last;
wire    [3:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_data;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_ready;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_valid;
wire          pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_valid;
reg           pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update = 1'd0;
reg           pcie_ptm_sniffer_rawdescrambler_enable = 1'd1;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_ce;
reg    [15:0] pcie_ptm_sniffer_rawdescrambler_scrambler_cur = 16'd65535;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_enable;
reg    [15:0] pcie_ptm_sniffer_rawdescrambler_scrambler_new = 16'd0;
reg           pcie_ptm_sniffer_rawdescrambler_scrambler_reset = 1'd0;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_sink_first;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_sink_ready;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_sink_valid;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_source_first;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_source_last;
wire    [3:0] pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_ctrl;
reg    [31:0] pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_source_ready;
wire          pcie_ptm_sniffer_rawdescrambler_scrambler_source_valid;
reg    [31:0] pcie_ptm_sniffer_rawdescrambler_scrambler_value = 32'd0;
wire          pcie_ptm_sniffer_rawdescrambler_sink_sink_first;
wire          pcie_ptm_sniffer_rawdescrambler_sink_sink_last;
wire    [3:0] pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data;
wire          pcie_ptm_sniffer_rawdescrambler_sink_sink_ready;
wire          pcie_ptm_sniffer_rawdescrambler_sink_sink_valid;
wire          pcie_ptm_sniffer_rawdescrambler_source_source_first;
wire          pcie_ptm_sniffer_rawdescrambler_source_source_last;
wire    [3:0] pcie_ptm_sniffer_rawdescrambler_source_source_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_rawdescrambler_source_source_payload_data;
wire          pcie_ptm_sniffer_rawdescrambler_source_source_ready;
wire          pcie_ptm_sniffer_rawdescrambler_source_source_valid;
wire          pcie_ptm_sniffer_source_source_first;
wire          pcie_ptm_sniffer_source_source_last;
wire   [31:0] pcie_ptm_sniffer_source_source_payload_link_delay;
wire   [63:0] pcie_ptm_sniffer_source_source_payload_master_time;
wire    [7:0] pcie_ptm_sniffer_source_source_payload_message_code;
wire          pcie_ptm_sniffer_source_source_ready;
wire          pcie_ptm_sniffer_source_source_valid;
reg     [1:0] pcie_ptm_sniffer_tlpaligner_alignment = 2'd0;
reg     [1:0] pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0 = 2'd0;
reg           pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0 = 1'd0;
reg           pcie_ptm_sniffer_tlpaligner_first = 1'd0;
reg           pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value1 = 1'd0;
reg           pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value_ce1 = 1'd0;
reg     [3:0] pcie_ptm_sniffer_tlpaligner_sink_ctrl_d = 4'd0;
reg     [3:0] pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd = 4'd0;
reg    [31:0] pcie_ptm_sniffer_tlpaligner_sink_data_d = 32'd0;
reg    [31:0] pcie_ptm_sniffer_tlpaligner_sink_data_dd = 32'd0;
wire          pcie_ptm_sniffer_tlpaligner_sink_first;
wire          pcie_ptm_sniffer_tlpaligner_sink_last;
wire    [3:0] pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_tlpaligner_sink_payload_data;
wire          pcie_ptm_sniffer_tlpaligner_sink_ready;
wire          pcie_ptm_sniffer_tlpaligner_sink_valid;
reg           pcie_ptm_sniffer_tlpaligner_source_first = 1'd0;
reg           pcie_ptm_sniffer_tlpaligner_source_last = 1'd0;
reg     [3:0] pcie_ptm_sniffer_tlpaligner_source_payload_ctrl = 4'd0;
reg    [31:0] pcie_ptm_sniffer_tlpaligner_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_tlpaligner_source_ready;
reg           pcie_ptm_sniffer_tlpaligner_source_valid = 1'd0;
wire          pcie_ptm_sniffer_tlpendiannessswap_sink_first;
wire          pcie_ptm_sniffer_tlpendiannessswap_sink_last;
wire    [3:0] pcie_ptm_sniffer_tlpendiannessswap_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_tlpendiannessswap_sink_payload_data;
wire          pcie_ptm_sniffer_tlpendiannessswap_sink_ready;
wire          pcie_ptm_sniffer_tlpendiannessswap_sink_valid;
wire          pcie_ptm_sniffer_tlpendiannessswap_source_first;
wire          pcie_ptm_sniffer_tlpendiannessswap_source_last;
reg     [3:0] pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl = 4'd0;
reg    [31:0] pcie_ptm_sniffer_tlpendiannessswap_source_payload_data = 32'd0;
wire          pcie_ptm_sniffer_tlpendiannessswap_source_ready;
wire          pcie_ptm_sniffer_tlpendiannessswap_source_valid;
reg           pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux = 1'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_load_part;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_first;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_last;
wire   [35:0] pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_payload_data;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_valid;
reg           pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_first = 1'd0;
reg           pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_last = 1'd0;
reg    [71:0] pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_data = 72'd0;
reg     [1:0] pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_valid_token_count = 2'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_valid;
reg           pcie_ptm_sniffer_tlpfilterformater_conv_converter_strobe_all = 1'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_sink_first;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_sink_last;
wire    [3:0] pcie_ptm_sniffer_tlpfilterformater_conv_sink_payload_be;
wire   [31:0] pcie_ptm_sniffer_tlpfilterformater_conv_sink_payload_dat;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_sink_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_sink_valid;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_first;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_last;
reg     [7:0] pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_be = 8'd0;
reg    [63:0] pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_dat = 64'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_source_first;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_source_last;
wire   [71:0] pcie_ptm_sniffer_tlpfilterformater_conv_source_source_payload_data;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_source_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_source_valid;
wire          pcie_ptm_sniffer_tlpfilterformater_conv_source_valid;
reg    [31:0] pcie_ptm_sniffer_tlpfilterformater_count = 32'd0;
reg    [31:0] pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value = 32'd0;
reg           pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value_ce = 1'd0;
reg     [1:0] pcie_ptm_sniffer_tlpfilterformater_fifo_consume = 2'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_do_read;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_first;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_last;
wire    [3:0] pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_payload_be;
wire   [31:0] pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_payload_dat;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_first;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_last;
wire    [3:0] pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_be;
wire   [31:0] pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_dat;
reg     [2:0] pcie_ptm_sniffer_tlpfilterformater_fifo_level0 = 3'd0;
wire    [2:0] pcie_ptm_sniffer_tlpfilterformater_fifo_level1;
reg     [1:0] pcie_ptm_sniffer_tlpfilterformater_fifo_produce = 2'd0;
wire    [1:0] pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_adr;
wire   [37:0] pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_dat_r;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_re;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_re;
reg           pcie_ptm_sniffer_tlpfilterformater_fifo_readable = 1'd0;
reg           pcie_ptm_sniffer_tlpfilterformater_fifo_replace = 1'd0;
reg           pcie_ptm_sniffer_tlpfilterformater_fifo_sink_first = 1'd0;
reg           pcie_ptm_sniffer_tlpfilterformater_fifo_sink_last = 1'd0;
wire    [3:0] pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_be;
reg    [31:0] pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_dat = 32'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_sink_ready;
reg           pcie_ptm_sniffer_tlpfilterformater_fifo_sink_valid = 1'd0;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_source_first;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_source_last;
wire    [3:0] pcie_ptm_sniffer_tlpfilterformater_fifo_source_payload_be;
wire   [31:0] pcie_ptm_sniffer_tlpfilterformater_fifo_source_payload_dat;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_source_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_source_valid;
wire   [37:0] pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_din;
wire   [37:0] pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_dout;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_re;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_readable;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_we;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_writable;
reg     [1:0] pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_adr = 2'd0;
wire   [37:0] pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_dat_r;
wire   [37:0] pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_dat_w;
wire          pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_we;
wire          pcie_ptm_sniffer_tlpfilterformater_sink_sink_first;
wire          pcie_ptm_sniffer_tlpfilterformater_sink_sink_last;
wire    [3:0] pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_ctrl;
wire   [31:0] pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data;
wire          pcie_ptm_sniffer_tlpfilterformater_sink_sink_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid;
wire          pcie_ptm_sniffer_tlpfilterformater_source_source_first;
wire          pcie_ptm_sniffer_tlpfilterformater_source_source_last;
wire    [7:0] pcie_ptm_sniffer_tlpfilterformater_source_source_payload_be;
wire   [63:0] pcie_ptm_sniffer_tlpfilterformater_source_source_payload_dat;
wire          pcie_ptm_sniffer_tlpfilterformater_source_source_ready;
wire          pcie_ptm_sniffer_tlpfilterformater_source_source_valid;
wire          pcie_rst;
wire          pcie_wishbone_master_bus_ack;
reg    [29:0] pcie_wishbone_master_bus_adr = 30'd0;
reg     [1:0] pcie_wishbone_master_bus_bte = 2'd0;
reg     [2:0] pcie_wishbone_master_bus_cti = 3'd0;
reg           pcie_wishbone_master_bus_cyc = 1'd0;
wire   [31:0] pcie_wishbone_master_bus_dat_r;
reg    [31:0] pcie_wishbone_master_bus_dat_w = 32'd0;
wire          pcie_wishbone_master_bus_err;
reg     [3:0] pcie_wishbone_master_bus_sel = 4'd0;
reg           pcie_wishbone_master_bus_stb = 1'd0;
reg           pcie_wishbone_master_bus_we = 1'd0;
reg           pcie_wishbone_master_sink_first = 1'd0;
reg           pcie_wishbone_master_sink_last = 1'd0;
reg    [31:0] pcie_wishbone_master_sink_payload_adr = 32'd0;
reg     [7:0] pcie_wishbone_master_sink_payload_channel = 8'd0;
reg    [15:0] pcie_wishbone_master_sink_payload_cmp_id = 16'd0;
reg    [63:0] pcie_wishbone_master_sink_payload_dat = 64'd0;
reg           pcie_wishbone_master_sink_payload_end = 1'd0;
reg           pcie_wishbone_master_sink_payload_err = 1'd0;
reg     [9:0] pcie_wishbone_master_sink_payload_len = 10'd0;
reg    [15:0] pcie_wishbone_master_sink_payload_req_id = 16'd0;
reg     [7:0] pcie_wishbone_master_sink_payload_tag = 8'd0;
reg     [7:0] pcie_wishbone_master_sink_payload_user_id = 8'd0;
reg           pcie_wishbone_master_sink_ready = 1'd0;
reg           pcie_wishbone_master_sink_valid = 1'd0;
reg           pcie_wishbone_master_source_first = 1'd0;
reg           pcie_wishbone_master_source_last = 1'd0;
reg    [31:0] pcie_wishbone_master_source_payload_adr = 32'd0;
reg     [7:0] pcie_wishbone_master_source_payload_channel = 8'd0;
reg    [63:0] pcie_wishbone_master_source_payload_dat = 64'd0;
reg     [9:0] pcie_wishbone_master_source_payload_len = 10'd0;
reg    [15:0] pcie_wishbone_master_source_payload_req_id = 16'd0;
reg     [7:0] pcie_wishbone_master_source_payload_tag = 8'd0;
reg     [7:0] pcie_wishbone_master_source_payload_user_id = 8'd0;
reg           pcie_wishbone_master_source_payload_we = 1'd0;
reg           pcie_wishbone_master_source_ready = 1'd0;
reg           pcie_wishbone_master_source_valid = 1'd0;
reg           pcie_wishbone_master_update_dat = 1'd0;
wire          pclk_clk;
reg           pclk_rst = 1'd0;
reg    [31:0] ptm_capabilities_dat = 32'd0;
reg    [31:0] ptm_capabilities_dat_ptmcapabilities_next_value = 32'd0;
reg           ptm_capabilities_dat_ptmcapabilities_next_value_ce = 1'd0;
wire    [1:0] ptm_capabilities_mem_ctrl_port_adr;
wire   [31:0] ptm_capabilities_mem_ctrl_port_dat_r;
reg     [1:0] ptm_capabilities_mem_rd_port_adr = 2'd0;
wire   [31:0] ptm_capabilities_mem_rd_port_dat_r;
reg     [1:0] ptm_capabilities_mem_wr_port_adr = 2'd0;
wire   [31:0] ptm_capabilities_mem_wr_port_dat_r;
reg    [31:0] ptm_capabilities_mem_wr_port_dat_w = 32'd0;
reg           ptm_capabilities_mem_wr_port_we = 1'd0;
wire    [7:0] ptm_capabilities_ptm_effective_granularity;
wire          ptm_capabilities_ptm_enable;
wire          ptm_capabilities_ptm_root_select;
wire    [9:0] ptm_capabilities_reg;
reg           ptm_capabilities_sink_first = 1'd0;
reg           ptm_capabilities_sink_last = 1'd0;
reg    [31:0] ptm_capabilities_sink_payload_adr = 32'd0;
reg     [7:0] ptm_capabilities_sink_payload_channel = 8'd0;
reg    [15:0] ptm_capabilities_sink_payload_cmp_id = 16'd0;
reg    [63:0] ptm_capabilities_sink_payload_dat = 64'd0;
reg           ptm_capabilities_sink_payload_end = 1'd0;
reg           ptm_capabilities_sink_payload_err = 1'd0;
reg     [9:0] ptm_capabilities_sink_payload_len = 10'd0;
reg    [15:0] ptm_capabilities_sink_payload_req_id = 16'd0;
reg     [7:0] ptm_capabilities_sink_payload_tag = 8'd0;
reg     [7:0] ptm_capabilities_sink_payload_user_id = 8'd0;
reg           ptm_capabilities_sink_ready = 1'd0;
reg           ptm_capabilities_sink_valid = 1'd0;
reg           ptm_capabilities_source_first = 1'd0;
reg           ptm_capabilities_source_last = 1'd0;
reg    [31:0] ptm_capabilities_source_payload_adr = 32'd0;
reg     [7:0] ptm_capabilities_source_payload_channel = 8'd0;
reg    [63:0] ptm_capabilities_source_payload_dat = 64'd0;
reg     [9:0] ptm_capabilities_source_payload_len = 10'd0;
reg    [15:0] ptm_capabilities_source_payload_req_id = 16'd0;
reg     [7:0] ptm_capabilities_source_payload_tag = 8'd0;
reg     [7:0] ptm_capabilities_source_payload_user_id = 8'd0;
reg           ptm_capabilities_source_payload_we = 1'd0;
reg           ptm_capabilities_source_ready = 1'd0;
reg           ptm_capabilities_source_valid = 1'd0;
reg           ptm_requester_busy0 = 1'd0;
wire          ptm_requester_busy1;
wire   [65:0] ptm_requester_cdc_asyncfifo_din;
wire   [65:0] ptm_requester_cdc_asyncfifo_dout;
wire          ptm_requester_cdc_asyncfifo_re;
wire          ptm_requester_cdc_asyncfifo_readable;
wire          ptm_requester_cdc_asyncfifo_we;
wire          ptm_requester_cdc_asyncfifo_writable;
wire    [2:0] ptm_requester_cdc_consume_wdomain;
wire          ptm_requester_cdc_fifo_in_first;
wire          ptm_requester_cdc_fifo_in_last;
wire   [63:0] ptm_requester_cdc_fifo_in_payload_time;
wire          ptm_requester_cdc_fifo_out_first;
wire          ptm_requester_cdc_fifo_out_last;
wire   [63:0] ptm_requester_cdc_fifo_out_payload_time;
wire          ptm_requester_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [2:0] ptm_requester_cdc_graycounter0_q = 3'd0;
reg     [2:0] ptm_requester_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] ptm_requester_cdc_graycounter0_q_next;
reg     [2:0] ptm_requester_cdc_graycounter0_q_next_binary = 3'd0;
wire          ptm_requester_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [2:0] ptm_requester_cdc_graycounter1_q = 3'd0;
reg     [2:0] ptm_requester_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] ptm_requester_cdc_graycounter1_q_next;
reg     [2:0] ptm_requester_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] ptm_requester_cdc_produce_rdomain;
wire    [1:0] ptm_requester_cdc_rdport_adr;
wire   [65:0] ptm_requester_cdc_rdport_dat_r;
wire          ptm_requester_cdc_sink_first;
wire          ptm_requester_cdc_sink_last;
wire   [63:0] ptm_requester_cdc_sink_payload_time;
wire          ptm_requester_cdc_sink_ready;
wire          ptm_requester_cdc_sink_valid;
wire          ptm_requester_cdc_source_first;
wire          ptm_requester_cdc_source_last;
wire   [63:0] ptm_requester_cdc_source_payload_time;
wire          ptm_requester_cdc_source_ready;
wire          ptm_requester_cdc_source_valid;
wire    [1:0] ptm_requester_cdc_wrport_adr;
wire   [65:0] ptm_requester_cdc_wrport_dat_r;
wire   [65:0] ptm_requester_cdc_wrport_dat_w;
wire          ptm_requester_cdc_wrport_we;
reg           ptm_requester_control_re = 1'd0;
reg     [1:0] ptm_requester_control_storage = 2'd0;
reg     [6:0] ptm_requester_count = 7'd125;
wire          ptm_requester_done;
wire          ptm_requester_enable0;
wire          ptm_requester_enable1;
reg           ptm_requester_invalidate = 1'd0;
reg    [31:0] ptm_requester_link_delay = 32'd0;
reg    [31:0] ptm_requester_link_delay_ptmrequester_next_value3 = 32'd0;
reg           ptm_requester_link_delay_ptmrequester_next_value_ce3 = 1'd0;
reg           ptm_requester_link_delay_re = 1'd0;
wire   [31:0] ptm_requester_link_delay_status;
wire          ptm_requester_link_delay_we;
reg    [63:0] ptm_requester_master_time = 64'd0;
reg    [63:0] ptm_requester_master_time_ptmrequester_next_value2 = 64'd0;
reg           ptm_requester_master_time_ptmrequester_next_value_ce2 = 1'd0;
reg           ptm_requester_master_time_re = 1'd0;
wire   [63:0] ptm_requester_master_time_status;
wire          ptm_requester_master_time_we;
reg           ptm_requester_phy_rx_delay_re = 1'd0;
reg    [31:0] ptm_requester_phy_rx_delay_status = 32'd100;
wire          ptm_requester_phy_rx_delay_we;
reg           ptm_requester_phy_tx_delay_re = 1'd0;
reg    [31:0] ptm_requester_phy_tx_delay_status = 32'd40;
wire          ptm_requester_phy_tx_delay_we;
wire          ptm_requester_reset;
reg           ptm_requester_sink_sink_first = 1'd0;
reg           ptm_requester_sink_sink_last = 1'd0;
wire   [63:0] ptm_requester_sink_sink_payload_time;
wire          ptm_requester_sink_sink_ready;
wire          ptm_requester_sink_sink_valid;
wire          ptm_requester_source_source_first;
wire          ptm_requester_source_source_last;
wire   [63:0] ptm_requester_source_source_payload_time;
wire          ptm_requester_source_source_ready;
wire          ptm_requester_source_source_valid;
reg           ptm_requester_status_re = 1'd0;
reg     [1:0] ptm_requester_status_status = 2'd0;
wire          ptm_requester_status_we;
reg    [63:0] ptm_requester_t1 = 64'd0;
reg    [63:0] ptm_requester_t1_ptmrequester_next_value0 = 64'd0;
reg           ptm_requester_t1_ptmrequester_next_value_ce0 = 1'd0;
reg           ptm_requester_t1_time_re = 1'd0;
wire   [63:0] ptm_requester_t1_time_status;
wire          ptm_requester_t1_time_we;
reg    [63:0] ptm_requester_t4 = 64'd0;
reg    [63:0] ptm_requester_t4_ptmrequester_next_value4 = 64'd0;
reg           ptm_requester_t4_ptmrequester_next_value_ce4 = 1'd0;
reg           ptm_requester_t4_time_re = 1'd0;
wire   [63:0] ptm_requester_t4_time_status;
wire          ptm_requester_t4_time_we;
wire   [63:0] ptm_requester_time0;
reg    [63:0] ptm_requester_time1 = 64'd0;
wire          ptm_requester_time_clk;
wire          ptm_requester_time_rst;
wire          ptm_requester_trigger0;
reg           ptm_requester_trigger1 = 1'd0;
reg           ptm_requester_update = 1'd0;
reg           ptm_requester_update_ptmrequester_next_value1 = 1'd0;
reg           ptm_requester_update_ptmrequester_next_value_ce1 = 1'd0;
reg           ptm_requester_valid0 = 1'd0;
wire          ptm_requester_valid1;
reg           ptm_requester_wait = 1'd0;
reg     [1:0] ptmcapabilities_next_state = 2'd0;
reg     [1:0] ptmcapabilities_state = 2'd0;
reg     [2:0] ptmrequester_next_state = 3'd0;
reg     [2:0] ptmrequester_state = 3'd0;
wire   [31:0] r_payload_data;
wire    [1:0] r_payload_resp;
reg           r_ready = 1'd0;
wire          r_valid;
wire          re;
wire          request;
wire          reset0;
wire          reset1;
wire          reset2;
wire          reset3;
wire          reset4;
wire          reset5;
wire          reset6;
wire          reset7;
reg           reset_re = 1'd0;
reg     [1:0] reset_storage = 2'd0;
reg     [1:0] rx_ctl = 2'd0;
reg    [15:0] rx_data = 16'd0;
wire          s7pciephy0;
wire          s7pciephy1;
wire          s7pciephy10;
wire          s7pciephy11;
wire          s7pciephy12;
wire          s7pciephy13;
wire          s7pciephy14;
wire          s7pciephy15;
wire          s7pciephy16;
wire          s7pciephy17;
wire          s7pciephy18;
wire          s7pciephy19;
wire          s7pciephy2;
wire          s7pciephy20;
wire          s7pciephy21;
wire          s7pciephy22;
wire          s7pciephy23;
wire          s7pciephy24;
wire          s7pciephy25;
wire          s7pciephy26;
wire          s7pciephy27;
wire          s7pciephy28;
wire          s7pciephy29;
wire          s7pciephy3;
wire          s7pciephy30;
wire          s7pciephy31;
wire          s7pciephy32;
wire          s7pciephy33;
wire          s7pciephy34;
wire          s7pciephy35;
wire          s7pciephy36;
wire          s7pciephy37;
wire          s7pciephy38;
wire          s7pciephy39;
wire          s7pciephy4;
wire          s7pciephy40;
wire          s7pciephy41;
wire          s7pciephy42;
wire          s7pciephy43;
wire          s7pciephy44;
wire          s7pciephy45;
wire          s7pciephy46;
wire          s7pciephy47;
wire          s7pciephy48;
wire          s7pciephy49;
wire          s7pciephy5;
wire          s7pciephy50;
wire          s7pciephy51;
wire          s7pciephy52;
wire          s7pciephy53;
wire          s7pciephy54;
wire          s7pciephy55;
wire          s7pciephy56;
wire          s7pciephy57;
wire          s7pciephy58;
wire          s7pciephy59;
wire          s7pciephy6;
wire          s7pciephy60;
wire          s7pciephy61;
wire          s7pciephy62;
wire          s7pciephy63;
wire          s7pciephy64;
wire          s7pciephy65;
wire          s7pciephy66;
wire          s7pciephy67;
wire          s7pciephy68;
wire          s7pciephy69;
wire          s7pciephy7;
wire          s7pciephy70;
wire          s7pciephy71;
wire          s7pciephy72;
wire          s7pciephy73;
wire          s7pciephy8;
wire          s7pciephy9;
reg           s7pciephy_bus_master_enable_re = 1'd0;
wire          s7pciephy_bus_master_enable_status;
wire          s7pciephy_bus_master_enable_we;
wire    [7:0] s7pciephy_bus_number;
wire          s7pciephy_clkin;
wire          s7pciephy_clkout0;
wire          s7pciephy_clkout1;
wire          s7pciephy_clkout2;
wire          s7pciephy_clkout3;
wire          s7pciephy_clkout_buf0;
wire          s7pciephy_clkout_buf1;
wire          s7pciephy_clkout_buf2;
wire          s7pciephy_clkout_buf3;
wire   [15:0] s7pciephy_command;
wire    [5:0] s7pciephy_csrfield_ltssm;
wire          s7pciephy_csrfield_rate;
wire          s7pciephy_csrfield_status;
wire    [1:0] s7pciephy_csrfield_width;
wire   [15:0] s7pciephy_dcommand;
wire    [4:0] s7pciephy_device_number;
wire    [2:0] s7pciephy_function_number;
wire   [15:0] s7pciephy_id;
reg           s7pciephy_link_status_re = 1'd0;
reg     [9:0] s7pciephy_link_status_status = 10'd0;
wire          s7pciephy_link_status_we;
wire          s7pciephy_locked;
wire          s7pciephy_m_axis_rx_tlast;
wire   [31:0] s7pciephy_m_axis_rx_tuser;
reg    [15:0] s7pciephy_max_payload_size = 16'd0;
reg           s7pciephy_max_payload_size_re = 1'd0;
wire   [15:0] s7pciephy_max_payload_size_status;
wire          s7pciephy_max_payload_size_we;
reg    [15:0] s7pciephy_max_request_size = 16'd0;
reg           s7pciephy_max_request_size_re = 1'd0;
wire   [15:0] s7pciephy_max_request_size_status;
wire          s7pciephy_max_request_size_we;
wire          s7pciephy_msi_cdc_cd_rst;
wire    [9:0] s7pciephy_msi_cdc_cdc_asyncfifo_din;
wire    [9:0] s7pciephy_msi_cdc_cdc_asyncfifo_dout;
wire          s7pciephy_msi_cdc_cdc_asyncfifo_re;
wire          s7pciephy_msi_cdc_cdc_asyncfifo_readable;
wire          s7pciephy_msi_cdc_cdc_asyncfifo_we;
wire          s7pciephy_msi_cdc_cdc_asyncfifo_writable;
wire    [2:0] s7pciephy_msi_cdc_cdc_consume_wdomain;
wire          s7pciephy_msi_cdc_cdc_fifo_in_first;
wire          s7pciephy_msi_cdc_cdc_fifo_in_last;
wire    [7:0] s7pciephy_msi_cdc_cdc_fifo_in_payload_dat;
wire          s7pciephy_msi_cdc_cdc_fifo_out_first;
wire          s7pciephy_msi_cdc_cdc_fifo_out_last;
wire    [7:0] s7pciephy_msi_cdc_cdc_fifo_out_payload_dat;
wire          s7pciephy_msi_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [2:0] s7pciephy_msi_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] s7pciephy_msi_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] s7pciephy_msi_cdc_cdc_graycounter0_q_next;
reg     [2:0] s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          s7pciephy_msi_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [2:0] s7pciephy_msi_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] s7pciephy_msi_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] s7pciephy_msi_cdc_cdc_graycounter1_q_next;
reg     [2:0] s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] s7pciephy_msi_cdc_cdc_produce_rdomain;
wire    [1:0] s7pciephy_msi_cdc_cdc_rdport_adr;
wire    [9:0] s7pciephy_msi_cdc_cdc_rdport_dat_r;
wire          s7pciephy_msi_cdc_cdc_sink_first;
wire          s7pciephy_msi_cdc_cdc_sink_last;
wire    [7:0] s7pciephy_msi_cdc_cdc_sink_payload_dat;
wire          s7pciephy_msi_cdc_cdc_sink_ready;
wire          s7pciephy_msi_cdc_cdc_sink_valid;
wire          s7pciephy_msi_cdc_cdc_source_first;
wire          s7pciephy_msi_cdc_cdc_source_last;
wire    [7:0] s7pciephy_msi_cdc_cdc_source_payload_dat;
wire          s7pciephy_msi_cdc_cdc_source_ready;
wire          s7pciephy_msi_cdc_cdc_source_valid;
wire    [1:0] s7pciephy_msi_cdc_cdc_wrport_adr;
wire    [9:0] s7pciephy_msi_cdc_cdc_wrport_dat_r;
wire    [9:0] s7pciephy_msi_cdc_cdc_wrport_dat_w;
wire          s7pciephy_msi_cdc_cdc_wrport_we;
wire          s7pciephy_msi_cdc_sink_sink_first;
wire          s7pciephy_msi_cdc_sink_sink_last;
wire    [7:0] s7pciephy_msi_cdc_sink_sink_payload_dat;
wire          s7pciephy_msi_cdc_sink_sink_ready;
wire          s7pciephy_msi_cdc_sink_sink_valid;
wire          s7pciephy_msi_cdc_source_source_first;
wire          s7pciephy_msi_cdc_source_source_last;
wire    [7:0] s7pciephy_msi_cdc_source_source_payload_dat;
wire          s7pciephy_msi_cdc_source_source_ready;
wire          s7pciephy_msi_cdc_source_source_valid;
reg           s7pciephy_msi_enable_re = 1'd0;
wire          s7pciephy_msi_enable_status;
wire          s7pciephy_msi_enable_we;
reg           s7pciephy_msi_first = 1'd0;
reg           s7pciephy_msi_last = 1'd0;
reg     [7:0] s7pciephy_msi_payload_dat = 8'd0;
wire          s7pciephy_msi_ready;
reg           s7pciephy_msi_valid = 1'd0;
reg           s7pciephy_msix_enable_re = 1'd0;
wire          s7pciephy_msix_enable_status;
wire          s7pciephy_msix_enable_we;
wire          s7pciephy_pcie_refclk;
wire          s7pciephy_pcie_rst_n;
reg           s7pciephy_pclk_sel = 1'd0;
wire          s7pciephy_pipe_pclk_sel;
wire          s7pciephy_pipe_pclk_sel_r;
wire          s7pciephy_pipe_txoutclk;
wire          s7pciephy_pipe_txoutclk_bufg;
reg           s7pciephy_power_down = 1'd0;
reg           s7pciephy_reset = 1'd0;
wire          s7pciephy_rx_datapath_cdc_cd_rst;
wire   [73:0] s7pciephy_rx_datapath_cdc_cdc_asyncfifo_din;
wire   [73:0] s7pciephy_rx_datapath_cdc_cdc_asyncfifo_dout;
wire          s7pciephy_rx_datapath_cdc_cdc_asyncfifo_re;
wire          s7pciephy_rx_datapath_cdc_cdc_asyncfifo_readable;
wire          s7pciephy_rx_datapath_cdc_cdc_asyncfifo_we;
wire          s7pciephy_rx_datapath_cdc_cdc_asyncfifo_writable;
wire    [4:0] s7pciephy_rx_datapath_cdc_cdc_consume_wdomain;
wire          s7pciephy_rx_datapath_cdc_cdc_fifo_in_first;
wire          s7pciephy_rx_datapath_cdc_cdc_fifo_in_last;
wire    [7:0] s7pciephy_rx_datapath_cdc_cdc_fifo_in_payload_be;
wire   [63:0] s7pciephy_rx_datapath_cdc_cdc_fifo_in_payload_dat;
wire          s7pciephy_rx_datapath_cdc_cdc_fifo_out_first;
wire          s7pciephy_rx_datapath_cdc_cdc_fifo_out_last;
wire    [7:0] s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_be;
wire   [63:0] s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_dat;
wire          s7pciephy_rx_datapath_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter0_q = 5'd0;
reg     [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_binary = 5'd0;
wire    [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next;
reg     [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary = 5'd0;
wire          s7pciephy_rx_datapath_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter1_q = 5'd0;
reg     [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_binary = 5'd0;
wire    [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next;
reg     [4:0] s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary = 5'd0;
wire    [4:0] s7pciephy_rx_datapath_cdc_cdc_produce_rdomain;
wire    [3:0] s7pciephy_rx_datapath_cdc_cdc_rdport_adr;
wire   [73:0] s7pciephy_rx_datapath_cdc_cdc_rdport_dat_r;
wire          s7pciephy_rx_datapath_cdc_cdc_sink_first;
wire          s7pciephy_rx_datapath_cdc_cdc_sink_last;
wire    [7:0] s7pciephy_rx_datapath_cdc_cdc_sink_payload_be;
wire   [63:0] s7pciephy_rx_datapath_cdc_cdc_sink_payload_dat;
wire          s7pciephy_rx_datapath_cdc_cdc_sink_ready;
wire          s7pciephy_rx_datapath_cdc_cdc_sink_valid;
wire          s7pciephy_rx_datapath_cdc_cdc_source_first;
wire          s7pciephy_rx_datapath_cdc_cdc_source_last;
wire    [7:0] s7pciephy_rx_datapath_cdc_cdc_source_payload_be;
wire   [63:0] s7pciephy_rx_datapath_cdc_cdc_source_payload_dat;
wire          s7pciephy_rx_datapath_cdc_cdc_source_ready;
wire          s7pciephy_rx_datapath_cdc_cdc_source_valid;
wire    [3:0] s7pciephy_rx_datapath_cdc_cdc_wrport_adr;
wire   [73:0] s7pciephy_rx_datapath_cdc_cdc_wrport_dat_r;
wire   [73:0] s7pciephy_rx_datapath_cdc_cdc_wrport_dat_w;
wire          s7pciephy_rx_datapath_cdc_cdc_wrport_we;
wire          s7pciephy_rx_datapath_cdc_sink_sink_first;
wire          s7pciephy_rx_datapath_cdc_sink_sink_last;
wire    [7:0] s7pciephy_rx_datapath_cdc_sink_sink_payload_be;
wire   [63:0] s7pciephy_rx_datapath_cdc_sink_sink_payload_dat;
wire          s7pciephy_rx_datapath_cdc_sink_sink_ready;
wire          s7pciephy_rx_datapath_cdc_sink_sink_valid;
wire          s7pciephy_rx_datapath_cdc_source_source_first;
wire          s7pciephy_rx_datapath_cdc_source_source_last;
wire    [7:0] s7pciephy_rx_datapath_cdc_source_source_payload_be;
wire   [63:0] s7pciephy_rx_datapath_cdc_source_source_payload_dat;
wire          s7pciephy_rx_datapath_cdc_source_source_ready;
wire          s7pciephy_rx_datapath_cdc_source_source_valid;
wire          s7pciephy_rx_datapath_converter_converter_sink_first;
wire          s7pciephy_rx_datapath_converter_converter_sink_last;
wire   [71:0] s7pciephy_rx_datapath_converter_converter_sink_payload_data;
wire          s7pciephy_rx_datapath_converter_converter_sink_ready;
wire          s7pciephy_rx_datapath_converter_converter_sink_valid;
wire          s7pciephy_rx_datapath_converter_converter_source_first;
wire          s7pciephy_rx_datapath_converter_converter_source_last;
wire   [71:0] s7pciephy_rx_datapath_converter_converter_source_payload_data;
wire          s7pciephy_rx_datapath_converter_converter_source_payload_valid_token_count;
wire          s7pciephy_rx_datapath_converter_converter_source_ready;
wire          s7pciephy_rx_datapath_converter_converter_source_valid;
wire          s7pciephy_rx_datapath_converter_sink_first;
wire          s7pciephy_rx_datapath_converter_sink_last;
wire    [7:0] s7pciephy_rx_datapath_converter_sink_payload_be;
wire   [63:0] s7pciephy_rx_datapath_converter_sink_payload_dat;
wire          s7pciephy_rx_datapath_converter_sink_ready;
wire          s7pciephy_rx_datapath_converter_sink_valid;
wire          s7pciephy_rx_datapath_converter_source_first;
wire          s7pciephy_rx_datapath_converter_source_last;
wire    [7:0] s7pciephy_rx_datapath_converter_source_payload_be;
wire   [63:0] s7pciephy_rx_datapath_converter_source_payload_dat;
wire          s7pciephy_rx_datapath_converter_source_ready;
wire          s7pciephy_rx_datapath_converter_source_source_first;
wire          s7pciephy_rx_datapath_converter_source_source_last;
wire   [71:0] s7pciephy_rx_datapath_converter_source_source_payload_data;
wire          s7pciephy_rx_datapath_converter_source_source_ready;
wire          s7pciephy_rx_datapath_converter_source_source_valid;
wire          s7pciephy_rx_datapath_converter_source_valid;
reg           s7pciephy_rx_datapath_pipe_ready_sink_d_first = 1'd0;
reg           s7pciephy_rx_datapath_pipe_ready_sink_d_last = 1'd0;
reg     [7:0] s7pciephy_rx_datapath_pipe_ready_sink_d_payload_be = 8'd0;
reg    [63:0] s7pciephy_rx_datapath_pipe_ready_sink_d_payload_dat = 64'd0;
reg           s7pciephy_rx_datapath_pipe_ready_sink_d_ready = 1'd0;
reg           s7pciephy_rx_datapath_pipe_ready_sink_d_valid = 1'd0;
wire          s7pciephy_rx_datapath_pipe_ready_sink_first;
wire          s7pciephy_rx_datapath_pipe_ready_sink_last;
wire    [7:0] s7pciephy_rx_datapath_pipe_ready_sink_payload_be;
wire   [63:0] s7pciephy_rx_datapath_pipe_ready_sink_payload_dat;
wire          s7pciephy_rx_datapath_pipe_ready_sink_ready;
wire          s7pciephy_rx_datapath_pipe_ready_sink_valid;
reg           s7pciephy_rx_datapath_pipe_ready_source_first = 1'd0;
reg           s7pciephy_rx_datapath_pipe_ready_source_last = 1'd0;
reg     [7:0] s7pciephy_rx_datapath_pipe_ready_source_payload_be = 8'd0;
reg    [63:0] s7pciephy_rx_datapath_pipe_ready_source_payload_dat = 64'd0;
wire          s7pciephy_rx_datapath_pipe_ready_source_ready;
reg           s7pciephy_rx_datapath_pipe_ready_source_valid = 1'd0;
reg           s7pciephy_rx_datapath_pipe_ready_valid = 1'd0;
wire          s7pciephy_rx_datapath_pipe_valid_sink_first;
wire          s7pciephy_rx_datapath_pipe_valid_sink_last;
wire    [7:0] s7pciephy_rx_datapath_pipe_valid_sink_payload_be;
wire   [63:0] s7pciephy_rx_datapath_pipe_valid_sink_payload_dat;
wire          s7pciephy_rx_datapath_pipe_valid_sink_ready;
wire          s7pciephy_rx_datapath_pipe_valid_sink_valid;
reg           s7pciephy_rx_datapath_pipe_valid_source_first = 1'd0;
reg           s7pciephy_rx_datapath_pipe_valid_source_last = 1'd0;
reg     [7:0] s7pciephy_rx_datapath_pipe_valid_source_payload_be = 8'd0;
reg    [63:0] s7pciephy_rx_datapath_pipe_valid_source_payload_dat = 64'd0;
wire          s7pciephy_rx_datapath_pipe_valid_source_ready;
reg           s7pciephy_rx_datapath_pipe_valid_source_valid = 1'd0;
wire          s7pciephy_rx_datapath_sink_sink_first;
wire          s7pciephy_rx_datapath_sink_sink_last;
wire    [7:0] s7pciephy_rx_datapath_sink_sink_payload_be;
wire   [63:0] s7pciephy_rx_datapath_sink_sink_payload_dat;
wire          s7pciephy_rx_datapath_sink_sink_ready;
wire          s7pciephy_rx_datapath_sink_sink_valid;
wire          s7pciephy_rx_datapath_source_source_first;
wire          s7pciephy_rx_datapath_source_source_last;
wire    [7:0] s7pciephy_rx_datapath_source_source_payload_be;
wire   [63:0] s7pciephy_rx_datapath_source_source_payload_dat;
wire          s7pciephy_rx_datapath_source_source_ready;
wire          s7pciephy_rx_datapath_source_source_valid;
wire          s7pciephy_sig0;
wire          s7pciephy_sig1;
wire    [5:0] s7pciephy_sig10;
wire          s7pciephy_sig2;
wire   [15:0] s7pciephy_sig3;
wire   [15:0] s7pciephy_sig4;
wire    [7:0] s7pciephy_sig5;
wire    [4:0] s7pciephy_sig6;
wire    [2:0] s7pciephy_sig7;
wire          s7pciephy_sig8;
wire    [1:0] s7pciephy_sig9;
wire          s7pciephy_sink_first;
wire          s7pciephy_sink_last;
wire    [7:0] s7pciephy_sink_payload_be;
wire   [63:0] s7pciephy_sink_payload_dat;
wire          s7pciephy_sink_ready;
wire          s7pciephy_sink_valid;
wire          s7pciephy_source_first;
wire          s7pciephy_source_last;
wire    [7:0] s7pciephy_source_payload_be;
wire   [63:0] s7pciephy_source_payload_dat;
wire          s7pciephy_source_ready;
wire          s7pciephy_source_valid;
wire          s7pciephy_tx_datapath_cdc_cd_rst;
wire   [73:0] s7pciephy_tx_datapath_cdc_cdc_asyncfifo_din;
wire   [73:0] s7pciephy_tx_datapath_cdc_cdc_asyncfifo_dout;
wire          s7pciephy_tx_datapath_cdc_cdc_asyncfifo_re;
wire          s7pciephy_tx_datapath_cdc_cdc_asyncfifo_readable;
wire          s7pciephy_tx_datapath_cdc_cdc_asyncfifo_we;
wire          s7pciephy_tx_datapath_cdc_cdc_asyncfifo_writable;
wire    [4:0] s7pciephy_tx_datapath_cdc_cdc_consume_wdomain;
wire          s7pciephy_tx_datapath_cdc_cdc_fifo_in_first;
wire          s7pciephy_tx_datapath_cdc_cdc_fifo_in_last;
wire    [7:0] s7pciephy_tx_datapath_cdc_cdc_fifo_in_payload_be;
wire   [63:0] s7pciephy_tx_datapath_cdc_cdc_fifo_in_payload_dat;
wire          s7pciephy_tx_datapath_cdc_cdc_fifo_out_first;
wire          s7pciephy_tx_datapath_cdc_cdc_fifo_out_last;
wire    [7:0] s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_be;
wire   [63:0] s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_dat;
wire          s7pciephy_tx_datapath_cdc_cdc_graycounter0_ce;
(* dont_touch = "true" *)
reg     [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter0_q = 5'd0;
reg     [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_binary = 5'd0;
wire    [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next;
reg     [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary = 5'd0;
wire          s7pciephy_tx_datapath_cdc_cdc_graycounter1_ce;
(* dont_touch = "true" *)
reg     [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter1_q = 5'd0;
reg     [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_binary = 5'd0;
wire    [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next;
reg     [4:0] s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary = 5'd0;
wire    [4:0] s7pciephy_tx_datapath_cdc_cdc_produce_rdomain;
wire    [3:0] s7pciephy_tx_datapath_cdc_cdc_rdport_adr;
wire   [73:0] s7pciephy_tx_datapath_cdc_cdc_rdport_dat_r;
wire          s7pciephy_tx_datapath_cdc_cdc_sink_first;
wire          s7pciephy_tx_datapath_cdc_cdc_sink_last;
wire    [7:0] s7pciephy_tx_datapath_cdc_cdc_sink_payload_be;
wire   [63:0] s7pciephy_tx_datapath_cdc_cdc_sink_payload_dat;
wire          s7pciephy_tx_datapath_cdc_cdc_sink_ready;
wire          s7pciephy_tx_datapath_cdc_cdc_sink_valid;
wire          s7pciephy_tx_datapath_cdc_cdc_source_first;
wire          s7pciephy_tx_datapath_cdc_cdc_source_last;
wire    [7:0] s7pciephy_tx_datapath_cdc_cdc_source_payload_be;
wire   [63:0] s7pciephy_tx_datapath_cdc_cdc_source_payload_dat;
wire          s7pciephy_tx_datapath_cdc_cdc_source_ready;
wire          s7pciephy_tx_datapath_cdc_cdc_source_valid;
wire    [3:0] s7pciephy_tx_datapath_cdc_cdc_wrport_adr;
wire   [73:0] s7pciephy_tx_datapath_cdc_cdc_wrport_dat_r;
wire   [73:0] s7pciephy_tx_datapath_cdc_cdc_wrport_dat_w;
wire          s7pciephy_tx_datapath_cdc_cdc_wrport_we;
wire          s7pciephy_tx_datapath_cdc_sink_sink_first;
wire          s7pciephy_tx_datapath_cdc_sink_sink_last;
wire    [7:0] s7pciephy_tx_datapath_cdc_sink_sink_payload_be;
wire   [63:0] s7pciephy_tx_datapath_cdc_sink_sink_payload_dat;
wire          s7pciephy_tx_datapath_cdc_sink_sink_ready;
wire          s7pciephy_tx_datapath_cdc_sink_sink_valid;
wire          s7pciephy_tx_datapath_cdc_source_source_first;
wire          s7pciephy_tx_datapath_cdc_source_source_last;
wire    [7:0] s7pciephy_tx_datapath_cdc_source_source_payload_be;
wire   [63:0] s7pciephy_tx_datapath_cdc_source_source_payload_dat;
wire          s7pciephy_tx_datapath_cdc_source_source_ready;
wire          s7pciephy_tx_datapath_cdc_source_source_valid;
wire          s7pciephy_tx_datapath_converter_converter_sink_first;
wire          s7pciephy_tx_datapath_converter_converter_sink_last;
wire   [71:0] s7pciephy_tx_datapath_converter_converter_sink_payload_data;
wire          s7pciephy_tx_datapath_converter_converter_sink_ready;
wire          s7pciephy_tx_datapath_converter_converter_sink_valid;
wire          s7pciephy_tx_datapath_converter_converter_source_first;
wire          s7pciephy_tx_datapath_converter_converter_source_last;
wire   [71:0] s7pciephy_tx_datapath_converter_converter_source_payload_data;
wire          s7pciephy_tx_datapath_converter_converter_source_payload_valid_token_count;
wire          s7pciephy_tx_datapath_converter_converter_source_ready;
wire          s7pciephy_tx_datapath_converter_converter_source_valid;
wire          s7pciephy_tx_datapath_converter_sink_first;
wire          s7pciephy_tx_datapath_converter_sink_last;
wire    [7:0] s7pciephy_tx_datapath_converter_sink_payload_be;
wire   [63:0] s7pciephy_tx_datapath_converter_sink_payload_dat;
wire          s7pciephy_tx_datapath_converter_sink_ready;
wire          s7pciephy_tx_datapath_converter_sink_valid;
wire          s7pciephy_tx_datapath_converter_source_first;
wire          s7pciephy_tx_datapath_converter_source_last;
wire    [7:0] s7pciephy_tx_datapath_converter_source_payload_be;
wire   [63:0] s7pciephy_tx_datapath_converter_source_payload_dat;
wire          s7pciephy_tx_datapath_converter_source_ready;
wire          s7pciephy_tx_datapath_converter_source_source_first;
wire          s7pciephy_tx_datapath_converter_source_source_last;
wire   [71:0] s7pciephy_tx_datapath_converter_source_source_payload_data;
wire          s7pciephy_tx_datapath_converter_source_source_ready;
wire          s7pciephy_tx_datapath_converter_source_source_valid;
wire          s7pciephy_tx_datapath_converter_source_valid;
reg           s7pciephy_tx_datapath_pipe_ready_sink_d_first = 1'd0;
reg           s7pciephy_tx_datapath_pipe_ready_sink_d_last = 1'd0;
reg     [7:0] s7pciephy_tx_datapath_pipe_ready_sink_d_payload_be = 8'd0;
reg    [63:0] s7pciephy_tx_datapath_pipe_ready_sink_d_payload_dat = 64'd0;
reg           s7pciephy_tx_datapath_pipe_ready_sink_d_ready = 1'd0;
reg           s7pciephy_tx_datapath_pipe_ready_sink_d_valid = 1'd0;
wire          s7pciephy_tx_datapath_pipe_ready_sink_first;
wire          s7pciephy_tx_datapath_pipe_ready_sink_last;
wire    [7:0] s7pciephy_tx_datapath_pipe_ready_sink_payload_be;
wire   [63:0] s7pciephy_tx_datapath_pipe_ready_sink_payload_dat;
wire          s7pciephy_tx_datapath_pipe_ready_sink_ready;
wire          s7pciephy_tx_datapath_pipe_ready_sink_valid;
reg           s7pciephy_tx_datapath_pipe_ready_source_first = 1'd0;
reg           s7pciephy_tx_datapath_pipe_ready_source_last = 1'd0;
reg     [7:0] s7pciephy_tx_datapath_pipe_ready_source_payload_be = 8'd0;
reg    [63:0] s7pciephy_tx_datapath_pipe_ready_source_payload_dat = 64'd0;
wire          s7pciephy_tx_datapath_pipe_ready_source_ready;
reg           s7pciephy_tx_datapath_pipe_ready_source_valid = 1'd0;
reg           s7pciephy_tx_datapath_pipe_ready_valid = 1'd0;
wire          s7pciephy_tx_datapath_pipe_valid_sink_first;
wire          s7pciephy_tx_datapath_pipe_valid_sink_last;
wire    [7:0] s7pciephy_tx_datapath_pipe_valid_sink_payload_be;
wire   [63:0] s7pciephy_tx_datapath_pipe_valid_sink_payload_dat;
wire          s7pciephy_tx_datapath_pipe_valid_sink_ready;
wire          s7pciephy_tx_datapath_pipe_valid_sink_valid;
reg           s7pciephy_tx_datapath_pipe_valid_source_first = 1'd0;
reg           s7pciephy_tx_datapath_pipe_valid_source_last = 1'd0;
reg     [7:0] s7pciephy_tx_datapath_pipe_valid_source_payload_be = 8'd0;
reg    [63:0] s7pciephy_tx_datapath_pipe_valid_source_payload_dat = 64'd0;
wire          s7pciephy_tx_datapath_pipe_valid_source_ready;
reg           s7pciephy_tx_datapath_pipe_valid_source_valid = 1'd0;
wire          s7pciephy_tx_datapath_sink_sink_first;
wire          s7pciephy_tx_datapath_sink_sink_last;
wire    [7:0] s7pciephy_tx_datapath_sink_sink_payload_be;
wire   [63:0] s7pciephy_tx_datapath_sink_sink_payload_dat;
wire          s7pciephy_tx_datapath_sink_sink_ready;
wire          s7pciephy_tx_datapath_sink_sink_valid;
wire          s7pciephy_tx_datapath_source_source_first;
wire          s7pciephy_tx_datapath_source_source_last;
wire    [7:0] s7pciephy_tx_datapath_source_source_payload_be;
wire   [63:0] s7pciephy_tx_datapath_source_source_payload_dat;
wire          s7pciephy_tx_datapath_source_source_ready;
wire          s7pciephy_tx_datapath_source_source_valid;
reg           scratch_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg    [29:0] self0 = 30'd0;
reg    [31:0] self1 = 32'd0;
reg     [3:0] self2 = 4'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg     [2:0] self6 = 3'd0;
reg     [1:0] self7 = 2'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [1:0] slave_sel = 2'd0;
reg     [1:0] slave_sel_r = 2'd0;
reg           slave_sink_first = 1'd0;
reg           slave_sink_last = 1'd0;
reg    [31:0] slave_sink_payload_adr = 32'd0;
reg     [7:0] slave_sink_payload_channel = 8'd0;
reg    [15:0] slave_sink_payload_cmp_id = 16'd0;
reg    [63:0] slave_sink_payload_dat = 64'd0;
reg           slave_sink_payload_end = 1'd0;
reg           slave_sink_payload_err = 1'd0;
reg     [9:0] slave_sink_payload_len = 10'd0;
reg    [15:0] slave_sink_payload_req_id = 16'd0;
reg     [7:0] slave_sink_payload_tag = 8'd0;
reg     [7:0] slave_sink_payload_user_id = 8'd0;
wire          slave_sink_ready;
reg           slave_sink_valid = 1'd0;
wire          slave_source_first;
wire          slave_source_last;
wire   [31:0] slave_source_payload_adr;
wire    [7:0] slave_source_payload_channel;
wire   [63:0] slave_source_payload_dat;
wire    [9:0] slave_source_payload_len;
wire   [15:0] slave_source_payload_req_id;
wire    [7:0] slave_source_payload_tag;
wire    [7:0] slave_source_payload_user_id;
wire          slave_source_payload_we;
reg           slave_source_ready = 1'd0;
wire          slave_source_valid;
wire   [63:0] slice_proxy0;
wire    [7:0] slice_proxy1;
wire   [63:0] slice_proxy2;
wire    [7:0] slice_proxy3;
wire   [63:0] slice_proxy4;
wire    [7:0] slice_proxy5;
wire          sniffer_clk;
wire          sniffer_clk_1;
wire          sniffer_rst;
wire          sniffer_rst_n;
wire    [1:0] sniffer_rx_ctl;
wire   [15:0] sniffer_rx_data;
reg           soc_rst = 1'd0;
wire    [5:0] sram0_adr;
wire    [7:0] sram0_dat_r;
wire          sram0_sel;
reg           sram0_sel_r = 1'd0;
wire    [5:0] sram1_adr;
wire  [127:0] sram1_dat_r;
wire  [127:0] sram1_dat_w;
wire          sram1_sel;
reg           sram1_sel_r = 1'd0;
wire          sram1_we;
wire  [127:0] sram1_word_expanded;
reg     [1:0] sram1_word_index = 2'd0;
reg    [31:0] sram1_wreg0 = 32'd0;
reg    [31:0] sram1_wreg1 = 32'd0;
reg    [31:0] sram1_wreg2 = 32'd0;
wire          sys_clk;
wire          sys_rst;
wire          time_clk;
wire          time_rst;
wire          to216_clk;
wire          to216_rst;
wire          to617_clk;
wire          to617_rst;
wire          to808_clk;
wire          to808_rst;
wire          userclk1_clk;
wire          userclk1_rst;
wire          userclk2_clk;
wire          userclk2_rst;
reg    [31:0] w_payload_data = 32'd0;
reg     [3:0] w_payload_strb = 4'd0;
wire          w_ready;
reg           w_valid = 1'd0;
wire          wait_1;
reg           wb_ack = 1'd0;
wire   [29:0] wb_adr;
wire    [1:0] wb_bte;
wire    [2:0] wb_cti;
wire          wb_cyc;
reg    [31:0] wb_dat_r = 32'd0;
wire   [31:0] wb_dat_w;
reg           wb_err = 1'd0;
wire    [3:0] wb_sel;
wire          wb_stb;
wire          wb_we;
wire          we;
reg     [1:0] wishbone2axilite_next_state = 2'd0;
reg     [1:0] wishbone2axilite_state = 2'd0;
reg           wishbone2csr_next_state = 1'd0;
reg           wishbone2csr_state = 1'd0;
wire          xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          xilinxasyncresetsynchronizerimpl3_rst_meta;
wire          xilinxasyncresetsynchronizerimpl4_rst_meta;
wire          xilinxasyncresetsynchronizerimpl5_rst_meta;
wire          xilinxasyncresetsynchronizerimpl6;
wire          xilinxasyncresetsynchronizerimpl6_rst_meta;
wire          xilinxasyncresetsynchronizerimpl7;
wire          xilinxasyncresetsynchronizerimpl7_rst_meta;
wire          xilinxasyncresetsynchronizerimpl8;
wire          xilinxasyncresetsynchronizerimpl8_rst_meta;
wire          xilinxasyncresetsynchronizerimpl9;
wire          xilinxasyncresetsynchronizerimpl9_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl00 = 5'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl01 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl10 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [15:0] xilinxmultiregimpl100 = 16'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [15:0] xilinxmultiregimpl101 = 16'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl11 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg    [15:0] xilinxmultiregimpl110 = 16'd0;
(* async_reg = "true", dont_touch = "true" *)
reg    [15:0] xilinxmultiregimpl111 = 16'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [7:0] xilinxmultiregimpl120 = 8'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [7:0] xilinxmultiregimpl121 = 8'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl130 = 5'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl131 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl140 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl141 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl150 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl151 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl160 = 2'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [1:0] xilinxmultiregimpl161 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [5:0] xilinxmultiregimpl170 = 6'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [5:0] xilinxmultiregimpl171 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl180 = 4'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl181 = 4'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl190 = 4'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [3:0] xilinxmultiregimpl191 = 4'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl20 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl200 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl201 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl21 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl210 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl211 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl220 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl221 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl230 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl231 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl30 = 5'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [4:0] xilinxmultiregimpl31 = 5'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl40 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl41 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl50 = 3'd0;
(* async_reg = "true", dont_touch = "true" *)
reg     [2:0] xilinxmultiregimpl51 = 3'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl60 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl61 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl70 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl71 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl80 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl81 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl90 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl91 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign mmap_axi_lite_awvalid = aw_valid;
assign mmap_axi_lite_awaddr = aw_payload_addr;
assign mmap_axi_lite_awprot = aw_payload_prot;
assign aw_ready = mmap_axi_lite_awready;
assign mmap_axi_lite_wvalid = w_valid;
assign mmap_axi_lite_wdata = w_payload_data;
assign mmap_axi_lite_wstrb = w_payload_strb;
assign w_ready = mmap_axi_lite_wready;
assign b_valid = mmap_axi_lite_bvalid;
assign b_payload_resp = mmap_axi_lite_bresp;
assign mmap_axi_lite_bready = b_ready;
assign mmap_axi_lite_arvalid = ar_valid;
assign mmap_axi_lite_araddr = ar_payload_addr;
assign mmap_axi_lite_arprot = ar_payload_prot;
assign ar_ready = mmap_axi_lite_arready;
assign r_valid = mmap_axi_lite_rvalid;
assign r_payload_resp = mmap_axi_lite_rresp;
assign r_payload_data = mmap_axi_lite_rdata;
assign mmap_axi_lite_rready = r_ready;
always @(*) begin
    pcie_msi_irqs <= 64'd0;
    pcie_msi_irqs[63:32] <= msi_irqs;
end
assign ptm_requester_time_clk = ptm_time_clk;
assign ptm_requester_time_rst = ptm_time_rst;
assign ptm_requester_time0 = ptm_time_ns;
assign bus_error = error;
assign shared_adr = self0;
assign shared_dat_w = self1;
assign shared_sel = self2;
assign shared_cyc = self3;
assign shared_stb = self4;
assign shared_we = self5;
assign shared_cti = self6;
assign shared_bte = self7;
assign pcie_wishbone_master_bus_dat_r = shared_dat_r;
assign pcie_wishbone_master_bus_ack = (shared_ack & (grant == 1'd0));
assign pcie_wishbone_master_bus_err = (shared_err & (grant == 1'd0));
assign request = {pcie_wishbone_master_bus_cyc};
assign grant = 1'd0;
always @(*) begin
    slave_sel <= 2'd0;
    slave_sel[0] <= (shared_adr[29:23] == 1'd1);
    slave_sel[1] <= (shared_adr[29:14] == 1'd0);
end
assign wb_adr = shared_adr;
assign wb_dat_w = shared_dat_w;
assign wb_sel = shared_sel;
assign wb_stb = shared_stb;
assign wb_we = shared_we;
assign wb_cti = shared_cti;
assign wb_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign wb_cyc = (shared_cyc & slave_sel[0]);
assign interface0_cyc = (shared_cyc & slave_sel[1]);
always @(*) begin
    shared_ack <= 1'd0;
    shared_ack <= (wb_ack | interface0_ack);
    if (done) begin
        shared_ack <= 1'd1;
    end
end
assign shared_err = (wb_err | interface0_err);
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_dat_r <= (({32{slave_sel_r[0]}} & wb_dat_r) | ({32{slave_sel_r[1]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
    end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    if (done) begin
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign bus_errors_status = bus_errors;
assign clk = pcie_clk;
assign rst = pcie_rst;
assign sys_clk = pcie_clk;
assign sys_rst = pcie_rst;
assign s7pciephy_pcie_rst_n = pcie_rst_n;
assign s7pciephy_tx_datapath_sink_sink_valid = s7pciephy_sink_valid;
assign s7pciephy_sink_ready = s7pciephy_tx_datapath_sink_sink_ready;
assign s7pciephy_tx_datapath_sink_sink_first = s7pciephy_sink_first;
assign s7pciephy_tx_datapath_sink_sink_last = s7pciephy_sink_last;
assign s7pciephy_tx_datapath_sink_sink_payload_dat = s7pciephy_sink_payload_dat;
assign s7pciephy_tx_datapath_sink_sink_payload_be = s7pciephy_sink_payload_be;
assign s7pciephy_source_valid = s7pciephy_rx_datapath_source_source_valid;
assign s7pciephy_rx_datapath_source_source_ready = s7pciephy_source_ready;
assign s7pciephy_source_first = s7pciephy_rx_datapath_source_source_first;
assign s7pciephy_source_last = s7pciephy_rx_datapath_source_source_last;
assign s7pciephy_source_payload_dat = s7pciephy_rx_datapath_source_source_payload_dat;
assign s7pciephy_source_payload_be = s7pciephy_rx_datapath_source_source_payload_be;
assign s7pciephy_msi_cdc_sink_sink_valid = s7pciephy_msi_valid;
assign s7pciephy_msi_ready = s7pciephy_msi_cdc_sink_sink_ready;
assign s7pciephy_msi_cdc_sink_sink_first = s7pciephy_msi_first;
assign s7pciephy_msi_cdc_sink_sink_last = s7pciephy_msi_last;
assign s7pciephy_msi_cdc_sink_sink_payload_dat = s7pciephy_msi_payload_dat;
always @(*) begin
    s7pciephy_max_request_size <= 16'd0;
    case (s7pciephy_dcommand[14:12])
        1'd0: begin
            s7pciephy_max_request_size <= 8'd128;
        end
        1'd1: begin
            s7pciephy_max_request_size <= 9'd256;
        end
        2'd2: begin
            s7pciephy_max_request_size <= 10'd512;
        end
        2'd3: begin
            s7pciephy_max_request_size <= 10'd512;
        end
        3'd4: begin
            s7pciephy_max_request_size <= 10'd512;
        end
        3'd5: begin
            s7pciephy_max_request_size <= 10'd512;
        end
    endcase
end
always @(*) begin
    s7pciephy_max_payload_size <= 16'd0;
    case (s7pciephy_dcommand[7:5])
        1'd0: begin
            s7pciephy_max_payload_size <= 8'd128;
        end
        1'd1: begin
            s7pciephy_max_payload_size <= 9'd256;
        end
        2'd2: begin
            s7pciephy_max_payload_size <= 10'd512;
        end
        2'd3: begin
            s7pciephy_max_payload_size <= 10'd512;
        end
        3'd4: begin
            s7pciephy_max_payload_size <= 10'd512;
        end
        3'd5: begin
            s7pciephy_max_payload_size <= 10'd512;
        end
    endcase
end
assign s7pciephy_id = {s7pciephy_bus_number, s7pciephy_device_number, s7pciephy_function_number};
assign s7pciephy_bus_master_enable_status = s7pciephy_command[2];
assign s7pciephy_max_request_size_status = s7pciephy_max_request_size;
assign s7pciephy_max_payload_size_status = s7pciephy_max_payload_size;
assign s7pciephy_rx_datapath_sink_sink_first = 1'd0;
assign s7pciephy_rx_datapath_sink_sink_last = s7pciephy_m_axis_rx_tlast;
assign s7pciephy_tx_datapath_pipe_valid_sink_valid = s7pciephy_tx_datapath_sink_sink_valid;
assign s7pciephy_tx_datapath_sink_sink_ready = s7pciephy_tx_datapath_pipe_valid_sink_ready;
assign s7pciephy_tx_datapath_pipe_valid_sink_first = s7pciephy_tx_datapath_sink_sink_first;
assign s7pciephy_tx_datapath_pipe_valid_sink_last = s7pciephy_tx_datapath_sink_sink_last;
assign s7pciephy_tx_datapath_pipe_valid_sink_payload_dat = s7pciephy_tx_datapath_sink_sink_payload_dat;
assign s7pciephy_tx_datapath_pipe_valid_sink_payload_be = s7pciephy_tx_datapath_sink_sink_payload_be;
assign s7pciephy_tx_datapath_cdc_sink_sink_valid = s7pciephy_tx_datapath_pipe_valid_source_valid;
assign s7pciephy_tx_datapath_pipe_valid_source_ready = s7pciephy_tx_datapath_cdc_sink_sink_ready;
assign s7pciephy_tx_datapath_cdc_sink_sink_first = s7pciephy_tx_datapath_pipe_valid_source_first;
assign s7pciephy_tx_datapath_cdc_sink_sink_last = s7pciephy_tx_datapath_pipe_valid_source_last;
assign s7pciephy_tx_datapath_cdc_sink_sink_payload_dat = s7pciephy_tx_datapath_pipe_valid_source_payload_dat;
assign s7pciephy_tx_datapath_cdc_sink_sink_payload_be = s7pciephy_tx_datapath_pipe_valid_source_payload_be;
assign s7pciephy_tx_datapath_converter_sink_valid = s7pciephy_tx_datapath_cdc_source_source_valid;
assign s7pciephy_tx_datapath_cdc_source_source_ready = s7pciephy_tx_datapath_converter_sink_ready;
assign s7pciephy_tx_datapath_converter_sink_first = s7pciephy_tx_datapath_cdc_source_source_first;
assign s7pciephy_tx_datapath_converter_sink_last = s7pciephy_tx_datapath_cdc_source_source_last;
assign s7pciephy_tx_datapath_converter_sink_payload_dat = s7pciephy_tx_datapath_cdc_source_source_payload_dat;
assign s7pciephy_tx_datapath_converter_sink_payload_be = s7pciephy_tx_datapath_cdc_source_source_payload_be;
assign s7pciephy_tx_datapath_pipe_ready_sink_valid = s7pciephy_tx_datapath_converter_source_valid;
assign s7pciephy_tx_datapath_converter_source_ready = s7pciephy_tx_datapath_pipe_ready_sink_ready;
assign s7pciephy_tx_datapath_pipe_ready_sink_first = s7pciephy_tx_datapath_converter_source_first;
assign s7pciephy_tx_datapath_pipe_ready_sink_last = s7pciephy_tx_datapath_converter_source_last;
assign s7pciephy_tx_datapath_pipe_ready_sink_payload_dat = s7pciephy_tx_datapath_converter_source_payload_dat;
assign s7pciephy_tx_datapath_pipe_ready_sink_payload_be = s7pciephy_tx_datapath_converter_source_payload_be;
assign s7pciephy_tx_datapath_source_source_valid = s7pciephy_tx_datapath_pipe_ready_source_valid;
assign s7pciephy_tx_datapath_pipe_ready_source_ready = s7pciephy_tx_datapath_source_source_ready;
assign s7pciephy_tx_datapath_source_source_first = s7pciephy_tx_datapath_pipe_ready_source_first;
assign s7pciephy_tx_datapath_source_source_last = s7pciephy_tx_datapath_pipe_ready_source_last;
assign s7pciephy_tx_datapath_source_source_payload_dat = s7pciephy_tx_datapath_pipe_ready_source_payload_dat;
assign s7pciephy_tx_datapath_source_source_payload_be = s7pciephy_tx_datapath_pipe_ready_source_payload_be;
assign s7pciephy_tx_datapath_pipe_valid_sink_ready = ((~s7pciephy_tx_datapath_pipe_valid_source_valid) | s7pciephy_tx_datapath_pipe_valid_source_ready);
assign from216_clk = sys_clk;
assign to216_clk = pcie_clk;
assign s7pciephy_tx_datapath_cdc_cd_rst = (sys_rst | pcie_rst);
assign s7pciephy_tx_datapath_cdc_cdc_sink_valid = s7pciephy_tx_datapath_cdc_sink_sink_valid;
assign s7pciephy_tx_datapath_cdc_sink_sink_ready = s7pciephy_tx_datapath_cdc_cdc_sink_ready;
assign s7pciephy_tx_datapath_cdc_cdc_sink_first = s7pciephy_tx_datapath_cdc_sink_sink_first;
assign s7pciephy_tx_datapath_cdc_cdc_sink_last = s7pciephy_tx_datapath_cdc_sink_sink_last;
assign s7pciephy_tx_datapath_cdc_cdc_sink_payload_dat = s7pciephy_tx_datapath_cdc_sink_sink_payload_dat;
assign s7pciephy_tx_datapath_cdc_cdc_sink_payload_be = s7pciephy_tx_datapath_cdc_sink_sink_payload_be;
assign s7pciephy_tx_datapath_cdc_source_source_valid = s7pciephy_tx_datapath_cdc_cdc_source_valid;
assign s7pciephy_tx_datapath_cdc_cdc_source_ready = s7pciephy_tx_datapath_cdc_source_source_ready;
assign s7pciephy_tx_datapath_cdc_source_source_first = s7pciephy_tx_datapath_cdc_cdc_source_first;
assign s7pciephy_tx_datapath_cdc_source_source_last = s7pciephy_tx_datapath_cdc_cdc_source_last;
assign s7pciephy_tx_datapath_cdc_source_source_payload_dat = s7pciephy_tx_datapath_cdc_cdc_source_payload_dat;
assign s7pciephy_tx_datapath_cdc_source_source_payload_be = s7pciephy_tx_datapath_cdc_cdc_source_payload_be;
assign s7pciephy_tx_datapath_cdc_cdc_asyncfifo_din = {s7pciephy_tx_datapath_cdc_cdc_fifo_in_last, s7pciephy_tx_datapath_cdc_cdc_fifo_in_first, s7pciephy_tx_datapath_cdc_cdc_fifo_in_payload_be, s7pciephy_tx_datapath_cdc_cdc_fifo_in_payload_dat};
assign {s7pciephy_tx_datapath_cdc_cdc_fifo_out_last, s7pciephy_tx_datapath_cdc_cdc_fifo_out_first, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_tx_datapath_cdc_cdc_fifo_out_last, s7pciephy_tx_datapath_cdc_cdc_fifo_out_first, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_tx_datapath_cdc_cdc_fifo_out_last, s7pciephy_tx_datapath_cdc_cdc_fifo_out_first, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_tx_datapath_cdc_cdc_fifo_out_last, s7pciephy_tx_datapath_cdc_cdc_fifo_out_first, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_dout;
assign s7pciephy_tx_datapath_cdc_cdc_sink_ready = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_writable;
assign s7pciephy_tx_datapath_cdc_cdc_asyncfifo_we = s7pciephy_tx_datapath_cdc_cdc_sink_valid;
assign s7pciephy_tx_datapath_cdc_cdc_fifo_in_first = s7pciephy_tx_datapath_cdc_cdc_sink_first;
assign s7pciephy_tx_datapath_cdc_cdc_fifo_in_last = s7pciephy_tx_datapath_cdc_cdc_sink_last;
assign s7pciephy_tx_datapath_cdc_cdc_fifo_in_payload_dat = s7pciephy_tx_datapath_cdc_cdc_sink_payload_dat;
assign s7pciephy_tx_datapath_cdc_cdc_fifo_in_payload_be = s7pciephy_tx_datapath_cdc_cdc_sink_payload_be;
assign s7pciephy_tx_datapath_cdc_cdc_source_valid = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_readable;
assign s7pciephy_tx_datapath_cdc_cdc_source_first = s7pciephy_tx_datapath_cdc_cdc_fifo_out_first;
assign s7pciephy_tx_datapath_cdc_cdc_source_last = s7pciephy_tx_datapath_cdc_cdc_fifo_out_last;
assign s7pciephy_tx_datapath_cdc_cdc_source_payload_dat = s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_dat;
assign s7pciephy_tx_datapath_cdc_cdc_source_payload_be = s7pciephy_tx_datapath_cdc_cdc_fifo_out_payload_be;
assign s7pciephy_tx_datapath_cdc_cdc_asyncfifo_re = s7pciephy_tx_datapath_cdc_cdc_source_ready;
assign s7pciephy_tx_datapath_cdc_cdc_graycounter0_ce = (s7pciephy_tx_datapath_cdc_cdc_asyncfifo_writable & s7pciephy_tx_datapath_cdc_cdc_asyncfifo_we);
assign s7pciephy_tx_datapath_cdc_cdc_graycounter1_ce = (s7pciephy_tx_datapath_cdc_cdc_asyncfifo_readable & s7pciephy_tx_datapath_cdc_cdc_asyncfifo_re);
assign s7pciephy_tx_datapath_cdc_cdc_asyncfifo_writable = (((s7pciephy_tx_datapath_cdc_cdc_graycounter0_q[4] == s7pciephy_tx_datapath_cdc_cdc_consume_wdomain[4]) | (s7pciephy_tx_datapath_cdc_cdc_graycounter0_q[3] == s7pciephy_tx_datapath_cdc_cdc_consume_wdomain[3])) | (s7pciephy_tx_datapath_cdc_cdc_graycounter0_q[2:0] != s7pciephy_tx_datapath_cdc_cdc_consume_wdomain[2:0]));
assign s7pciephy_tx_datapath_cdc_cdc_asyncfifo_readable = (s7pciephy_tx_datapath_cdc_cdc_graycounter1_q != s7pciephy_tx_datapath_cdc_cdc_produce_rdomain);
assign s7pciephy_tx_datapath_cdc_cdc_wrport_adr = s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_binary[3:0];
assign s7pciephy_tx_datapath_cdc_cdc_wrport_dat_w = s7pciephy_tx_datapath_cdc_cdc_asyncfifo_din;
assign s7pciephy_tx_datapath_cdc_cdc_wrport_we = s7pciephy_tx_datapath_cdc_cdc_graycounter0_ce;
assign s7pciephy_tx_datapath_cdc_cdc_rdport_adr = s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary[3:0];
assign s7pciephy_tx_datapath_cdc_cdc_asyncfifo_dout = s7pciephy_tx_datapath_cdc_cdc_rdport_dat_r;
always @(*) begin
    s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary <= 5'd0;
    if (s7pciephy_tx_datapath_cdc_cdc_graycounter0_ce) begin
        s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary <= (s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary <= s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_binary;
    end
end
assign s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next = (s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary ^ s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary[4:1]);
always @(*) begin
    s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary <= 5'd0;
    if (s7pciephy_tx_datapath_cdc_cdc_graycounter1_ce) begin
        s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary <= (s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary <= s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_binary;
    end
end
assign s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next = (s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary ^ s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary[4:1]);
assign s7pciephy_tx_datapath_converter_converter_sink_valid = s7pciephy_tx_datapath_converter_sink_valid;
assign s7pciephy_tx_datapath_converter_converter_sink_first = s7pciephy_tx_datapath_converter_sink_first;
assign s7pciephy_tx_datapath_converter_converter_sink_last = s7pciephy_tx_datapath_converter_sink_last;
assign s7pciephy_tx_datapath_converter_sink_ready = s7pciephy_tx_datapath_converter_converter_sink_ready;
assign s7pciephy_tx_datapath_converter_converter_sink_payload_data = {s7pciephy_tx_datapath_converter_sink_payload_be, s7pciephy_tx_datapath_converter_sink_payload_dat};
assign s7pciephy_tx_datapath_converter_source_valid = s7pciephy_tx_datapath_converter_source_source_valid;
assign s7pciephy_tx_datapath_converter_source_first = s7pciephy_tx_datapath_converter_source_source_first;
assign s7pciephy_tx_datapath_converter_source_last = s7pciephy_tx_datapath_converter_source_source_last;
assign s7pciephy_tx_datapath_converter_source_source_ready = s7pciephy_tx_datapath_converter_source_ready;
assign {s7pciephy_tx_datapath_converter_source_payload_be, s7pciephy_tx_datapath_converter_source_payload_dat} = s7pciephy_tx_datapath_converter_source_source_payload_data;
assign {s7pciephy_tx_datapath_converter_source_payload_be, s7pciephy_tx_datapath_converter_source_payload_dat} = s7pciephy_tx_datapath_converter_source_source_payload_data;
assign s7pciephy_tx_datapath_converter_source_source_valid = s7pciephy_tx_datapath_converter_converter_source_valid;
assign s7pciephy_tx_datapath_converter_converter_source_ready = s7pciephy_tx_datapath_converter_source_source_ready;
assign s7pciephy_tx_datapath_converter_source_source_first = s7pciephy_tx_datapath_converter_converter_source_first;
assign s7pciephy_tx_datapath_converter_source_source_last = s7pciephy_tx_datapath_converter_converter_source_last;
assign s7pciephy_tx_datapath_converter_source_source_payload_data = s7pciephy_tx_datapath_converter_converter_source_payload_data;
assign s7pciephy_tx_datapath_converter_converter_source_valid = s7pciephy_tx_datapath_converter_converter_sink_valid;
assign s7pciephy_tx_datapath_converter_converter_sink_ready = s7pciephy_tx_datapath_converter_converter_source_ready;
assign s7pciephy_tx_datapath_converter_converter_source_first = s7pciephy_tx_datapath_converter_converter_sink_first;
assign s7pciephy_tx_datapath_converter_converter_source_last = s7pciephy_tx_datapath_converter_converter_sink_last;
assign s7pciephy_tx_datapath_converter_converter_source_payload_data = s7pciephy_tx_datapath_converter_converter_sink_payload_data;
assign s7pciephy_tx_datapath_converter_converter_source_payload_valid_token_count = 1'd1;
assign s7pciephy_tx_datapath_pipe_ready_sink_ready = (~s7pciephy_tx_datapath_pipe_ready_valid);
always @(*) begin
    s7pciephy_tx_datapath_pipe_ready_source_valid <= 1'd0;
    if (s7pciephy_tx_datapath_pipe_ready_valid) begin
        s7pciephy_tx_datapath_pipe_ready_source_valid <= s7pciephy_tx_datapath_pipe_ready_sink_d_valid;
    end else begin
        s7pciephy_tx_datapath_pipe_ready_source_valid <= s7pciephy_tx_datapath_pipe_ready_sink_valid;
    end
end
always @(*) begin
    s7pciephy_tx_datapath_pipe_ready_source_first <= 1'd0;
    if (s7pciephy_tx_datapath_pipe_ready_valid) begin
        s7pciephy_tx_datapath_pipe_ready_source_first <= s7pciephy_tx_datapath_pipe_ready_sink_d_first;
    end else begin
        s7pciephy_tx_datapath_pipe_ready_source_first <= s7pciephy_tx_datapath_pipe_ready_sink_first;
    end
end
always @(*) begin
    s7pciephy_tx_datapath_pipe_ready_source_last <= 1'd0;
    if (s7pciephy_tx_datapath_pipe_ready_valid) begin
        s7pciephy_tx_datapath_pipe_ready_source_last <= s7pciephy_tx_datapath_pipe_ready_sink_d_last;
    end else begin
        s7pciephy_tx_datapath_pipe_ready_source_last <= s7pciephy_tx_datapath_pipe_ready_sink_last;
    end
end
always @(*) begin
    s7pciephy_tx_datapath_pipe_ready_source_payload_dat <= 64'd0;
    if (s7pciephy_tx_datapath_pipe_ready_valid) begin
        s7pciephy_tx_datapath_pipe_ready_source_payload_dat <= s7pciephy_tx_datapath_pipe_ready_sink_d_payload_dat;
    end else begin
        s7pciephy_tx_datapath_pipe_ready_source_payload_dat <= s7pciephy_tx_datapath_pipe_ready_sink_payload_dat;
    end
end
always @(*) begin
    s7pciephy_tx_datapath_pipe_ready_source_payload_be <= 8'd0;
    if (s7pciephy_tx_datapath_pipe_ready_valid) begin
        s7pciephy_tx_datapath_pipe_ready_source_payload_be <= s7pciephy_tx_datapath_pipe_ready_sink_d_payload_be;
    end else begin
        s7pciephy_tx_datapath_pipe_ready_source_payload_be <= s7pciephy_tx_datapath_pipe_ready_sink_payload_be;
    end
end
assign s7pciephy_rx_datapath_pipe_ready_sink_valid = s7pciephy_rx_datapath_sink_sink_valid;
assign s7pciephy_rx_datapath_sink_sink_ready = s7pciephy_rx_datapath_pipe_ready_sink_ready;
assign s7pciephy_rx_datapath_pipe_ready_sink_first = s7pciephy_rx_datapath_sink_sink_first;
assign s7pciephy_rx_datapath_pipe_ready_sink_last = s7pciephy_rx_datapath_sink_sink_last;
assign s7pciephy_rx_datapath_pipe_ready_sink_payload_dat = s7pciephy_rx_datapath_sink_sink_payload_dat;
assign s7pciephy_rx_datapath_pipe_ready_sink_payload_be = s7pciephy_rx_datapath_sink_sink_payload_be;
assign s7pciephy_rx_datapath_converter_sink_valid = s7pciephy_rx_datapath_pipe_ready_source_valid;
assign s7pciephy_rx_datapath_pipe_ready_source_ready = s7pciephy_rx_datapath_converter_sink_ready;
assign s7pciephy_rx_datapath_converter_sink_first = s7pciephy_rx_datapath_pipe_ready_source_first;
assign s7pciephy_rx_datapath_converter_sink_last = s7pciephy_rx_datapath_pipe_ready_source_last;
assign s7pciephy_rx_datapath_converter_sink_payload_dat = s7pciephy_rx_datapath_pipe_ready_source_payload_dat;
assign s7pciephy_rx_datapath_converter_sink_payload_be = s7pciephy_rx_datapath_pipe_ready_source_payload_be;
assign s7pciephy_rx_datapath_cdc_sink_sink_valid = s7pciephy_rx_datapath_converter_source_valid;
assign s7pciephy_rx_datapath_converter_source_ready = s7pciephy_rx_datapath_cdc_sink_sink_ready;
assign s7pciephy_rx_datapath_cdc_sink_sink_first = s7pciephy_rx_datapath_converter_source_first;
assign s7pciephy_rx_datapath_cdc_sink_sink_last = s7pciephy_rx_datapath_converter_source_last;
assign s7pciephy_rx_datapath_cdc_sink_sink_payload_dat = s7pciephy_rx_datapath_converter_source_payload_dat;
assign s7pciephy_rx_datapath_cdc_sink_sink_payload_be = s7pciephy_rx_datapath_converter_source_payload_be;
assign s7pciephy_rx_datapath_pipe_valid_sink_valid = s7pciephy_rx_datapath_cdc_source_source_valid;
assign s7pciephy_rx_datapath_cdc_source_source_ready = s7pciephy_rx_datapath_pipe_valid_sink_ready;
assign s7pciephy_rx_datapath_pipe_valid_sink_first = s7pciephy_rx_datapath_cdc_source_source_first;
assign s7pciephy_rx_datapath_pipe_valid_sink_last = s7pciephy_rx_datapath_cdc_source_source_last;
assign s7pciephy_rx_datapath_pipe_valid_sink_payload_dat = s7pciephy_rx_datapath_cdc_source_source_payload_dat;
assign s7pciephy_rx_datapath_pipe_valid_sink_payload_be = s7pciephy_rx_datapath_cdc_source_source_payload_be;
assign s7pciephy_rx_datapath_source_source_valid = s7pciephy_rx_datapath_pipe_valid_source_valid;
assign s7pciephy_rx_datapath_pipe_valid_source_ready = s7pciephy_rx_datapath_source_source_ready;
assign s7pciephy_rx_datapath_source_source_first = s7pciephy_rx_datapath_pipe_valid_source_first;
assign s7pciephy_rx_datapath_source_source_last = s7pciephy_rx_datapath_pipe_valid_source_last;
assign s7pciephy_rx_datapath_source_source_payload_dat = s7pciephy_rx_datapath_pipe_valid_source_payload_dat;
assign s7pciephy_rx_datapath_source_source_payload_be = s7pciephy_rx_datapath_pipe_valid_source_payload_be;
assign s7pciephy_rx_datapath_pipe_ready_sink_ready = (~s7pciephy_rx_datapath_pipe_ready_valid);
always @(*) begin
    s7pciephy_rx_datapath_pipe_ready_source_valid <= 1'd0;
    if (s7pciephy_rx_datapath_pipe_ready_valid) begin
        s7pciephy_rx_datapath_pipe_ready_source_valid <= s7pciephy_rx_datapath_pipe_ready_sink_d_valid;
    end else begin
        s7pciephy_rx_datapath_pipe_ready_source_valid <= s7pciephy_rx_datapath_pipe_ready_sink_valid;
    end
end
always @(*) begin
    s7pciephy_rx_datapath_pipe_ready_source_first <= 1'd0;
    if (s7pciephy_rx_datapath_pipe_ready_valid) begin
        s7pciephy_rx_datapath_pipe_ready_source_first <= s7pciephy_rx_datapath_pipe_ready_sink_d_first;
    end else begin
        s7pciephy_rx_datapath_pipe_ready_source_first <= s7pciephy_rx_datapath_pipe_ready_sink_first;
    end
end
always @(*) begin
    s7pciephy_rx_datapath_pipe_ready_source_last <= 1'd0;
    if (s7pciephy_rx_datapath_pipe_ready_valid) begin
        s7pciephy_rx_datapath_pipe_ready_source_last <= s7pciephy_rx_datapath_pipe_ready_sink_d_last;
    end else begin
        s7pciephy_rx_datapath_pipe_ready_source_last <= s7pciephy_rx_datapath_pipe_ready_sink_last;
    end
end
always @(*) begin
    s7pciephy_rx_datapath_pipe_ready_source_payload_dat <= 64'd0;
    if (s7pciephy_rx_datapath_pipe_ready_valid) begin
        s7pciephy_rx_datapath_pipe_ready_source_payload_dat <= s7pciephy_rx_datapath_pipe_ready_sink_d_payload_dat;
    end else begin
        s7pciephy_rx_datapath_pipe_ready_source_payload_dat <= s7pciephy_rx_datapath_pipe_ready_sink_payload_dat;
    end
end
always @(*) begin
    s7pciephy_rx_datapath_pipe_ready_source_payload_be <= 8'd0;
    if (s7pciephy_rx_datapath_pipe_ready_valid) begin
        s7pciephy_rx_datapath_pipe_ready_source_payload_be <= s7pciephy_rx_datapath_pipe_ready_sink_d_payload_be;
    end else begin
        s7pciephy_rx_datapath_pipe_ready_source_payload_be <= s7pciephy_rx_datapath_pipe_ready_sink_payload_be;
    end
end
assign s7pciephy_rx_datapath_converter_converter_sink_valid = s7pciephy_rx_datapath_converter_sink_valid;
assign s7pciephy_rx_datapath_converter_converter_sink_first = s7pciephy_rx_datapath_converter_sink_first;
assign s7pciephy_rx_datapath_converter_converter_sink_last = s7pciephy_rx_datapath_converter_sink_last;
assign s7pciephy_rx_datapath_converter_sink_ready = s7pciephy_rx_datapath_converter_converter_sink_ready;
assign s7pciephy_rx_datapath_converter_converter_sink_payload_data = {s7pciephy_rx_datapath_converter_sink_payload_be, s7pciephy_rx_datapath_converter_sink_payload_dat};
assign s7pciephy_rx_datapath_converter_source_valid = s7pciephy_rx_datapath_converter_source_source_valid;
assign s7pciephy_rx_datapath_converter_source_first = s7pciephy_rx_datapath_converter_source_source_first;
assign s7pciephy_rx_datapath_converter_source_last = s7pciephy_rx_datapath_converter_source_source_last;
assign s7pciephy_rx_datapath_converter_source_source_ready = s7pciephy_rx_datapath_converter_source_ready;
assign {s7pciephy_rx_datapath_converter_source_payload_be, s7pciephy_rx_datapath_converter_source_payload_dat} = s7pciephy_rx_datapath_converter_source_source_payload_data;
assign {s7pciephy_rx_datapath_converter_source_payload_be, s7pciephy_rx_datapath_converter_source_payload_dat} = s7pciephy_rx_datapath_converter_source_source_payload_data;
assign s7pciephy_rx_datapath_converter_source_source_valid = s7pciephy_rx_datapath_converter_converter_source_valid;
assign s7pciephy_rx_datapath_converter_converter_source_ready = s7pciephy_rx_datapath_converter_source_source_ready;
assign s7pciephy_rx_datapath_converter_source_source_first = s7pciephy_rx_datapath_converter_converter_source_first;
assign s7pciephy_rx_datapath_converter_source_source_last = s7pciephy_rx_datapath_converter_converter_source_last;
assign s7pciephy_rx_datapath_converter_source_source_payload_data = s7pciephy_rx_datapath_converter_converter_source_payload_data;
assign s7pciephy_rx_datapath_converter_converter_source_valid = s7pciephy_rx_datapath_converter_converter_sink_valid;
assign s7pciephy_rx_datapath_converter_converter_sink_ready = s7pciephy_rx_datapath_converter_converter_source_ready;
assign s7pciephy_rx_datapath_converter_converter_source_first = s7pciephy_rx_datapath_converter_converter_sink_first;
assign s7pciephy_rx_datapath_converter_converter_source_last = s7pciephy_rx_datapath_converter_converter_sink_last;
assign s7pciephy_rx_datapath_converter_converter_source_payload_data = s7pciephy_rx_datapath_converter_converter_sink_payload_data;
assign s7pciephy_rx_datapath_converter_converter_source_payload_valid_token_count = 1'd1;
assign from617_clk = pcie_clk;
assign to617_clk = sys_clk;
assign s7pciephy_rx_datapath_cdc_cd_rst = (pcie_rst | sys_rst);
assign s7pciephy_rx_datapath_cdc_cdc_sink_valid = s7pciephy_rx_datapath_cdc_sink_sink_valid;
assign s7pciephy_rx_datapath_cdc_sink_sink_ready = s7pciephy_rx_datapath_cdc_cdc_sink_ready;
assign s7pciephy_rx_datapath_cdc_cdc_sink_first = s7pciephy_rx_datapath_cdc_sink_sink_first;
assign s7pciephy_rx_datapath_cdc_cdc_sink_last = s7pciephy_rx_datapath_cdc_sink_sink_last;
assign s7pciephy_rx_datapath_cdc_cdc_sink_payload_dat = s7pciephy_rx_datapath_cdc_sink_sink_payload_dat;
assign s7pciephy_rx_datapath_cdc_cdc_sink_payload_be = s7pciephy_rx_datapath_cdc_sink_sink_payload_be;
assign s7pciephy_rx_datapath_cdc_source_source_valid = s7pciephy_rx_datapath_cdc_cdc_source_valid;
assign s7pciephy_rx_datapath_cdc_cdc_source_ready = s7pciephy_rx_datapath_cdc_source_source_ready;
assign s7pciephy_rx_datapath_cdc_source_source_first = s7pciephy_rx_datapath_cdc_cdc_source_first;
assign s7pciephy_rx_datapath_cdc_source_source_last = s7pciephy_rx_datapath_cdc_cdc_source_last;
assign s7pciephy_rx_datapath_cdc_source_source_payload_dat = s7pciephy_rx_datapath_cdc_cdc_source_payload_dat;
assign s7pciephy_rx_datapath_cdc_source_source_payload_be = s7pciephy_rx_datapath_cdc_cdc_source_payload_be;
assign s7pciephy_rx_datapath_cdc_cdc_asyncfifo_din = {s7pciephy_rx_datapath_cdc_cdc_fifo_in_last, s7pciephy_rx_datapath_cdc_cdc_fifo_in_first, s7pciephy_rx_datapath_cdc_cdc_fifo_in_payload_be, s7pciephy_rx_datapath_cdc_cdc_fifo_in_payload_dat};
assign {s7pciephy_rx_datapath_cdc_cdc_fifo_out_last, s7pciephy_rx_datapath_cdc_cdc_fifo_out_first, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_rx_datapath_cdc_cdc_fifo_out_last, s7pciephy_rx_datapath_cdc_cdc_fifo_out_first, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_rx_datapath_cdc_cdc_fifo_out_last, s7pciephy_rx_datapath_cdc_cdc_fifo_out_first, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_rx_datapath_cdc_cdc_fifo_out_last, s7pciephy_rx_datapath_cdc_cdc_fifo_out_first, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_be, s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_dat} = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_dout;
assign s7pciephy_rx_datapath_cdc_cdc_sink_ready = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_writable;
assign s7pciephy_rx_datapath_cdc_cdc_asyncfifo_we = s7pciephy_rx_datapath_cdc_cdc_sink_valid;
assign s7pciephy_rx_datapath_cdc_cdc_fifo_in_first = s7pciephy_rx_datapath_cdc_cdc_sink_first;
assign s7pciephy_rx_datapath_cdc_cdc_fifo_in_last = s7pciephy_rx_datapath_cdc_cdc_sink_last;
assign s7pciephy_rx_datapath_cdc_cdc_fifo_in_payload_dat = s7pciephy_rx_datapath_cdc_cdc_sink_payload_dat;
assign s7pciephy_rx_datapath_cdc_cdc_fifo_in_payload_be = s7pciephy_rx_datapath_cdc_cdc_sink_payload_be;
assign s7pciephy_rx_datapath_cdc_cdc_source_valid = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_readable;
assign s7pciephy_rx_datapath_cdc_cdc_source_first = s7pciephy_rx_datapath_cdc_cdc_fifo_out_first;
assign s7pciephy_rx_datapath_cdc_cdc_source_last = s7pciephy_rx_datapath_cdc_cdc_fifo_out_last;
assign s7pciephy_rx_datapath_cdc_cdc_source_payload_dat = s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_dat;
assign s7pciephy_rx_datapath_cdc_cdc_source_payload_be = s7pciephy_rx_datapath_cdc_cdc_fifo_out_payload_be;
assign s7pciephy_rx_datapath_cdc_cdc_asyncfifo_re = s7pciephy_rx_datapath_cdc_cdc_source_ready;
assign s7pciephy_rx_datapath_cdc_cdc_graycounter0_ce = (s7pciephy_rx_datapath_cdc_cdc_asyncfifo_writable & s7pciephy_rx_datapath_cdc_cdc_asyncfifo_we);
assign s7pciephy_rx_datapath_cdc_cdc_graycounter1_ce = (s7pciephy_rx_datapath_cdc_cdc_asyncfifo_readable & s7pciephy_rx_datapath_cdc_cdc_asyncfifo_re);
assign s7pciephy_rx_datapath_cdc_cdc_asyncfifo_writable = (((s7pciephy_rx_datapath_cdc_cdc_graycounter0_q[4] == s7pciephy_rx_datapath_cdc_cdc_consume_wdomain[4]) | (s7pciephy_rx_datapath_cdc_cdc_graycounter0_q[3] == s7pciephy_rx_datapath_cdc_cdc_consume_wdomain[3])) | (s7pciephy_rx_datapath_cdc_cdc_graycounter0_q[2:0] != s7pciephy_rx_datapath_cdc_cdc_consume_wdomain[2:0]));
assign s7pciephy_rx_datapath_cdc_cdc_asyncfifo_readable = (s7pciephy_rx_datapath_cdc_cdc_graycounter1_q != s7pciephy_rx_datapath_cdc_cdc_produce_rdomain);
assign s7pciephy_rx_datapath_cdc_cdc_wrport_adr = s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_binary[3:0];
assign s7pciephy_rx_datapath_cdc_cdc_wrport_dat_w = s7pciephy_rx_datapath_cdc_cdc_asyncfifo_din;
assign s7pciephy_rx_datapath_cdc_cdc_wrport_we = s7pciephy_rx_datapath_cdc_cdc_graycounter0_ce;
assign s7pciephy_rx_datapath_cdc_cdc_rdport_adr = s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary[3:0];
assign s7pciephy_rx_datapath_cdc_cdc_asyncfifo_dout = s7pciephy_rx_datapath_cdc_cdc_rdport_dat_r;
always @(*) begin
    s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary <= 5'd0;
    if (s7pciephy_rx_datapath_cdc_cdc_graycounter0_ce) begin
        s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary <= (s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary <= s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_binary;
    end
end
assign s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next = (s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary ^ s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary[4:1]);
always @(*) begin
    s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary <= 5'd0;
    if (s7pciephy_rx_datapath_cdc_cdc_graycounter1_ce) begin
        s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary <= (s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary <= s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_binary;
    end
end
assign s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next = (s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary ^ s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary[4:1]);
assign s7pciephy_rx_datapath_pipe_valid_sink_ready = ((~s7pciephy_rx_datapath_pipe_valid_source_valid) | s7pciephy_rx_datapath_pipe_valid_source_ready);
assign from808_clk = sys_clk;
assign to808_clk = pcie_clk;
assign s7pciephy_msi_cdc_cd_rst = (sys_rst | pcie_rst);
assign s7pciephy_msi_cdc_cdc_sink_valid = s7pciephy_msi_cdc_sink_sink_valid;
assign s7pciephy_msi_cdc_sink_sink_ready = s7pciephy_msi_cdc_cdc_sink_ready;
assign s7pciephy_msi_cdc_cdc_sink_first = s7pciephy_msi_cdc_sink_sink_first;
assign s7pciephy_msi_cdc_cdc_sink_last = s7pciephy_msi_cdc_sink_sink_last;
assign s7pciephy_msi_cdc_cdc_sink_payload_dat = s7pciephy_msi_cdc_sink_sink_payload_dat;
assign s7pciephy_msi_cdc_source_source_valid = s7pciephy_msi_cdc_cdc_source_valid;
assign s7pciephy_msi_cdc_cdc_source_ready = s7pciephy_msi_cdc_source_source_ready;
assign s7pciephy_msi_cdc_source_source_first = s7pciephy_msi_cdc_cdc_source_first;
assign s7pciephy_msi_cdc_source_source_last = s7pciephy_msi_cdc_cdc_source_last;
assign s7pciephy_msi_cdc_source_source_payload_dat = s7pciephy_msi_cdc_cdc_source_payload_dat;
assign s7pciephy_msi_cdc_cdc_asyncfifo_din = {s7pciephy_msi_cdc_cdc_fifo_in_last, s7pciephy_msi_cdc_cdc_fifo_in_first, s7pciephy_msi_cdc_cdc_fifo_in_payload_dat};
assign {s7pciephy_msi_cdc_cdc_fifo_out_last, s7pciephy_msi_cdc_cdc_fifo_out_first, s7pciephy_msi_cdc_cdc_fifo_out_payload_dat} = s7pciephy_msi_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_msi_cdc_cdc_fifo_out_last, s7pciephy_msi_cdc_cdc_fifo_out_first, s7pciephy_msi_cdc_cdc_fifo_out_payload_dat} = s7pciephy_msi_cdc_cdc_asyncfifo_dout;
assign {s7pciephy_msi_cdc_cdc_fifo_out_last, s7pciephy_msi_cdc_cdc_fifo_out_first, s7pciephy_msi_cdc_cdc_fifo_out_payload_dat} = s7pciephy_msi_cdc_cdc_asyncfifo_dout;
assign s7pciephy_msi_cdc_cdc_sink_ready = s7pciephy_msi_cdc_cdc_asyncfifo_writable;
assign s7pciephy_msi_cdc_cdc_asyncfifo_we = s7pciephy_msi_cdc_cdc_sink_valid;
assign s7pciephy_msi_cdc_cdc_fifo_in_first = s7pciephy_msi_cdc_cdc_sink_first;
assign s7pciephy_msi_cdc_cdc_fifo_in_last = s7pciephy_msi_cdc_cdc_sink_last;
assign s7pciephy_msi_cdc_cdc_fifo_in_payload_dat = s7pciephy_msi_cdc_cdc_sink_payload_dat;
assign s7pciephy_msi_cdc_cdc_source_valid = s7pciephy_msi_cdc_cdc_asyncfifo_readable;
assign s7pciephy_msi_cdc_cdc_source_first = s7pciephy_msi_cdc_cdc_fifo_out_first;
assign s7pciephy_msi_cdc_cdc_source_last = s7pciephy_msi_cdc_cdc_fifo_out_last;
assign s7pciephy_msi_cdc_cdc_source_payload_dat = s7pciephy_msi_cdc_cdc_fifo_out_payload_dat;
assign s7pciephy_msi_cdc_cdc_asyncfifo_re = s7pciephy_msi_cdc_cdc_source_ready;
assign s7pciephy_msi_cdc_cdc_graycounter0_ce = (s7pciephy_msi_cdc_cdc_asyncfifo_writable & s7pciephy_msi_cdc_cdc_asyncfifo_we);
assign s7pciephy_msi_cdc_cdc_graycounter1_ce = (s7pciephy_msi_cdc_cdc_asyncfifo_readable & s7pciephy_msi_cdc_cdc_asyncfifo_re);
assign s7pciephy_msi_cdc_cdc_asyncfifo_writable = (((s7pciephy_msi_cdc_cdc_graycounter0_q[2] == s7pciephy_msi_cdc_cdc_consume_wdomain[2]) | (s7pciephy_msi_cdc_cdc_graycounter0_q[1] == s7pciephy_msi_cdc_cdc_consume_wdomain[1])) | (s7pciephy_msi_cdc_cdc_graycounter0_q[0] != s7pciephy_msi_cdc_cdc_consume_wdomain[0]));
assign s7pciephy_msi_cdc_cdc_asyncfifo_readable = (s7pciephy_msi_cdc_cdc_graycounter1_q != s7pciephy_msi_cdc_cdc_produce_rdomain);
assign s7pciephy_msi_cdc_cdc_wrport_adr = s7pciephy_msi_cdc_cdc_graycounter0_q_binary[1:0];
assign s7pciephy_msi_cdc_cdc_wrport_dat_w = s7pciephy_msi_cdc_cdc_asyncfifo_din;
assign s7pciephy_msi_cdc_cdc_wrport_we = s7pciephy_msi_cdc_cdc_graycounter0_ce;
assign s7pciephy_msi_cdc_cdc_rdport_adr = s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary[1:0];
assign s7pciephy_msi_cdc_cdc_asyncfifo_dout = s7pciephy_msi_cdc_cdc_rdport_dat_r;
always @(*) begin
    s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (s7pciephy_msi_cdc_cdc_graycounter0_ce) begin
        s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary <= (s7pciephy_msi_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary <= s7pciephy_msi_cdc_cdc_graycounter0_q_binary;
    end
end
assign s7pciephy_msi_cdc_cdc_graycounter0_q_next = (s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary ^ s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (s7pciephy_msi_cdc_cdc_graycounter1_ce) begin
        s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary <= (s7pciephy_msi_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary <= s7pciephy_msi_cdc_cdc_graycounter1_q_binary;
    end
end
assign s7pciephy_msi_cdc_cdc_graycounter1_q_next = (s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary ^ s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign s7pciephy_clkin = s7pciephy_pipe_txoutclk_bufg;
assign clk125_clk = s7pciephy_clkout_buf0;
assign clk250_clk = s7pciephy_clkout_buf1;
assign userclk1_clk = s7pciephy_clkout_buf2;
assign userclk2_clk = s7pciephy_clkout_buf3;
assign depacketizer_sink_sink_valid = s7pciephy_source_valid;
assign s7pciephy_source_ready = depacketizer_sink_sink_ready;
assign depacketizer_sink_sink_first = s7pciephy_source_first;
assign depacketizer_sink_sink_last = s7pciephy_source_last;
assign depacketizer_sink_sink_payload_dat = s7pciephy_source_payload_dat;
assign depacketizer_sink_sink_payload_be = s7pciephy_source_payload_be;
assign s7pciephy_sink_valid = packetizer_source_valid;
assign packetizer_source_ready = s7pciephy_sink_ready;
assign s7pciephy_sink_first = packetizer_source_first;
assign s7pciephy_sink_last = packetizer_source_last;
assign s7pciephy_sink_payload_dat = packetizer_source_payload_dat;
assign s7pciephy_sink_payload_be = packetizer_source_payload_be;
assign slave_source_valid = depacketizer_req_source_valid;
assign depacketizer_req_source_ready = slave_source_ready;
assign slave_source_first = depacketizer_req_source_first;
assign slave_source_last = depacketizer_req_source_last;
assign slave_source_payload_req_id = depacketizer_req_source_payload_req_id;
assign slave_source_payload_we = depacketizer_req_source_payload_we;
assign slave_source_payload_adr = depacketizer_req_source_payload_adr;
assign slave_source_payload_len = depacketizer_req_source_payload_len;
assign slave_source_payload_tag = depacketizer_req_source_payload_tag;
assign slave_source_payload_dat = depacketizer_req_source_payload_dat;
assign slave_source_payload_channel = depacketizer_req_source_payload_channel;
assign slave_source_payload_user_id = depacketizer_req_source_payload_user_id;
assign packetizer_cmp_sink_valid = slave_sink_valid;
assign slave_sink_ready = packetizer_cmp_sink_ready;
assign packetizer_cmp_sink_first = slave_sink_first;
assign packetizer_cmp_sink_last = slave_sink_last;
assign packetizer_cmp_sink_payload_req_id = slave_sink_payload_req_id;
assign packetizer_cmp_sink_payload_cmp_id = slave_sink_payload_cmp_id;
assign packetizer_cmp_sink_payload_adr = slave_sink_payload_adr;
assign packetizer_cmp_sink_payload_len = slave_sink_payload_len;
assign packetizer_cmp_sink_payload_end = slave_sink_payload_end;
assign packetizer_cmp_sink_payload_err = slave_sink_payload_err;
assign packetizer_cmp_sink_payload_tag = slave_sink_payload_tag;
assign packetizer_cmp_sink_payload_dat = slave_sink_payload_dat;
assign packetizer_cmp_sink_payload_channel = slave_sink_payload_channel;
assign packetizer_cmp_sink_payload_user_id = slave_sink_payload_user_id;
assign packetizer_req_sink_valid = master_sink_valid;
assign master_sink_ready = packetizer_req_sink_ready;
assign packetizer_req_sink_first = master_sink_first;
assign packetizer_req_sink_last = master_sink_last;
assign packetizer_req_sink_payload_req_id = master_sink_payload_req_id;
assign packetizer_req_sink_payload_we = master_sink_payload_we;
assign packetizer_req_sink_payload_adr = master_sink_payload_adr;
assign packetizer_req_sink_payload_len = master_sink_payload_len;
assign packetizer_req_sink_payload_tag = master_sink_payload_tag;
assign packetizer_req_sink_payload_dat = master_sink_payload_dat;
assign packetizer_req_sink_payload_channel = master_sink_payload_channel;
assign packetizer_req_sink_payload_user_id = master_sink_payload_user_id;
assign master_source_valid = depacketizer_cmp_source_valid;
assign depacketizer_cmp_source_ready = master_source_ready;
assign master_source_first = depacketizer_cmp_source_first;
assign master_source_last = depacketizer_cmp_source_last;
assign master_source_payload_req_id = depacketizer_cmp_source_payload_req_id;
assign master_source_payload_cmp_id = depacketizer_cmp_source_payload_cmp_id;
assign master_source_payload_adr = depacketizer_cmp_source_payload_adr;
assign master_source_payload_len = depacketizer_cmp_source_payload_len;
assign master_source_payload_end = depacketizer_cmp_source_payload_end;
assign master_source_payload_err = depacketizer_cmp_source_payload_err;
assign master_source_payload_tag = depacketizer_cmp_source_payload_tag;
assign master_source_payload_dat = depacketizer_cmp_source_payload_dat;
assign master_source_payload_channel = depacketizer_cmp_source_payload_channel;
assign master_source_payload_user_id = depacketizer_cmp_source_payload_user_id;
assign depacketizer_header_extracter_sink_valid = depacketizer_sink_sink_valid;
assign depacketizer_sink_sink_ready = depacketizer_header_extracter_sink_ready;
assign depacketizer_header_extracter_sink_first = depacketizer_sink_sink_first;
assign depacketizer_header_extracter_sink_last = depacketizer_sink_sink_last;
assign depacketizer_header_extracter_sink_payload_dat = depacketizer_sink_sink_payload_dat;
assign depacketizer_header_extracter_sink_payload_be = depacketizer_sink_sink_payload_be;
assign depacketizer_endpoint0_ready = 1'd1;
assign depacketizer_dispatch_sink_valid = depacketizer_header_extracter_source_valid;
assign depacketizer_header_extracter_source_ready = depacketizer_dispatch_sink_ready;
assign depacketizer_dispatch_sink_first = depacketizer_header_extracter_source_first;
assign depacketizer_dispatch_sink_last = depacketizer_header_extracter_source_last;
assign depacketizer_dispatch_sink_payload_fmt = depacketizer_header_extracter_source_payload_header[30:29];
assign depacketizer_dispatch_sink_payload_type = depacketizer_header_extracter_source_payload_header[28:24];
always @(*) begin
    depacketizer_dispatch_sink_payload_dat <= 64'd0;
    depacketizer_dispatch_sink_payload_dat[31:0] <= {depacketizer_header_extracter_source_payload_dat[7:0], depacketizer_header_extracter_source_payload_dat[15:8], depacketizer_header_extracter_source_payload_dat[23:16], depacketizer_header_extracter_source_payload_dat[31:24]};
    depacketizer_dispatch_sink_payload_dat[63:32] <= {depacketizer_header_extracter_source_payload_dat[39:32], depacketizer_header_extracter_source_payload_dat[47:40], depacketizer_header_extracter_source_payload_dat[55:48], depacketizer_header_extracter_source_payload_dat[63:56]};
end
always @(*) begin
    depacketizer_dispatch_sink_payload_be <= 8'd0;
    depacketizer_dispatch_sink_payload_be[3:0] <= {depacketizer_header_extracter_source_payload_be[0], depacketizer_header_extracter_source_payload_be[1], depacketizer_header_extracter_source_payload_be[2], depacketizer_header_extracter_source_payload_be[3]};
    depacketizer_dispatch_sink_payload_be[7:4] <= {depacketizer_header_extracter_source_payload_be[4], depacketizer_header_extracter_source_payload_be[5], depacketizer_header_extracter_source_payload_be[6], depacketizer_header_extracter_source_payload_be[7]};
end
always @(*) begin
    depacketizer_dispatcher_sel0 <= 3'd0;
    depacketizer_dispatcher_sel0 <= 1'd0;
    if ((({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 1'd0) | ({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 7'd64))) begin
        depacketizer_dispatcher_sel0 <= 1'd1;
    end
    if ((({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 7'd74) | ({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 4'd10))) begin
        depacketizer_dispatcher_sel0 <= 2'd2;
    end
    if ((({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 3'd4) | ({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 7'd68))) begin
        depacketizer_dispatcher_sel0 <= 3'd4;
    end
    if ((({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 6'd52) | ({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 7'd116))) begin
        depacketizer_dispatcher_sel0 <= 2'd3;
    end
end
assign depacketizer_tlp_req_valid = depacketizer_endpoint1_valid;
assign depacketizer_endpoint1_ready = depacketizer_tlp_req_ready;
assign depacketizer_tlp_req_first = depacketizer_endpoint1_first;
assign depacketizer_tlp_req_last = depacketizer_endpoint1_last;
always @(*) begin
    depacketizer_tlp_req_payload_fmt <= 2'd0;
    depacketizer_tlp_req_payload_fmt <= depacketizer_endpoint1_payload_fmt;
    depacketizer_tlp_req_payload_fmt <= depacketizer_header_extracter_source_payload_header[30:29];
end
always @(*) begin
    depacketizer_tlp_req_payload_type <= 5'd0;
    depacketizer_tlp_req_payload_type <= depacketizer_endpoint1_payload_type;
    depacketizer_tlp_req_payload_type <= depacketizer_header_extracter_source_payload_header[28:24];
end
assign depacketizer_tlp_req_payload_dat = depacketizer_endpoint1_payload_dat;
assign depacketizer_tlp_req_payload_be = depacketizer_endpoint1_payload_be;
assign depacketizer_tlp_req_payload_address = depacketizer_header_extracter_source_payload_header[127:64];
assign depacketizer_tlp_req_payload_attr = depacketizer_header_extracter_source_payload_header[13:12];
assign depacketizer_tlp_req_payload_ep = depacketizer_header_extracter_source_payload_header[14];
assign depacketizer_tlp_req_payload_first_be = depacketizer_header_extracter_source_payload_header[35:32];
assign depacketizer_tlp_req_payload_last_be = depacketizer_header_extracter_source_payload_header[39:36];
assign depacketizer_tlp_req_payload_length = depacketizer_header_extracter_source_payload_header[9:0];
assign depacketizer_tlp_req_payload_requester_id = depacketizer_header_extracter_source_payload_header[63:48];
assign depacketizer_tlp_req_payload_tag = depacketizer_header_extracter_source_payload_header[47:40];
assign depacketizer_tlp_req_payload_tc = depacketizer_header_extracter_source_payload_header[22:20];
assign depacketizer_tlp_req_payload_td = depacketizer_header_extracter_source_payload_header[15];
assign depacketizer_req_source_valid = depacketizer_tlp_req_valid;
assign depacketizer_req_source_payload_we = (depacketizer_tlp_req_valid & ({depacketizer_tlp_req_payload_fmt, depacketizer_tlp_req_payload_type} == 7'd64));
assign depacketizer_tlp_req_ready = depacketizer_req_source_ready;
assign depacketizer_req_source_first = depacketizer_tlp_req_first;
assign depacketizer_req_source_last = depacketizer_tlp_req_last;
assign depacketizer_req_source_payload_adr = ($signed({1'd0, depacketizer_tlp_req_payload_address}) & -33'd4227858433);
assign depacketizer_req_source_payload_len = depacketizer_tlp_req_payload_length;
assign depacketizer_req_source_payload_req_id = depacketizer_tlp_req_payload_requester_id;
assign depacketizer_req_source_payload_tag = depacketizer_tlp_req_payload_tag;
assign depacketizer_req_source_payload_dat = depacketizer_tlp_req_payload_dat;
assign depacketizer_tlp_cmp_valid = depacketizer_endpoint2_valid;
assign depacketizer_endpoint2_ready = depacketizer_tlp_cmp_ready;
assign depacketizer_tlp_cmp_first = depacketizer_endpoint2_first;
assign depacketizer_tlp_cmp_last = depacketizer_endpoint2_last;
always @(*) begin
    depacketizer_tlp_cmp_payload_fmt <= 2'd0;
    depacketizer_tlp_cmp_payload_fmt <= depacketizer_endpoint2_payload_fmt;
    depacketizer_tlp_cmp_payload_fmt <= depacketizer_header_extracter_source_payload_header[30:29];
end
always @(*) begin
    depacketizer_tlp_cmp_payload_type <= 5'd0;
    depacketizer_tlp_cmp_payload_type <= depacketizer_endpoint2_payload_type;
    depacketizer_tlp_cmp_payload_type <= depacketizer_header_extracter_source_payload_header[28:24];
end
assign depacketizer_tlp_cmp_payload_dat = depacketizer_endpoint2_payload_dat;
assign depacketizer_tlp_cmp_payload_be = depacketizer_endpoint2_payload_be;
assign depacketizer_tlp_cmp_payload_attr = depacketizer_header_extracter_source_payload_header[13:12];
assign depacketizer_tlp_cmp_payload_bcm = depacketizer_header_extracter_source_payload_header[44];
assign depacketizer_tlp_cmp_payload_byte_count = depacketizer_header_extracter_source_payload_header[43:32];
assign depacketizer_tlp_cmp_payload_completer_id = depacketizer_header_extracter_source_payload_header[63:48];
assign depacketizer_tlp_cmp_payload_ep = depacketizer_header_extracter_source_payload_header[14];
assign depacketizer_tlp_cmp_payload_length = depacketizer_header_extracter_source_payload_header[9:0];
assign depacketizer_tlp_cmp_payload_lower_address = depacketizer_header_extracter_source_payload_header[70:64];
assign depacketizer_tlp_cmp_payload_requester_id = depacketizer_header_extracter_source_payload_header[95:80];
assign depacketizer_tlp_cmp_payload_status = depacketizer_header_extracter_source_payload_header[47:45];
assign depacketizer_tlp_cmp_payload_tag = depacketizer_header_extracter_source_payload_header[79:72];
assign depacketizer_tlp_cmp_payload_tc = depacketizer_header_extracter_source_payload_header[22:20];
assign depacketizer_tlp_cmp_payload_td = depacketizer_header_extracter_source_payload_header[15];
assign depacketizer_cmp_source_valid = depacketizer_tlp_cmp_valid;
assign depacketizer_tlp_cmp_ready = depacketizer_cmp_source_ready;
assign depacketizer_cmp_source_first = depacketizer_tlp_cmp_first;
assign depacketizer_cmp_source_last = depacketizer_tlp_cmp_last;
assign depacketizer_cmp_source_payload_len = depacketizer_tlp_cmp_payload_length;
assign depacketizer_cmp_source_payload_end = (depacketizer_tlp_cmp_payload_length == depacketizer_tlp_cmp_payload_byte_count[11:2]);
assign depacketizer_cmp_source_payload_adr = depacketizer_tlp_cmp_payload_lower_address;
assign depacketizer_cmp_source_payload_req_id = depacketizer_tlp_cmp_payload_requester_id;
assign depacketizer_cmp_source_payload_cmp_id = depacketizer_tlp_cmp_payload_completer_id;
assign depacketizer_cmp_source_payload_err = (depacketizer_tlp_cmp_payload_status != 1'd0);
assign depacketizer_cmp_source_payload_tag = depacketizer_tlp_cmp_payload_tag;
assign depacketizer_cmp_source_payload_dat = depacketizer_tlp_cmp_payload_dat;
assign depacketizer_tlp_conf_valid = depacketizer_endpoint4_valid;
assign depacketizer_endpoint4_ready = depacketizer_tlp_conf_ready;
assign depacketizer_tlp_conf_first = depacketizer_endpoint4_first;
assign depacketizer_tlp_conf_last = depacketizer_endpoint4_last;
always @(*) begin
    depacketizer_tlp_conf_payload_fmt <= 2'd0;
    depacketizer_tlp_conf_payload_fmt <= depacketizer_endpoint4_payload_fmt;
    depacketizer_tlp_conf_payload_fmt <= depacketizer_header_extracter_source_payload_header[30:29];
end
always @(*) begin
    depacketizer_tlp_conf_payload_type <= 5'd0;
    depacketizer_tlp_conf_payload_type <= depacketizer_endpoint4_payload_type;
    depacketizer_tlp_conf_payload_type <= depacketizer_header_extracter_source_payload_header[28:24];
end
assign depacketizer_tlp_conf_payload_dat = depacketizer_endpoint4_payload_dat;
assign depacketizer_tlp_conf_payload_be = depacketizer_endpoint4_payload_be;
assign depacketizer_tlp_conf_payload_bus_number = depacketizer_header_extracter_source_payload_header[95:88];
assign depacketizer_tlp_conf_payload_device_no = depacketizer_header_extracter_source_payload_header[87:83];
assign depacketizer_tlp_conf_payload_ep = depacketizer_header_extracter_source_payload_header[14];
assign depacketizer_tlp_conf_payload_ext_reg = depacketizer_header_extracter_source_payload_header[74:72];
assign depacketizer_tlp_conf_payload_first_be = depacketizer_header_extracter_source_payload_header[35:32];
assign depacketizer_tlp_conf_payload_func = depacketizer_header_extracter_source_payload_header[82:80];
assign depacketizer_tlp_conf_payload_register_no = depacketizer_header_extracter_source_payload_header[71:66];
assign depacketizer_tlp_conf_payload_requester_id = depacketizer_header_extracter_source_payload_header[63:48];
assign depacketizer_tlp_conf_payload_tag = depacketizer_header_extracter_source_payload_header[47:40];
assign depacketizer_tlp_conf_payload_td = depacketizer_header_extracter_source_payload_header[15];
assign depacketizer_conf_source_valid = depacketizer_tlp_conf_valid;
assign depacketizer_tlp_conf_ready = depacketizer_conf_source_ready;
assign depacketizer_conf_source_first = depacketizer_tlp_conf_first;
assign depacketizer_conf_source_last = depacketizer_tlp_conf_last;
always @(*) begin
    depacketizer_conf_source_payload_we <= 1'd0;
    if (({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 3'd4)) begin
        depacketizer_conf_source_payload_we <= 1'd0;
    end
    if (({depacketizer_dispatch_sink_payload_fmt, depacketizer_dispatch_sink_payload_type} == 7'd68)) begin
        depacketizer_conf_source_payload_we <= 1'd1;
    end
end
assign depacketizer_conf_source_payload_req_id = depacketizer_tlp_conf_payload_requester_id;
assign depacketizer_conf_source_payload_bus_number = depacketizer_tlp_conf_payload_bus_number;
assign depacketizer_conf_source_payload_device_no = depacketizer_tlp_conf_payload_device_no;
assign depacketizer_conf_source_payload_func = depacketizer_tlp_conf_payload_func;
assign depacketizer_conf_source_payload_ext_reg = depacketizer_tlp_conf_payload_ext_reg;
assign depacketizer_conf_source_payload_register_no = depacketizer_tlp_conf_payload_register_no;
assign depacketizer_conf_source_payload_tag = depacketizer_tlp_conf_payload_tag;
assign depacketizer_conf_source_payload_dat = depacketizer_tlp_conf_payload_dat;
assign depacketizer_tlp_ptm_valid = depacketizer_endpoint3_valid;
assign depacketizer_endpoint3_ready = depacketizer_tlp_ptm_ready;
assign depacketizer_tlp_ptm_first = depacketizer_endpoint3_first;
assign depacketizer_tlp_ptm_last = depacketizer_endpoint3_last;
always @(*) begin
    depacketizer_tlp_ptm_payload_fmt <= 2'd0;
    depacketizer_tlp_ptm_payload_fmt <= depacketizer_endpoint3_payload_fmt;
    depacketizer_tlp_ptm_payload_fmt <= depacketizer_header_extracter_source_payload_header[30:29];
end
always @(*) begin
    depacketizer_tlp_ptm_payload_type <= 5'd0;
    depacketizer_tlp_ptm_payload_type <= depacketizer_endpoint3_payload_type;
    depacketizer_tlp_ptm_payload_type <= depacketizer_header_extracter_source_payload_header[28:24];
end
assign depacketizer_tlp_ptm_payload_dat = depacketizer_endpoint3_payload_dat;
assign depacketizer_tlp_ptm_payload_be = depacketizer_endpoint3_payload_be;
assign depacketizer_tlp_ptm_payload_attr = depacketizer_header_extracter_source_payload_header[13:12];
assign depacketizer_tlp_ptm_payload_ep = depacketizer_header_extracter_source_payload_header[14];
assign depacketizer_tlp_ptm_payload_length = depacketizer_header_extracter_source_payload_header[9:0];
assign depacketizer_tlp_ptm_payload_ln = depacketizer_header_extracter_source_payload_header[17];
assign depacketizer_tlp_ptm_payload_master_time = depacketizer_header_extracter_source_payload_header[127:64];
assign depacketizer_tlp_ptm_payload_message_code = depacketizer_header_extracter_source_payload_header[39:32];
assign depacketizer_tlp_ptm_payload_requester_id = depacketizer_header_extracter_source_payload_header[63:48];
assign depacketizer_tlp_ptm_payload_tc = depacketizer_header_extracter_source_payload_header[22:20];
assign depacketizer_tlp_ptm_payload_td = depacketizer_header_extracter_source_payload_header[15];
assign depacketizer_tlp_ptm_payload_th = depacketizer_header_extracter_source_payload_header[16];
assign depacketizer_ptm_source_valid = depacketizer_tlp_ptm_valid;
assign depacketizer_tlp_ptm_ready = depacketizer_ptm_source_ready;
assign depacketizer_ptm_source_first = depacketizer_tlp_ptm_first;
assign depacketizer_ptm_source_last = depacketizer_tlp_ptm_last;
assign depacketizer_ptm_source_payload_requester_id = depacketizer_tlp_ptm_payload_requester_id;
assign depacketizer_ptm_source_payload_length = depacketizer_tlp_ptm_payload_length;
assign depacketizer_ptm_source_payload_message_code = depacketizer_tlp_ptm_payload_message_code;
assign depacketizer_ptm_source_payload_master_time = depacketizer_tlp_ptm_payload_master_time;
assign depacketizer_ptm_source_payload_dat = depacketizer_tlp_ptm_payload_dat;
always @(*) begin
    depacketizer_header_extracter_source_payload_dat <= 64'd0;
    depacketizer_header_extracter_source_payload_dat[31:0] <= depacketizer_header_extracter_dat[63:32];
    depacketizer_header_extracter_source_payload_dat[63:32] <= depacketizer_header_extracter_sink_payload_dat[31:0];
end
always @(*) begin
    depacketizer_header_extracter_source_payload_be <= 8'd0;
    depacketizer_header_extracter_source_payload_be[3:0] <= depacketizer_header_extracter_be[7:4];
    depacketizer_header_extracter_source_payload_be[7:4] <= depacketizer_header_extracter_sink_payload_be[3:0];
end
always @(*) begin
    litepcieendpoint_next_state <= 2'd0;
    litepcieendpoint_next_state <= litepcieendpoint_state;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                if (depacketizer_header_extracter_count) begin
                    litepcieendpoint_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if ((depacketizer_header_extracter_source_valid & depacketizer_header_extracter_source_ready)) begin
                if (depacketizer_header_extracter_source_last) begin
                    litepcieendpoint_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value_ce0 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
        end
        2'd2: begin
            if ((depacketizer_header_extracter_source_valid & depacketizer_header_extracter_source_ready)) begin
                depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_source_last <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
        end
        2'd2: begin
            depacketizer_header_extracter_source_last <= (depacketizer_header_extracter_sink_last | depacketizer_header_extracter_last);
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value1 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                if (depacketizer_header_extracter_count) begin
                    if (depacketizer_header_extracter_sink_last) begin
                        depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value1 <= 1'd1;
                    end
                end
            end
        end
        2'd2: begin
        end
        default: begin
            depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value_ce1 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                if (depacketizer_header_extracter_count) begin
                    if (depacketizer_header_extracter_sink_last) begin
                        depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value_ce1 <= 1'd1;
                    end
                end
            end
        end
        2'd2: begin
        end
        default: begin
            depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value_ce1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value2 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value2 <= (depacketizer_header_extracter_count + 1'd1);
            end
        end
        2'd2: begin
        end
        default: begin
            depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value2 <= 1'd0;
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value_ce2 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value_ce2 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
            depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value_ce2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value0 <= 32'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value0 <= depacketizer_header_extracter_source_payload_header[95:64];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value_ce0 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value_ce0 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value1 <= 32'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value1 <= depacketizer_header_extracter_source_payload_header[127:96];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value_ce1 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value_ce1 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value2 <= 32'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value2 <= depacketizer_header_extracter_sink_payload_dat[31:0];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value_ce2 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value_ce2 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value3 <= 32'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value3 <= depacketizer_header_extracter_sink_payload_dat[63:32];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_next_value_ce3 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            if (depacketizer_header_extracter_sink_valid) begin
                litepcieendpoint_next_value_ce3 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value0 <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
        end
        2'd2: begin
            if ((depacketizer_header_extracter_source_valid & depacketizer_header_extracter_source_ready)) begin
                depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value0 <= 1'd0;
            end
        end
        default: begin
            depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_sink_ready <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
            depacketizer_header_extracter_sink_ready <= 1'd1;
        end
        2'd2: begin
            if ((depacketizer_header_extracter_source_valid & depacketizer_header_extracter_source_ready)) begin
                depacketizer_header_extracter_sink_ready <= (1'd1 & (~depacketizer_header_extracter_last));
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_source_valid <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
        end
        2'd2: begin
            depacketizer_header_extracter_source_valid <= (depacketizer_header_extracter_sink_valid | depacketizer_header_extracter_last);
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_header_extracter_source_first <= 1'd0;
    case (litepcieendpoint_state)
        1'd1: begin
        end
        2'd2: begin
            depacketizer_header_extracter_source_first <= depacketizer_header_extracter_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_dispatcher_sel1 <= 3'd0;
    if (depacketizer_dispatcher_first) begin
        depacketizer_dispatcher_sel1 <= depacketizer_dispatcher_sel0;
    end else begin
        depacketizer_dispatcher_sel1 <= depacketizer_dispatcher_sel_ongoing;
    end
end
always @(*) begin
    depacketizer_dispatch_sink_ready <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_dispatch_sink_ready <= depacketizer_endpoint0_ready;
        end
        1'd1: begin
            depacketizer_dispatch_sink_ready <= depacketizer_endpoint1_ready;
        end
        2'd2: begin
            depacketizer_dispatch_sink_ready <= depacketizer_endpoint2_ready;
        end
        2'd3: begin
            depacketizer_dispatch_sink_ready <= depacketizer_endpoint3_ready;
        end
        3'd4: begin
            depacketizer_dispatch_sink_ready <= depacketizer_endpoint4_ready;
        end
        default: begin
            depacketizer_dispatch_sink_ready <= 1'd1;
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_valid <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_valid <= depacketizer_dispatch_sink_valid;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_first <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_first <= depacketizer_dispatch_sink_first;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_last <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_last <= depacketizer_dispatch_sink_last;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_payload_fmt <= 2'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_payload_fmt <= depacketizer_dispatch_sink_payload_fmt;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_payload_type <= 5'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_payload_type <= depacketizer_dispatch_sink_payload_type;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_payload_dat <= 64'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_payload_dat <= depacketizer_dispatch_sink_payload_dat;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint0_payload_be <= 8'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
            depacketizer_endpoint0_payload_be <= depacketizer_dispatch_sink_payload_be;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_valid <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_valid <= depacketizer_dispatch_sink_valid;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_first <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_first <= depacketizer_dispatch_sink_first;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_last <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_last <= depacketizer_dispatch_sink_last;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_payload_fmt <= 2'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_payload_fmt <= depacketizer_dispatch_sink_payload_fmt;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_payload_type <= 5'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_payload_type <= depacketizer_dispatch_sink_payload_type;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_payload_dat <= 64'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_payload_dat <= depacketizer_dispatch_sink_payload_dat;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint1_payload_be <= 8'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            depacketizer_endpoint1_payload_be <= depacketizer_dispatch_sink_payload_be;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_valid <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_valid <= depacketizer_dispatch_sink_valid;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_first <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_first <= depacketizer_dispatch_sink_first;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_last <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_last <= depacketizer_dispatch_sink_last;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_payload_fmt <= 2'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_payload_fmt <= depacketizer_dispatch_sink_payload_fmt;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_payload_type <= 5'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_payload_type <= depacketizer_dispatch_sink_payload_type;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_payload_dat <= 64'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_payload_dat <= depacketizer_dispatch_sink_payload_dat;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint2_payload_be <= 8'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            depacketizer_endpoint2_payload_be <= depacketizer_dispatch_sink_payload_be;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_valid <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_valid <= depacketizer_dispatch_sink_valid;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_first <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_first <= depacketizer_dispatch_sink_first;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_last <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_last <= depacketizer_dispatch_sink_last;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_payload_fmt <= 2'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_payload_fmt <= depacketizer_dispatch_sink_payload_fmt;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_payload_type <= 5'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_payload_type <= depacketizer_dispatch_sink_payload_type;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_payload_dat <= 64'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_payload_dat <= depacketizer_dispatch_sink_payload_dat;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint3_payload_be <= 8'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            depacketizer_endpoint3_payload_be <= depacketizer_dispatch_sink_payload_be;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_valid <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_valid <= depacketizer_dispatch_sink_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_first <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_first <= depacketizer_dispatch_sink_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_last <= 1'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_last <= depacketizer_dispatch_sink_last;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_payload_fmt <= 2'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_payload_fmt <= depacketizer_dispatch_sink_payload_fmt;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_payload_type <= 5'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_payload_type <= depacketizer_dispatch_sink_payload_type;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_payload_dat <= 64'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_payload_dat <= depacketizer_dispatch_sink_payload_dat;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_endpoint4_payload_be <= 8'd0;
    case (depacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            depacketizer_endpoint4_payload_be <= depacketizer_dispatch_sink_payload_be;
        end
        default: begin
        end
    endcase
end
assign depacketizer_dispatcher_last = ((depacketizer_dispatch_sink_valid & depacketizer_dispatch_sink_last) & depacketizer_dispatch_sink_ready);
assign depacketizer_dispatcher_ongoing0 = ((depacketizer_dispatch_sink_valid | depacketizer_dispatcher_ongoing1) & (~depacketizer_dispatcher_last));
assign packetizer_tlp_req_valid = packetizer_req_sink_valid;
assign packetizer_req_sink_ready = packetizer_tlp_req_ready;
assign packetizer_tlp_req_first = packetizer_req_sink_first;
assign packetizer_tlp_req_last = packetizer_req_sink_last;
assign packetizer_tlp_req_payload_type = 1'd0;
always @(*) begin
    packetizer_tlp_req_payload_fmt <= 2'd0;
    if (packetizer_req_sink_payload_we) begin
        packetizer_tlp_req_payload_fmt <= 2'd2;
    end else begin
        packetizer_tlp_req_payload_fmt <= 1'd0;
    end
end
assign packetizer_tlp_req_payload_address = packetizer_req_sink_payload_adr;
assign packetizer_tlp_req_payload_tc = 1'd0;
assign packetizer_tlp_req_payload_td = 1'd0;
assign packetizer_tlp_req_payload_ep = 1'd0;
assign packetizer_tlp_req_payload_attr = 1'd0;
assign packetizer_tlp_req_payload_length = packetizer_req_sink_payload_len;
assign packetizer_tlp_req_payload_requester_id = packetizer_req_sink_payload_req_id;
assign packetizer_tlp_req_payload_tag = packetizer_req_sink_payload_tag;
always @(*) begin
    packetizer_tlp_req_payload_last_be <= 4'd0;
    if ((packetizer_req_sink_payload_len > 1'd1)) begin
        packetizer_tlp_req_payload_last_be <= 4'd15;
    end else begin
        packetizer_tlp_req_payload_last_be <= 1'd0;
    end
end
assign packetizer_tlp_req_payload_first_be = 4'd15;
assign packetizer_tlp_req_payload_dat = packetizer_req_sink_payload_dat;
always @(*) begin
    packetizer_tlp_req_payload_be <= 8'd0;
    if (packetizer_req_sink_payload_we) begin
        if ((packetizer_req_sink_payload_len == 1'd1)) begin
            packetizer_tlp_req_payload_be <= 4'd15;
        end else begin
            packetizer_tlp_req_payload_be <= 8'd255;
        end
    end else begin
        packetizer_tlp_req_payload_be <= 1'd0;
    end
end
assign packetizer_tlp_raw_req_valid = packetizer_tlp_req_valid;
assign packetizer_tlp_req_ready = packetizer_tlp_raw_req_ready;
assign packetizer_tlp_raw_req_first = packetizer_tlp_req_first;
assign packetizer_tlp_raw_req_last = packetizer_tlp_req_last;
assign packetizer_tlp_raw_req_payload_dat = packetizer_tlp_req_payload_dat;
assign packetizer_tlp_raw_req_payload_be = packetizer_tlp_req_payload_be;
assign packetizer_tlp_raw_req_payload_fmt = packetizer_tlp_req_payload_fmt;
always @(*) begin
    packetizer_tlp_raw_req_header <= 128'd0;
    packetizer_tlp_raw_req_header[127:64] <= packetizer_tlp_req_payload_address;
    packetizer_tlp_raw_req_header[13:12] <= packetizer_tlp_req_payload_attr;
    packetizer_tlp_raw_req_header[14] <= packetizer_tlp_req_payload_ep;
    packetizer_tlp_raw_req_header[35:32] <= packetizer_tlp_req_payload_first_be;
    packetizer_tlp_raw_req_header[30:29] <= packetizer_tlp_req_payload_fmt;
    packetizer_tlp_raw_req_header[39:36] <= packetizer_tlp_req_payload_last_be;
    packetizer_tlp_raw_req_header[9:0] <= packetizer_tlp_req_payload_length;
    packetizer_tlp_raw_req_header[63:48] <= packetizer_tlp_req_payload_requester_id;
    packetizer_tlp_raw_req_header[47:40] <= packetizer_tlp_req_payload_tag;
    packetizer_tlp_raw_req_header[22:20] <= packetizer_tlp_req_payload_tc;
    packetizer_tlp_raw_req_header[15] <= packetizer_tlp_req_payload_td;
    packetizer_tlp_raw_req_header[28:24] <= packetizer_tlp_req_payload_type;
end
always @(*) begin
    packetizer_tlp_raw_req_payload_header <= 128'd0;
    packetizer_tlp_raw_req_payload_header[31:0] <= {packetizer_tlp_raw_req_header[7:0], packetizer_tlp_raw_req_header[15:8], packetizer_tlp_raw_req_header[23:16], packetizer_tlp_raw_req_header[31:24]};
    packetizer_tlp_raw_req_payload_header[63:32] <= {packetizer_tlp_raw_req_header[39:32], packetizer_tlp_raw_req_header[47:40], packetizer_tlp_raw_req_header[55:48], packetizer_tlp_raw_req_header[63:56]};
    packetizer_tlp_raw_req_payload_header[95:64] <= {packetizer_tlp_raw_req_header[71:64], packetizer_tlp_raw_req_header[79:72], packetizer_tlp_raw_req_header[87:80], packetizer_tlp_raw_req_header[95:88]};
    packetizer_tlp_raw_req_payload_header[127:96] <= {packetizer_tlp_raw_req_header[103:96], packetizer_tlp_raw_req_header[111:104], packetizer_tlp_raw_req_header[119:112], packetizer_tlp_raw_req_header[127:120]};
end
assign packetizer_tlp_cmp_valid = packetizer_cmp_sink_valid;
assign packetizer_cmp_sink_ready = packetizer_tlp_cmp_ready;
assign packetizer_tlp_cmp_first = packetizer_cmp_sink_first;
assign packetizer_tlp_cmp_last = packetizer_cmp_sink_last;
assign packetizer_tlp_cmp_payload_tc = 1'd0;
assign packetizer_tlp_cmp_payload_td = 1'd0;
assign packetizer_tlp_cmp_payload_ep = 1'd0;
assign packetizer_tlp_cmp_payload_attr = 1'd0;
assign packetizer_tlp_cmp_payload_length = packetizer_cmp_sink_payload_len;
assign packetizer_tlp_cmp_payload_completer_id = packetizer_cmp_sink_payload_cmp_id;
always @(*) begin
    packetizer_tlp_cmp_payload_status <= 3'd0;
    if (packetizer_cmp_sink_payload_err) begin
        packetizer_tlp_cmp_payload_status <= 1'd1;
    end else begin
        packetizer_tlp_cmp_payload_status <= 1'd0;
    end
end
always @(*) begin
    packetizer_tlp_cmp_payload_fmt <= 2'd0;
    if (packetizer_cmp_sink_payload_err) begin
        packetizer_tlp_cmp_payload_fmt <= 1'd0;
    end else begin
        packetizer_tlp_cmp_payload_fmt <= 2'd2;
    end
end
always @(*) begin
    packetizer_tlp_cmp_payload_type <= 5'd0;
    if (packetizer_cmp_sink_payload_err) begin
        packetizer_tlp_cmp_payload_type <= 4'd10;
    end else begin
        packetizer_tlp_cmp_payload_type <= 4'd10;
    end
end
assign packetizer_tlp_cmp_payload_bcm = 1'd0;
assign packetizer_tlp_cmp_payload_byte_count = (packetizer_cmp_sink_payload_len * 3'd4);
assign packetizer_tlp_cmp_payload_requester_id = packetizer_cmp_sink_payload_req_id;
assign packetizer_tlp_cmp_payload_tag = packetizer_cmp_sink_payload_tag;
assign packetizer_tlp_cmp_payload_lower_address = packetizer_cmp_sink_payload_adr;
assign packetizer_tlp_cmp_payload_dat = packetizer_cmp_sink_payload_dat;
always @(*) begin
    packetizer_tlp_cmp_payload_be <= 8'd0;
    if ((packetizer_cmp_sink_last & packetizer_cmp_sink_first)) begin
        packetizer_tlp_cmp_payload_be <= 4'd15;
    end else begin
        packetizer_tlp_cmp_payload_be <= 8'd255;
    end
end
assign packetizer_tlp_raw_cmp_valid = packetizer_tlp_cmp_valid;
assign packetizer_tlp_cmp_ready = packetizer_tlp_raw_cmp_ready;
assign packetizer_tlp_raw_cmp_first = packetizer_tlp_cmp_first;
assign packetizer_tlp_raw_cmp_last = packetizer_tlp_cmp_last;
assign packetizer_tlp_raw_cmp_payload_dat = packetizer_tlp_cmp_payload_dat;
assign packetizer_tlp_raw_cmp_payload_be = packetizer_tlp_cmp_payload_be;
assign packetizer_tlp_raw_cmp_payload_fmt = packetizer_tlp_cmp_payload_fmt;
always @(*) begin
    packetizer_tlp_raw_cmp_header <= 128'd0;
    packetizer_tlp_raw_cmp_header[13:12] <= packetizer_tlp_cmp_payload_attr;
    packetizer_tlp_raw_cmp_header[44] <= packetizer_tlp_cmp_payload_bcm;
    packetizer_tlp_raw_cmp_header[43:32] <= packetizer_tlp_cmp_payload_byte_count;
    packetizer_tlp_raw_cmp_header[63:48] <= packetizer_tlp_cmp_payload_completer_id;
    packetizer_tlp_raw_cmp_header[14] <= packetizer_tlp_cmp_payload_ep;
    packetizer_tlp_raw_cmp_header[30:29] <= packetizer_tlp_cmp_payload_fmt;
    packetizer_tlp_raw_cmp_header[9:0] <= packetizer_tlp_cmp_payload_length;
    packetizer_tlp_raw_cmp_header[70:64] <= packetizer_tlp_cmp_payload_lower_address;
    packetizer_tlp_raw_cmp_header[95:80] <= packetizer_tlp_cmp_payload_requester_id;
    packetizer_tlp_raw_cmp_header[47:45] <= packetizer_tlp_cmp_payload_status;
    packetizer_tlp_raw_cmp_header[79:72] <= packetizer_tlp_cmp_payload_tag;
    packetizer_tlp_raw_cmp_header[22:20] <= packetizer_tlp_cmp_payload_tc;
    packetizer_tlp_raw_cmp_header[15] <= packetizer_tlp_cmp_payload_td;
    packetizer_tlp_raw_cmp_header[28:24] <= packetizer_tlp_cmp_payload_type;
end
always @(*) begin
    packetizer_tlp_raw_cmp_payload_header <= 128'd0;
    packetizer_tlp_raw_cmp_payload_header[31:0] <= {packetizer_tlp_raw_cmp_header[7:0], packetizer_tlp_raw_cmp_header[15:8], packetizer_tlp_raw_cmp_header[23:16], packetizer_tlp_raw_cmp_header[31:24]};
    packetizer_tlp_raw_cmp_payload_header[63:32] <= {packetizer_tlp_raw_cmp_header[39:32], packetizer_tlp_raw_cmp_header[47:40], packetizer_tlp_raw_cmp_header[55:48], packetizer_tlp_raw_cmp_header[63:56]};
    packetizer_tlp_raw_cmp_payload_header[95:64] <= {packetizer_tlp_raw_cmp_header[71:64], packetizer_tlp_raw_cmp_header[79:72], packetizer_tlp_raw_cmp_header[87:80], packetizer_tlp_raw_cmp_header[95:88]};
    packetizer_tlp_raw_cmp_payload_header[127:96] <= {packetizer_tlp_raw_cmp_header[103:96], packetizer_tlp_raw_cmp_header[111:104], packetizer_tlp_raw_cmp_header[119:112], packetizer_tlp_raw_cmp_header[127:120]};
end
assign packetizer_tlp_ptm_valid = packetizer_ptm_sink_valid;
assign packetizer_ptm_sink_ready = packetizer_tlp_ptm_ready;
assign packetizer_tlp_ptm_first = packetizer_ptm_sink_first;
assign packetizer_tlp_ptm_last = packetizer_ptm_sink_last;
assign packetizer_tlp_ptm_payload_tc = 1'd0;
assign packetizer_tlp_ptm_payload_ln = 1'd0;
assign packetizer_tlp_ptm_payload_th = 1'd0;
assign packetizer_tlp_ptm_payload_td = 1'd0;
assign packetizer_tlp_ptm_payload_ep = 1'd0;
assign packetizer_tlp_ptm_payload_attr = 1'd0;
assign packetizer_tlp_ptm_payload_length = packetizer_ptm_sink_payload_length;
assign packetizer_tlp_ptm_payload_requester_id = packetizer_ptm_sink_payload_requester_id;
assign packetizer_tlp_ptm_payload_message_code = packetizer_ptm_sink_payload_message_code;
assign packetizer_tlp_ptm_payload_master_time = packetizer_ptm_sink_payload_master_time;
always @(*) begin
    packetizer_tlp_ptm_payload_fmt <= 2'd0;
    if (packetizer_ptm_sink_payload_request) begin
        packetizer_tlp_ptm_payload_fmt <= 1'd1;
    end
    if (packetizer_ptm_sink_payload_response) begin
        packetizer_tlp_ptm_payload_fmt <= 2'd3;
    end
end
always @(*) begin
    packetizer_tlp_ptm_payload_type <= 5'd0;
    if (packetizer_ptm_sink_payload_request) begin
        packetizer_tlp_ptm_payload_type <= 5'd20;
    end
    if (packetizer_ptm_sink_payload_response) begin
        packetizer_tlp_ptm_payload_type <= 5'd20;
    end
end
always @(*) begin
    packetizer_tlp_ptm_payload_dat <= 64'd0;
    if (packetizer_ptm_sink_payload_response) begin
        packetizer_tlp_ptm_payload_dat <= packetizer_ptm_sink_payload_dat;
    end
end
always @(*) begin
    packetizer_tlp_ptm_payload_be <= 8'd0;
    if (packetizer_ptm_sink_payload_response) begin
        packetizer_tlp_ptm_payload_be <= 8'd255;
    end
end
assign packetizer_tlp_raw_ptm_valid = packetizer_tlp_ptm_valid;
assign packetizer_tlp_ptm_ready = packetizer_tlp_raw_ptm_ready;
assign packetizer_tlp_raw_ptm_first = packetizer_tlp_ptm_first;
assign packetizer_tlp_raw_ptm_last = packetizer_tlp_ptm_last;
assign packetizer_tlp_raw_ptm_payload_dat = packetizer_tlp_ptm_payload_dat;
assign packetizer_tlp_raw_ptm_payload_be = packetizer_tlp_ptm_payload_be;
assign packetizer_tlp_raw_ptm_payload_fmt = packetizer_tlp_ptm_payload_fmt;
always @(*) begin
    packetizer_tlp_raw_ptm_header <= 128'd0;
    packetizer_tlp_raw_ptm_header[13:12] <= packetizer_tlp_ptm_payload_attr;
    packetizer_tlp_raw_ptm_header[14] <= packetizer_tlp_ptm_payload_ep;
    packetizer_tlp_raw_ptm_header[30:29] <= packetizer_tlp_ptm_payload_fmt;
    packetizer_tlp_raw_ptm_header[9:0] <= packetizer_tlp_ptm_payload_length;
    packetizer_tlp_raw_ptm_header[17] <= packetizer_tlp_ptm_payload_ln;
    packetizer_tlp_raw_ptm_header[127:64] <= packetizer_tlp_ptm_payload_master_time;
    packetizer_tlp_raw_ptm_header[39:32] <= packetizer_tlp_ptm_payload_message_code;
    packetizer_tlp_raw_ptm_header[63:48] <= packetizer_tlp_ptm_payload_requester_id;
    packetizer_tlp_raw_ptm_header[22:20] <= packetizer_tlp_ptm_payload_tc;
    packetizer_tlp_raw_ptm_header[15] <= packetizer_tlp_ptm_payload_td;
    packetizer_tlp_raw_ptm_header[16] <= packetizer_tlp_ptm_payload_th;
    packetizer_tlp_raw_ptm_header[28:24] <= packetizer_tlp_ptm_payload_type;
end
always @(*) begin
    packetizer_tlp_raw_ptm_payload_header <= 128'd0;
    packetizer_tlp_raw_ptm_payload_header[31:0] <= {packetizer_tlp_raw_ptm_header[7:0], packetizer_tlp_raw_ptm_header[15:8], packetizer_tlp_raw_ptm_header[23:16], packetizer_tlp_raw_ptm_header[31:24]};
    packetizer_tlp_raw_ptm_payload_header[63:32] <= {packetizer_tlp_raw_ptm_header[39:32], packetizer_tlp_raw_ptm_header[47:40], packetizer_tlp_raw_ptm_header[55:48], packetizer_tlp_raw_ptm_header[63:56]};
    packetizer_tlp_raw_ptm_payload_header[95:64] <= {packetizer_tlp_raw_ptm_header[71:64], packetizer_tlp_raw_ptm_header[79:72], packetizer_tlp_raw_ptm_header[87:80], packetizer_tlp_raw_ptm_header[95:88]};
    packetizer_tlp_raw_ptm_payload_header[127:96] <= {packetizer_tlp_raw_ptm_header[103:96], packetizer_tlp_raw_ptm_header[111:104], packetizer_tlp_raw_ptm_header[119:112], packetizer_tlp_raw_ptm_header[127:120]};
end
assign packetizer_tlp_raw_buf_sink_sink_valid = packetizer_tlp_raw_valid;
assign packetizer_tlp_raw_ready = packetizer_tlp_raw_buf_sink_sink_ready;
assign packetizer_tlp_raw_buf_sink_sink_first = packetizer_tlp_raw_first;
assign packetizer_tlp_raw_buf_sink_sink_last = packetizer_tlp_raw_last;
assign packetizer_tlp_raw_buf_sink_sink_payload_fmt = packetizer_tlp_raw_payload_fmt;
assign packetizer_tlp_raw_buf_sink_sink_payload_header = packetizer_tlp_raw_payload_header;
assign packetizer_tlp_raw_buf_sink_sink_payload_dat = packetizer_tlp_raw_payload_dat;
assign packetizer_tlp_raw_buf_sink_sink_payload_be = packetizer_tlp_raw_payload_be;
assign packetizer_tlp_raw_d_valid = packetizer_tlp_raw_buf_source_source_valid;
assign packetizer_tlp_raw_buf_source_source_ready = packetizer_tlp_raw_d_ready;
assign packetizer_tlp_raw_d_first = packetizer_tlp_raw_buf_source_source_first;
assign packetizer_tlp_raw_d_last = packetizer_tlp_raw_buf_source_source_last;
assign packetizer_tlp_raw_d_payload_fmt = packetizer_tlp_raw_buf_source_source_payload_fmt;
assign packetizer_tlp_raw_d_payload_header = packetizer_tlp_raw_buf_source_source_payload_header;
assign packetizer_tlp_raw_d_payload_dat = packetizer_tlp_raw_buf_source_source_payload_dat;
assign packetizer_tlp_raw_d_payload_be = packetizer_tlp_raw_buf_source_source_payload_be;
assign packetizer_header_inserter_sink_sink_valid = packetizer_tlp_raw_d_valid;
assign packetizer_tlp_raw_d_ready = packetizer_header_inserter_sink_sink_ready;
assign packetizer_header_inserter_sink_sink_first = packetizer_tlp_raw_d_first;
assign packetizer_header_inserter_sink_sink_last = packetizer_tlp_raw_d_last;
assign packetizer_header_inserter_sink_sink_payload_fmt = packetizer_tlp_raw_d_payload_fmt;
assign packetizer_header_inserter_sink_sink_payload_header = packetizer_tlp_raw_d_payload_header;
assign packetizer_header_inserter_sink_sink_payload_dat = packetizer_tlp_raw_d_payload_dat;
assign packetizer_header_inserter_sink_sink_payload_be = packetizer_tlp_raw_d_payload_be;
assign packetizer_source_valid = packetizer_header_inserter_source_source_valid;
assign packetizer_header_inserter_source_source_ready = packetizer_source_ready;
assign packetizer_source_first = packetizer_header_inserter_source_source_first;
assign packetizer_source_last = packetizer_header_inserter_source_source_last;
always @(*) begin
    packetizer_source_payload_dat <= 64'd0;
    packetizer_source_payload_dat <= packetizer_header_inserter_source_source_payload_dat;
    packetizer_source_payload_dat[31:0] <= {packetizer_header_inserter_source_source_payload_dat[7:0], packetizer_header_inserter_source_source_payload_dat[15:8], packetizer_header_inserter_source_source_payload_dat[23:16], packetizer_header_inserter_source_source_payload_dat[31:24]};
    packetizer_source_payload_dat[63:32] <= {packetizer_header_inserter_source_source_payload_dat[39:32], packetizer_header_inserter_source_source_payload_dat[47:40], packetizer_header_inserter_source_source_payload_dat[55:48], packetizer_header_inserter_source_source_payload_dat[63:56]};
end
always @(*) begin
    packetizer_source_payload_be <= 8'd0;
    packetizer_source_payload_be[3:0] <= {packetizer_header_inserter_source_source_payload_be[0], packetizer_header_inserter_source_source_payload_be[1], packetizer_header_inserter_source_source_payload_be[2], packetizer_header_inserter_source_source_payload_be[3]};
    packetizer_source_payload_be[7:4] <= {packetizer_header_inserter_source_source_payload_be[4], packetizer_header_inserter_source_source_payload_be[5], packetizer_header_inserter_source_source_payload_be[6], packetizer_header_inserter_source_source_payload_be[7]};
end
always @(*) begin
    packetizer_request <= 3'd0;
    packetizer_request[0] <= packetizer_status0_ongoing0;
    packetizer_request[1] <= packetizer_status1_ongoing0;
    packetizer_request[2] <= packetizer_status2_ongoing0;
end
always @(*) begin
    packetizer_tlp_raw_first <= 1'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_first <= packetizer_tlp_raw_req_first;
        end
        1'd1: begin
            packetizer_tlp_raw_first <= packetizer_tlp_raw_cmp_first;
        end
        2'd2: begin
            packetizer_tlp_raw_first <= packetizer_tlp_raw_ptm_first;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_last <= 1'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_last <= packetizer_tlp_raw_req_last;
        end
        1'd1: begin
            packetizer_tlp_raw_last <= packetizer_tlp_raw_cmp_last;
        end
        2'd2: begin
            packetizer_tlp_raw_last <= packetizer_tlp_raw_ptm_last;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_payload_fmt <= 2'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_payload_fmt <= packetizer_tlp_raw_req_payload_fmt;
        end
        1'd1: begin
            packetizer_tlp_raw_payload_fmt <= packetizer_tlp_raw_cmp_payload_fmt;
        end
        2'd2: begin
            packetizer_tlp_raw_payload_fmt <= packetizer_tlp_raw_ptm_payload_fmt;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_payload_header <= 128'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_payload_header <= packetizer_tlp_raw_req_payload_header;
        end
        1'd1: begin
            packetizer_tlp_raw_payload_header <= packetizer_tlp_raw_cmp_payload_header;
        end
        2'd2: begin
            packetizer_tlp_raw_payload_header <= packetizer_tlp_raw_ptm_payload_header;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_payload_dat <= 64'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_payload_dat <= packetizer_tlp_raw_req_payload_dat;
        end
        1'd1: begin
            packetizer_tlp_raw_payload_dat <= packetizer_tlp_raw_cmp_payload_dat;
        end
        2'd2: begin
            packetizer_tlp_raw_payload_dat <= packetizer_tlp_raw_ptm_payload_dat;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_cmp_ready <= 1'd0;
    case (packetizer_grant)
        1'd0: begin
        end
        1'd1: begin
            packetizer_tlp_raw_cmp_ready <= packetizer_tlp_raw_ready;
        end
        2'd2: begin
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_payload_be <= 8'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_payload_be <= packetizer_tlp_raw_req_payload_be;
        end
        1'd1: begin
            packetizer_tlp_raw_payload_be <= packetizer_tlp_raw_cmp_payload_be;
        end
        2'd2: begin
            packetizer_tlp_raw_payload_be <= packetizer_tlp_raw_ptm_payload_be;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_req_ready <= 1'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_req_ready <= packetizer_tlp_raw_ready;
        end
        1'd1: begin
        end
        2'd2: begin
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_ptm_ready <= 1'd0;
    case (packetizer_grant)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            packetizer_tlp_raw_ptm_ready <= packetizer_tlp_raw_ready;
        end
    endcase
end
always @(*) begin
    packetizer_tlp_raw_valid <= 1'd0;
    case (packetizer_grant)
        1'd0: begin
            packetizer_tlp_raw_valid <= packetizer_tlp_raw_req_valid;
        end
        1'd1: begin
            packetizer_tlp_raw_valid <= packetizer_tlp_raw_cmp_valid;
        end
        2'd2: begin
            packetizer_tlp_raw_valid <= packetizer_tlp_raw_ptm_valid;
        end
    endcase
end
assign packetizer_status0_last = ((packetizer_tlp_raw_req_valid & packetizer_tlp_raw_req_last) & packetizer_tlp_raw_req_ready);
assign packetizer_status0_ongoing0 = ((packetizer_tlp_raw_req_valid | packetizer_status0_ongoing1) & (~packetizer_status0_last));
assign packetizer_status1_last = ((packetizer_tlp_raw_cmp_valid & packetizer_tlp_raw_cmp_last) & packetizer_tlp_raw_cmp_ready);
assign packetizer_status1_ongoing0 = ((packetizer_tlp_raw_cmp_valid | packetizer_status1_ongoing1) & (~packetizer_status1_last));
assign packetizer_status2_last = ((packetizer_tlp_raw_ptm_valid & packetizer_tlp_raw_ptm_last) & packetizer_tlp_raw_ptm_ready);
assign packetizer_status2_ongoing0 = ((packetizer_tlp_raw_ptm_valid | packetizer_status2_ongoing1) & (~packetizer_status2_last));
assign packetizer_tlp_raw_buf_pipe_valid_sink_ready = ((~packetizer_tlp_raw_buf_pipe_valid_source_valid) | packetizer_tlp_raw_buf_pipe_valid_source_ready);
assign packetizer_tlp_raw_buf_pipe_valid_sink_valid = packetizer_tlp_raw_buf_sink_sink_valid;
assign packetizer_tlp_raw_buf_sink_sink_ready = packetizer_tlp_raw_buf_pipe_valid_sink_ready;
assign packetizer_tlp_raw_buf_pipe_valid_sink_first = packetizer_tlp_raw_buf_sink_sink_first;
assign packetizer_tlp_raw_buf_pipe_valid_sink_last = packetizer_tlp_raw_buf_sink_sink_last;
assign packetizer_tlp_raw_buf_pipe_valid_sink_payload_fmt = packetizer_tlp_raw_buf_sink_sink_payload_fmt;
assign packetizer_tlp_raw_buf_pipe_valid_sink_payload_header = packetizer_tlp_raw_buf_sink_sink_payload_header;
assign packetizer_tlp_raw_buf_pipe_valid_sink_payload_dat = packetizer_tlp_raw_buf_sink_sink_payload_dat;
assign packetizer_tlp_raw_buf_pipe_valid_sink_payload_be = packetizer_tlp_raw_buf_sink_sink_payload_be;
assign packetizer_tlp_raw_buf_source_source_valid = packetizer_tlp_raw_buf_pipe_valid_source_valid;
assign packetizer_tlp_raw_buf_pipe_valid_source_ready = packetizer_tlp_raw_buf_source_source_ready;
assign packetizer_tlp_raw_buf_source_source_first = packetizer_tlp_raw_buf_pipe_valid_source_first;
assign packetizer_tlp_raw_buf_source_source_last = packetizer_tlp_raw_buf_pipe_valid_source_last;
assign packetizer_tlp_raw_buf_source_source_payload_fmt = packetizer_tlp_raw_buf_pipe_valid_source_payload_fmt;
assign packetizer_tlp_raw_buf_source_source_payload_header = packetizer_tlp_raw_buf_pipe_valid_source_payload_header;
assign packetizer_tlp_raw_buf_source_source_payload_dat = packetizer_tlp_raw_buf_pipe_valid_source_payload_dat;
assign packetizer_tlp_raw_buf_source_source_payload_be = packetizer_tlp_raw_buf_pipe_valid_source_payload_be;
always @(*) begin
    packetizer_header_inserter_header_sel <= 1'd0;
    case (packetizer_tlp_raw_d_payload_fmt)
        1'd0: begin
            packetizer_header_inserter_header_sel <= 1'd0;
        end
        1'd1: begin
            packetizer_header_inserter_header_sel <= 1'd1;
        end
        2'd2: begin
            packetizer_header_inserter_header_sel <= 1'd0;
        end
        2'd3: begin
            packetizer_header_inserter_header_sel <= 1'd1;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_valid <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_valid <= packetizer_header_inserter_sink_sink_valid;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_first <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_first <= packetizer_header_inserter_sink_sink_first;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_last <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_last <= packetizer_header_inserter_sink_sink_last;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_payload_fmt <= 2'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_payload_fmt <= packetizer_header_inserter_sink_sink_payload_fmt;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_payload_header <= 128'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_payload_header <= packetizer_header_inserter_sink_sink_payload_header;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_sink_sink_ready <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_sink_sink_ready <= packetizer_header_inserter_header_inserter_3dws_sink_ready;
        end
        1'd1: begin
            packetizer_header_inserter_sink_sink_ready <= packetizer_header_inserter_header_inserter_4dws_sink_ready;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_payload_dat <= 64'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_payload_dat <= packetizer_header_inserter_sink_sink_payload_dat;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_payload_be <= 8'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_sink_payload_be <= packetizer_header_inserter_sink_sink_payload_be;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_source_ready <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
        end
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_source_ready <= packetizer_header_inserter_source_source_ready;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_source_source_valid <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_source_source_valid <= packetizer_header_inserter_header_inserter_3dws_source_valid;
        end
        1'd1: begin
            packetizer_header_inserter_source_source_valid <= packetizer_header_inserter_header_inserter_4dws_source_valid;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_source_source_first <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_source_source_first <= packetizer_header_inserter_header_inserter_3dws_source_first;
        end
        1'd1: begin
            packetizer_header_inserter_source_source_first <= packetizer_header_inserter_header_inserter_4dws_source_first;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_source_source_last <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_source_source_last <= packetizer_header_inserter_header_inserter_3dws_source_last;
        end
        1'd1: begin
            packetizer_header_inserter_source_source_last <= packetizer_header_inserter_header_inserter_4dws_source_last;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_source_source_payload_dat <= 64'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_source_source_payload_dat <= packetizer_header_inserter_header_inserter_3dws_source_payload_dat;
        end
        1'd1: begin
            packetizer_header_inserter_source_source_payload_dat <= packetizer_header_inserter_header_inserter_4dws_source_payload_dat;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_source_source_payload_be <= 8'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_source_source_payload_be <= packetizer_header_inserter_header_inserter_3dws_source_payload_be;
        end
        1'd1: begin
            packetizer_header_inserter_source_source_payload_be <= packetizer_header_inserter_header_inserter_4dws_source_payload_be;
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_valid <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_valid <= packetizer_header_inserter_sink_sink_valid;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_first <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_first <= packetizer_header_inserter_sink_sink_first;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_last <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_last <= packetizer_header_inserter_sink_sink_last;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_payload_fmt <= 2'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_payload_fmt <= packetizer_header_inserter_sink_sink_payload_fmt;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_payload_header <= 128'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_payload_header <= packetizer_header_inserter_sink_sink_payload_header;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_payload_dat <= 64'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_payload_dat <= packetizer_header_inserter_sink_sink_payload_dat;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_payload_be <= 8'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_sink_payload_be <= packetizer_header_inserter_sink_sink_payload_be;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_source_ready <= 1'd0;
    case (packetizer_header_inserter_header_sel)
        1'd0: begin
            packetizer_header_inserter_header_inserter_3dws_source_ready <= packetizer_header_inserter_source_source_ready;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_litepcietlpheaderinserter64b3dws_next_state <= 1'd0;
    litepcieendpoint_litepcietlpheaderinserter64b3dws_next_state <= litepcieendpoint_litepcietlpheaderinserter64b3dws_state;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
            if ((packetizer_header_inserter_header_inserter_3dws_source_valid & packetizer_header_inserter_header_inserter_3dws_source_ready)) begin
                if (packetizer_header_inserter_header_inserter_3dws_source_last) begin
                    litepcieendpoint_litepcietlpheaderinserter64b3dws_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_3dws_source_valid & packetizer_header_inserter_header_inserter_3dws_source_ready)) begin
                    if ((packetizer_header_inserter_header_inserter_3dws_count == 1'd1)) begin
                        if ((~packetizer_header_inserter_header_inserter_3dws_source_last)) begin
                            litepcieendpoint_litepcietlpheaderinserter64b3dws_next_state <= 1'd1;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_source_first <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_3dws_source_first <= ((packetizer_header_inserter_header_inserter_3dws_count == 1'd0) & packetizer_header_inserter_header_inserter_3dws_sink_first);
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_source_last <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_3dws_source_last <= packetizer_header_inserter_header_inserter_3dws_last;
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_3dws_source_last <= (((packetizer_header_inserter_header_inserter_3dws_count == 1'd1) & packetizer_header_inserter_header_inserter_3dws_sink_last) & (packetizer_header_inserter_header_inserter_3dws_sink_payload_be[7:4] == 1'd0));
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_source_payload_dat <= 64'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_3dws_source_payload_dat[31:0] <= packetizer_header_inserter_header_inserter_3dws_dat[63:32];
            packetizer_header_inserter_header_inserter_3dws_source_payload_dat[63:32] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_dat;
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_3dws_count == 1'd0)) begin
                    packetizer_header_inserter_header_inserter_3dws_source_payload_dat[31:0] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_header;
                    packetizer_header_inserter_header_inserter_3dws_source_payload_dat[63:32] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_header[127:32];
                end
                if ((packetizer_header_inserter_header_inserter_3dws_count == 1'd1)) begin
                    packetizer_header_inserter_header_inserter_3dws_source_payload_dat[31:0] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_header[127:64];
                    packetizer_header_inserter_header_inserter_3dws_source_payload_dat[63:32] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_dat;
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_source_payload_be <= 8'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_3dws_source_payload_be[3:0] <= packetizer_header_inserter_header_inserter_3dws_be;
            if (packetizer_header_inserter_header_inserter_3dws_last) begin
                packetizer_header_inserter_header_inserter_3dws_source_payload_be[7:4] <= 1'd0;
            end else begin
                packetizer_header_inserter_header_inserter_3dws_source_payload_be[7:4] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_be;
            end
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_3dws_count == 1'd0)) begin
                    packetizer_header_inserter_header_inserter_3dws_source_payload_be[3:0] <= 4'd15;
                    packetizer_header_inserter_header_inserter_3dws_source_payload_be[7:4] <= 4'd15;
                end
                if ((packetizer_header_inserter_header_inserter_3dws_count == 1'd1)) begin
                    packetizer_header_inserter_header_inserter_3dws_source_payload_be[3:0] <= 4'd15;
                    packetizer_header_inserter_header_inserter_3dws_source_payload_be[7:4] <= packetizer_header_inserter_header_inserter_3dws_sink_payload_be;
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_sink_ready <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
            if ((packetizer_header_inserter_header_inserter_3dws_source_valid & packetizer_header_inserter_header_inserter_3dws_source_ready)) begin
                packetizer_header_inserter_header_inserter_3dws_sink_ready <= (~packetizer_header_inserter_header_inserter_3dws_last);
            end
        end
        default: begin
            packetizer_header_inserter_header_inserter_3dws_sink_ready <= 1'd1;
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_3dws_sink_ready <= 1'd0;
                if ((packetizer_header_inserter_header_inserter_3dws_source_valid & packetizer_header_inserter_header_inserter_3dws_source_ready)) begin
                    if ((packetizer_header_inserter_header_inserter_3dws_count == 1'd1)) begin
                        packetizer_header_inserter_header_inserter_3dws_sink_ready <= 1'd1;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_3dws_source_valid & packetizer_header_inserter_header_inserter_3dws_source_ready)) begin
                    packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value <= (packetizer_header_inserter_header_inserter_3dws_count + 1'd1);
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value_ce <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_3dws_source_valid & packetizer_header_inserter_header_inserter_3dws_source_ready)) begin
                    packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value_ce <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_3dws_source_valid <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b3dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_3dws_source_valid <= (packetizer_header_inserter_header_inserter_3dws_sink_valid | packetizer_header_inserter_header_inserter_3dws_last);
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_3dws_source_valid <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litepcieendpoint_litepcietlpheaderinserter64b4dws_next_state <= 1'd0;
    litepcieendpoint_litepcietlpheaderinserter64b4dws_next_state <= litepcieendpoint_litepcietlpheaderinserter64b4dws_state;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
            if ((packetizer_header_inserter_header_inserter_4dws_source_valid & packetizer_header_inserter_header_inserter_4dws_source_ready)) begin
                if (packetizer_header_inserter_header_inserter_4dws_source_last) begin
                    litepcieendpoint_litepcietlpheaderinserter64b4dws_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_4dws_source_valid & packetizer_header_inserter_header_inserter_4dws_source_ready)) begin
                    if ((packetizer_header_inserter_header_inserter_4dws_count == 1'd1)) begin
                        if ((~packetizer_header_inserter_header_inserter_4dws_source_last)) begin
                            litepcieendpoint_litepcietlpheaderinserter64b4dws_next_state <= 1'd1;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_source_payload_dat <= 64'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_source_payload_dat[31:0] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_dat;
            packetizer_header_inserter_header_inserter_4dws_source_payload_dat[63:32] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_dat[63:32];
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_4dws_count == 1'd0)) begin
                    packetizer_header_inserter_header_inserter_4dws_source_payload_dat[31:0] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_header;
                    packetizer_header_inserter_header_inserter_4dws_source_payload_dat[63:32] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_header[127:32];
                end
                if ((packetizer_header_inserter_header_inserter_4dws_count == 1'd1)) begin
                    packetizer_header_inserter_header_inserter_4dws_source_payload_dat[31:0] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_header[127:64];
                    packetizer_header_inserter_header_inserter_4dws_source_payload_dat[63:32] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_header[127:96];
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_source_payload_be <= 8'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_source_payload_be[3:0] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_be;
            packetizer_header_inserter_header_inserter_4dws_source_payload_be[7:4] <= packetizer_header_inserter_header_inserter_4dws_sink_payload_be[7:4];
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_4dws_count == 1'd0)) begin
                    packetizer_header_inserter_header_inserter_4dws_source_payload_be[3:0] <= 4'd15;
                    packetizer_header_inserter_header_inserter_4dws_source_payload_be[7:4] <= 4'd15;
                end
                if ((packetizer_header_inserter_header_inserter_4dws_count == 1'd1)) begin
                    packetizer_header_inserter_header_inserter_4dws_source_payload_be[3:0] <= 4'd15;
                    packetizer_header_inserter_header_inserter_4dws_source_payload_be[7:4] <= 4'd15;
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_4dws_source_valid & packetizer_header_inserter_header_inserter_4dws_source_ready)) begin
                    packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value <= (packetizer_header_inserter_header_inserter_4dws_count + 1'd1);
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_sink_ready <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
            if ((packetizer_header_inserter_header_inserter_4dws_source_valid & packetizer_header_inserter_header_inserter_4dws_source_ready)) begin
                packetizer_header_inserter_header_inserter_4dws_sink_ready <= 1'd1;
            end
        end
        default: begin
            packetizer_header_inserter_header_inserter_4dws_sink_ready <= 1'd1;
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_4dws_sink_ready <= 1'd0;
                if ((packetizer_header_inserter_header_inserter_4dws_source_valid & packetizer_header_inserter_header_inserter_4dws_source_ready)) begin
                    if ((packetizer_header_inserter_header_inserter_4dws_count == 1'd1)) begin
                        packetizer_header_inserter_header_inserter_4dws_sink_ready <= 1'd1;
                        if ((~packetizer_header_inserter_header_inserter_4dws_source_last)) begin
                            packetizer_header_inserter_header_inserter_4dws_sink_ready <= 1'd0;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value_ce <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                if ((packetizer_header_inserter_header_inserter_4dws_source_valid & packetizer_header_inserter_header_inserter_4dws_source_ready)) begin
                    packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value_ce <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_source_valid <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_source_valid <= packetizer_header_inserter_header_inserter_4dws_sink_valid;
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_4dws_source_valid <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_source_first <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_4dws_source_first <= ((packetizer_header_inserter_header_inserter_4dws_count == 1'd0) & packetizer_header_inserter_header_inserter_4dws_sink_first);
            end
        end
    endcase
end
always @(*) begin
    packetizer_header_inserter_header_inserter_4dws_source_last <= 1'd0;
    case (litepcieendpoint_litepcietlpheaderinserter64b4dws_state)
        1'd1: begin
            packetizer_header_inserter_header_inserter_4dws_source_last <= packetizer_header_inserter_header_inserter_4dws_sink_last;
        end
        default: begin
            if ((packetizer_header_inserter_header_inserter_4dws_sink_valid & packetizer_header_inserter_header_inserter_4dws_sink_first)) begin
                packetizer_header_inserter_header_inserter_4dws_source_last <= (((packetizer_header_inserter_header_inserter_4dws_count == 1'd1) & packetizer_header_inserter_header_inserter_4dws_sink_last) & (packetizer_header_inserter_header_inserter_4dws_sink_payload_be == 1'd0));
            end
        end
    endcase
end
always @(*) begin
    litepcieendpoint_s_dispatcher_sel0 <= 2'd0;
    litepcieendpoint_s_dispatcher_sel0[0] <= 1'd1;
    litepcieendpoint_s_dispatcher_sel0[1] <= 1'd0;
end
assign litepcieendpoint_m_dispatcher_sel0 = (litepcieendpoint_master_in_source_payload_channel == 1'd0);
assign litepcieendpoint_master_out_source_valid = master_source_valid;
assign master_source_ready = litepcieendpoint_master_out_source_ready;
assign litepcieendpoint_master_out_source_first = master_source_first;
assign litepcieendpoint_master_out_source_last = master_source_last;
assign litepcieendpoint_master_out_source_payload_req_id = master_source_payload_req_id;
assign litepcieendpoint_master_out_source_payload_cmp_id = master_source_payload_cmp_id;
assign litepcieendpoint_master_out_source_payload_adr = master_source_payload_adr;
assign litepcieendpoint_master_out_source_payload_len = master_source_payload_len;
assign litepcieendpoint_master_out_source_payload_end = master_source_payload_end;
assign litepcieendpoint_master_out_source_payload_err = master_source_payload_err;
assign litepcieendpoint_master_out_source_payload_tag = master_source_payload_tag;
assign litepcieendpoint_master_out_source_payload_dat = master_source_payload_dat;
assign litepcieendpoint_master_out_source_payload_channel = master_source_payload_channel;
assign litepcieendpoint_master_out_source_payload_user_id = master_source_payload_user_id;
always @(*) begin
    litepcieendpoint_s_dispatcher_sel1 <= 2'd0;
    if (litepcieendpoint_s_dispatcher_first) begin
        litepcieendpoint_s_dispatcher_sel1 <= litepcieendpoint_s_dispatcher_sel0;
    end else begin
        litepcieendpoint_s_dispatcher_sel1 <= litepcieendpoint_s_dispatcher_sel_ongoing;
    end
end
always @(*) begin
    pcie_wishbone_master_source_valid <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_valid <= slave_source_valid;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_first <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_first <= slave_source_first;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_last <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_last <= slave_source_last;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_req_id <= 16'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_req_id <= slave_source_payload_req_id;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_we <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_we <= slave_source_payload_we;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_adr <= 32'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_adr <= slave_source_payload_adr;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_len <= 10'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_len <= slave_source_payload_len;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_tag <= 8'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_tag <= slave_source_payload_tag;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_dat <= 64'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_dat <= slave_source_payload_dat;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_channel <= 8'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_channel <= slave_source_payload_channel;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_payload_user_id <= 8'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            pcie_wishbone_master_source_payload_user_id <= slave_source_payload_user_id;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_valid <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_valid <= slave_source_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_first <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_first <= slave_source_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_last <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_last <= slave_source_last;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_req_id <= 16'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_req_id <= slave_source_payload_req_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_we <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_we <= slave_source_payload_we;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_adr <= 32'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_adr <= slave_source_payload_adr;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_len <= 10'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_len <= slave_source_payload_len;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_tag <= 8'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_tag <= slave_source_payload_tag;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_dat <= 64'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_dat <= slave_source_payload_dat;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_channel <= 8'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_channel <= slave_source_payload_channel;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_source_payload_user_id <= 8'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_source_payload_user_id <= slave_source_payload_user_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    slave_source_ready <= 1'd0;
    case (litepcieendpoint_s_dispatcher_sel1)
        1'd1: begin
            slave_source_ready <= pcie_wishbone_master_source_ready;
        end
        2'd2: begin
            slave_source_ready <= ptm_capabilities_source_ready;
        end
        default: begin
            slave_source_ready <= 1'd1;
        end
    endcase
end
assign litepcieendpoint_s_dispatcher_last = ((slave_source_valid & slave_source_last) & slave_source_ready);
assign litepcieendpoint_s_dispatcher_ongoing0 = ((slave_source_valid | litepcieendpoint_s_dispatcher_ongoing1) & (~litepcieendpoint_s_dispatcher_last));
always @(*) begin
    litepcieendpoint_request <= 2'd0;
    litepcieendpoint_request[0] <= litepcieendpoint_status0_ongoing0;
    litepcieendpoint_request[1] <= litepcieendpoint_status1_ongoing0;
end
always @(*) begin
    slave_sink_valid <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_valid <= pcie_wishbone_master_sink_valid;
        end
        1'd1: begin
            slave_sink_valid <= ptm_capabilities_sink_valid;
        end
    endcase
end
always @(*) begin
    slave_sink_first <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_first <= pcie_wishbone_master_sink_first;
        end
        1'd1: begin
            slave_sink_first <= ptm_capabilities_sink_first;
        end
    endcase
end
always @(*) begin
    slave_sink_last <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_last <= pcie_wishbone_master_sink_last;
        end
        1'd1: begin
            slave_sink_last <= ptm_capabilities_sink_last;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_req_id <= pcie_wishbone_master_sink_payload_req_id;
        end
        1'd1: begin
            slave_sink_payload_req_id <= ptm_capabilities_sink_payload_req_id;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_cmp_id <= pcie_wishbone_master_sink_payload_cmp_id;
        end
        1'd1: begin
            slave_sink_payload_cmp_id <= ptm_capabilities_sink_payload_cmp_id;
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_ready <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
        end
        1'd1: begin
            ptm_capabilities_sink_ready <= slave_sink_ready;
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_sink_ready <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            pcie_wishbone_master_sink_ready <= slave_sink_ready;
        end
        1'd1: begin
        end
    endcase
end
always @(*) begin
    slave_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_adr <= pcie_wishbone_master_sink_payload_adr;
        end
        1'd1: begin
            slave_sink_payload_adr <= ptm_capabilities_sink_payload_adr;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_len <= 10'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_len <= pcie_wishbone_master_sink_payload_len;
        end
        1'd1: begin
            slave_sink_payload_len <= ptm_capabilities_sink_payload_len;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_end <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_end <= pcie_wishbone_master_sink_payload_end;
        end
        1'd1: begin
            slave_sink_payload_end <= ptm_capabilities_sink_payload_end;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_err <= 1'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_err <= pcie_wishbone_master_sink_payload_err;
        end
        1'd1: begin
            slave_sink_payload_err <= ptm_capabilities_sink_payload_err;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_tag <= pcie_wishbone_master_sink_payload_tag;
        end
        1'd1: begin
            slave_sink_payload_tag <= ptm_capabilities_sink_payload_tag;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_dat <= pcie_wishbone_master_sink_payload_dat;
        end
        1'd1: begin
            slave_sink_payload_dat <= ptm_capabilities_sink_payload_dat;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_channel <= pcie_wishbone_master_sink_payload_channel;
        end
        1'd1: begin
            slave_sink_payload_channel <= ptm_capabilities_sink_payload_channel;
        end
    endcase
end
always @(*) begin
    slave_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_grant)
        1'd0: begin
            slave_sink_payload_user_id <= pcie_wishbone_master_sink_payload_user_id;
        end
        1'd1: begin
            slave_sink_payload_user_id <= ptm_capabilities_sink_payload_user_id;
        end
    endcase
end
assign litepcieendpoint_status0_last = ((pcie_wishbone_master_sink_valid & pcie_wishbone_master_sink_last) & pcie_wishbone_master_sink_ready);
assign litepcieendpoint_status0_ongoing0 = ((pcie_wishbone_master_sink_valid | litepcieendpoint_status0_ongoing1) & (~litepcieendpoint_status0_last));
assign litepcieendpoint_status1_last = ((ptm_capabilities_sink_valid & ptm_capabilities_sink_last) & ptm_capabilities_sink_ready);
assign litepcieendpoint_status1_ongoing0 = ((ptm_capabilities_sink_valid | litepcieendpoint_status1_ongoing1) & (~litepcieendpoint_status1_last));
assign litepcieendpoint_master_out_sink_first = litepcieendpoint_master_in_sink_first;
assign litepcieendpoint_master_out_sink_last = litepcieendpoint_master_in_sink_last;
assign litepcieendpoint_master_out_sink_payload_req_id = litepcieendpoint_master_in_sink_payload_req_id;
assign litepcieendpoint_master_out_sink_payload_we = litepcieendpoint_master_in_sink_payload_we;
assign litepcieendpoint_master_out_sink_payload_adr = litepcieendpoint_master_in_sink_payload_adr;
assign litepcieendpoint_master_out_sink_payload_len = litepcieendpoint_master_in_sink_payload_len;
assign litepcieendpoint_master_out_sink_payload_dat = litepcieendpoint_master_in_sink_payload_dat;
assign litepcieendpoint_master_out_sink_payload_channel = litepcieendpoint_master_in_sink_payload_channel;
assign litepcieendpoint_master_out_sink_payload_user_id = litepcieendpoint_master_in_sink_payload_user_id;
assign litepcieendpoint_req_queue_sink_payload_tag = litepcieendpoint_tag_queue_source_payload_tag;
assign litepcieendpoint_req_queue_sink_payload_channel = litepcieendpoint_master_in_sink_payload_channel;
assign litepcieendpoint_req_queue_sink_payload_user_id = litepcieendpoint_master_in_sink_payload_user_id;
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_cmp_reorder_ready <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo0_sink_ready;
        end
        1'd1: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo1_sink_ready;
        end
        2'd2: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo2_sink_ready;
        end
        2'd3: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo3_sink_ready;
        end
        3'd4: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo4_sink_ready;
        end
        3'd5: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo5_sink_ready;
        end
        3'd6: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo6_sink_ready;
        end
        3'd7: begin
            litepcieendpoint_cmp_reorder_ready <= litepcieendpoint_syncfifo7_sink_ready;
        end
        default: begin
            litepcieendpoint_cmp_reorder_ready <= 1'd1;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_sink_payload_user_id <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_sink_payload_user_id <= litepcieendpoint_cmp_reorder_payload_user_id;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_valid <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_valid <= litepcieendpoint_cmp_reorder_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_first <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_first <= litepcieendpoint_cmp_reorder_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_last <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_last <= litepcieendpoint_cmp_reorder_last;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_req_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_req_id <= litepcieendpoint_cmp_reorder_payload_req_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_cmp_id <= litepcieendpoint_cmp_reorder_payload_cmp_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_adr <= 32'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_adr <= litepcieendpoint_cmp_reorder_payload_adr;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_len <= 10'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_len <= litepcieendpoint_cmp_reorder_payload_len;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_end <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_end <= litepcieendpoint_cmp_reorder_payload_end;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_err <= 1'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_err <= litepcieendpoint_cmp_reorder_payload_err;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_tag <= litepcieendpoint_cmp_reorder_payload_tag;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_dat <= 64'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_dat <= litepcieendpoint_cmp_reorder_payload_dat;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_sink_payload_channel <= 8'd0;
    case (litepcieendpoint_cmp_reorder_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_sink_payload_channel <= litepcieendpoint_cmp_reorder_payload_channel;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo7_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
            litepcieendpoint_syncfifo7_source_ready <= litepcieendpoint_master_in_source_ready;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo5_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            litepcieendpoint_syncfifo5_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        3'd6: begin
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo3_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litepcieendpoint_syncfifo3_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo1_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
            litepcieendpoint_syncfifo1_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_valid <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo0_source_valid;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo1_source_valid;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo2_source_valid;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo3_source_valid;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo4_source_valid;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo5_source_valid;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo6_source_valid;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_valid <= litepcieendpoint_syncfifo7_source_valid;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_first <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo0_source_first;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo1_source_first;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo2_source_first;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo3_source_first;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo4_source_first;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo5_source_first;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo6_source_first;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_first <= litepcieendpoint_syncfifo7_source_first;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_last <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo0_source_last;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo1_source_last;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo2_source_last;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo3_source_last;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo4_source_last;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo5_source_last;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo6_source_last;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_last <= litepcieendpoint_syncfifo7_source_last;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_req_id <= 16'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo0_source_payload_req_id;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo1_source_payload_req_id;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo2_source_payload_req_id;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo3_source_payload_req_id;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo4_source_payload_req_id;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo5_source_payload_req_id;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo6_source_payload_req_id;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_req_id <= litepcieendpoint_syncfifo7_source_payload_req_id;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo0_source_payload_cmp_id;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo1_source_payload_cmp_id;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo2_source_payload_cmp_id;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo3_source_payload_cmp_id;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo4_source_payload_cmp_id;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo5_source_payload_cmp_id;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo6_source_payload_cmp_id;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_cmp_id <= litepcieendpoint_syncfifo7_source_payload_cmp_id;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo6_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            litepcieendpoint_syncfifo6_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_adr <= 32'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo0_source_payload_adr;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo1_source_payload_adr;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo2_source_payload_adr;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo3_source_payload_adr;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo4_source_payload_adr;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo5_source_payload_adr;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo6_source_payload_adr;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_adr <= litepcieendpoint_syncfifo7_source_payload_adr;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo4_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            litepcieendpoint_syncfifo4_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_len <= 10'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo0_source_payload_len;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo1_source_payload_len;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo2_source_payload_len;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo3_source_payload_len;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo4_source_payload_len;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo5_source_payload_len;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo6_source_payload_len;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_len <= litepcieendpoint_syncfifo7_source_payload_len;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo2_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
        end
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_syncfifo2_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_end <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo0_source_payload_end;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo1_source_payload_end;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo2_source_payload_end;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo3_source_payload_end;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo4_source_payload_end;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo5_source_payload_end;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo6_source_payload_end;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_end <= litepcieendpoint_syncfifo7_source_payload_end;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_syncfifo0_source_ready <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_syncfifo0_source_ready <= litepcieendpoint_master_in_source_ready;
        end
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_err <= 1'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo0_source_payload_err;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo1_source_payload_err;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo2_source_payload_err;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo3_source_payload_err;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo4_source_payload_err;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo5_source_payload_err;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo6_source_payload_err;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_err <= litepcieendpoint_syncfifo7_source_payload_err;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_tag <= 8'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo0_source_payload_tag;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo1_source_payload_tag;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo2_source_payload_tag;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo3_source_payload_tag;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo4_source_payload_tag;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo5_source_payload_tag;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo6_source_payload_tag;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_tag <= litepcieendpoint_syncfifo7_source_payload_tag;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_dat <= 64'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo0_source_payload_dat;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo1_source_payload_dat;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo2_source_payload_dat;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo3_source_payload_dat;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo4_source_payload_dat;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo5_source_payload_dat;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo6_source_payload_dat;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_dat <= litepcieendpoint_syncfifo7_source_payload_dat;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_channel <= 8'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo0_source_payload_channel;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo1_source_payload_channel;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo2_source_payload_channel;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo3_source_payload_channel;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo4_source_payload_channel;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo5_source_payload_channel;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo6_source_payload_channel;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_syncfifo7_source_payload_channel;
        end
    endcase
    litepcieendpoint_master_in_source_payload_channel <= litepcieendpoint_req_queue_source_payload_channel;
end
always @(*) begin
    litepcieendpoint_master_in_source_payload_user_id <= 8'd0;
    case (litepcieendpoint_req_queue_source_payload_tag)
        1'd0: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo0_source_payload_user_id;
        end
        1'd1: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo1_source_payload_user_id;
        end
        2'd2: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo2_source_payload_user_id;
        end
        2'd3: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo3_source_payload_user_id;
        end
        3'd4: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo4_source_payload_user_id;
        end
        3'd5: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo5_source_payload_user_id;
        end
        3'd6: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo6_source_payload_user_id;
        end
        3'd7: begin
            litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_syncfifo7_source_payload_user_id;
        end
    endcase
    litepcieendpoint_master_in_source_payload_user_id <= litepcieendpoint_req_queue_source_payload_user_id;
end
always @(*) begin
    litepcieendpoint_req_queue_source_ready <= 1'd0;
    if (((litepcieendpoint_master_in_source_valid & litepcieendpoint_master_in_source_last) & litepcieendpoint_master_in_source_payload_end)) begin
        litepcieendpoint_req_queue_source_ready <= litepcieendpoint_master_in_source_ready;
    end
end
assign litepcieendpoint_cmp_reorder_first = litepcieendpoint_master_out_source_first;
assign litepcieendpoint_cmp_reorder_last = litepcieendpoint_master_out_source_last;
assign litepcieendpoint_cmp_reorder_payload_req_id = litepcieendpoint_master_out_source_payload_req_id;
assign litepcieendpoint_cmp_reorder_payload_cmp_id = litepcieendpoint_master_out_source_payload_cmp_id;
assign litepcieendpoint_cmp_reorder_payload_adr = litepcieendpoint_master_out_source_payload_adr;
assign litepcieendpoint_cmp_reorder_payload_len = litepcieendpoint_master_out_source_payload_len;
assign litepcieendpoint_cmp_reorder_payload_end = litepcieendpoint_master_out_source_payload_end;
assign litepcieendpoint_cmp_reorder_payload_err = litepcieendpoint_master_out_source_payload_err;
assign litepcieendpoint_cmp_reorder_payload_tag = litepcieendpoint_master_out_source_payload_tag;
assign litepcieendpoint_cmp_reorder_payload_dat = litepcieendpoint_master_out_source_payload_dat;
assign litepcieendpoint_cmp_reorder_payload_channel = litepcieendpoint_master_out_source_payload_channel;
assign litepcieendpoint_cmp_reorder_payload_user_id = litepcieendpoint_master_out_source_payload_user_id;
assign litepcieendpoint_tag_queue_syncfifo_din = {litepcieendpoint_tag_queue_fifo_in_last, litepcieendpoint_tag_queue_fifo_in_first, litepcieendpoint_tag_queue_fifo_in_payload_tag};
assign {litepcieendpoint_tag_queue_fifo_out_last, litepcieendpoint_tag_queue_fifo_out_first, litepcieendpoint_tag_queue_fifo_out_payload_tag} = litepcieendpoint_tag_queue_syncfifo_dout;
assign {litepcieendpoint_tag_queue_fifo_out_last, litepcieendpoint_tag_queue_fifo_out_first, litepcieendpoint_tag_queue_fifo_out_payload_tag} = litepcieendpoint_tag_queue_syncfifo_dout;
assign {litepcieendpoint_tag_queue_fifo_out_last, litepcieendpoint_tag_queue_fifo_out_first, litepcieendpoint_tag_queue_fifo_out_payload_tag} = litepcieendpoint_tag_queue_syncfifo_dout;
assign litepcieendpoint_tag_queue_sink_ready = litepcieendpoint_tag_queue_syncfifo_writable;
assign litepcieendpoint_tag_queue_syncfifo_we = litepcieendpoint_tag_queue_sink_valid;
assign litepcieendpoint_tag_queue_fifo_in_first = litepcieendpoint_tag_queue_sink_first;
assign litepcieendpoint_tag_queue_fifo_in_last = litepcieendpoint_tag_queue_sink_last;
assign litepcieendpoint_tag_queue_fifo_in_payload_tag = litepcieendpoint_tag_queue_sink_payload_tag;
assign litepcieendpoint_tag_queue_source_valid = litepcieendpoint_tag_queue_readable;
assign litepcieendpoint_tag_queue_source_first = litepcieendpoint_tag_queue_fifo_out_first;
assign litepcieendpoint_tag_queue_source_last = litepcieendpoint_tag_queue_fifo_out_last;
assign litepcieendpoint_tag_queue_source_payload_tag = litepcieendpoint_tag_queue_fifo_out_payload_tag;
assign litepcieendpoint_tag_queue_re = litepcieendpoint_tag_queue_source_ready;
assign litepcieendpoint_tag_queue_syncfifo_re = (litepcieendpoint_tag_queue_syncfifo_readable & ((~litepcieendpoint_tag_queue_readable) | litepcieendpoint_tag_queue_re));
assign litepcieendpoint_tag_queue_level1 = (litepcieendpoint_tag_queue_level0 + litepcieendpoint_tag_queue_readable);
always @(*) begin
    litepcieendpoint_tag_queue_wrport_adr <= 3'd0;
    if (litepcieendpoint_tag_queue_replace) begin
        litepcieendpoint_tag_queue_wrport_adr <= (litepcieendpoint_tag_queue_produce - 1'd1);
    end else begin
        litepcieendpoint_tag_queue_wrport_adr <= litepcieendpoint_tag_queue_produce;
    end
end
assign litepcieendpoint_tag_queue_wrport_dat_w = litepcieendpoint_tag_queue_syncfifo_din;
assign litepcieendpoint_tag_queue_wrport_we = (litepcieendpoint_tag_queue_syncfifo_we & (litepcieendpoint_tag_queue_syncfifo_writable | litepcieendpoint_tag_queue_replace));
assign litepcieendpoint_tag_queue_do_read = (litepcieendpoint_tag_queue_syncfifo_readable & litepcieendpoint_tag_queue_syncfifo_re);
assign litepcieendpoint_tag_queue_rdport_adr = litepcieendpoint_tag_queue_consume;
assign litepcieendpoint_tag_queue_syncfifo_dout = litepcieendpoint_tag_queue_rdport_dat_r;
assign litepcieendpoint_tag_queue_rdport_re = litepcieendpoint_tag_queue_do_read;
assign litepcieendpoint_tag_queue_syncfifo_writable = (litepcieendpoint_tag_queue_level0 != 4'd8);
assign litepcieendpoint_tag_queue_syncfifo_readable = (litepcieendpoint_tag_queue_level0 != 1'd0);
assign litepcieendpoint_req_queue_syncfifo_din = {litepcieendpoint_req_queue_fifo_in_last, litepcieendpoint_req_queue_fifo_in_first, litepcieendpoint_req_queue_fifo_in_payload_user_id, litepcieendpoint_req_queue_fifo_in_payload_channel, litepcieendpoint_req_queue_fifo_in_payload_tag};
assign {litepcieendpoint_req_queue_fifo_out_last, litepcieendpoint_req_queue_fifo_out_first, litepcieendpoint_req_queue_fifo_out_payload_user_id, litepcieendpoint_req_queue_fifo_out_payload_channel, litepcieendpoint_req_queue_fifo_out_payload_tag} = litepcieendpoint_req_queue_syncfifo_dout;
assign {litepcieendpoint_req_queue_fifo_out_last, litepcieendpoint_req_queue_fifo_out_first, litepcieendpoint_req_queue_fifo_out_payload_user_id, litepcieendpoint_req_queue_fifo_out_payload_channel, litepcieendpoint_req_queue_fifo_out_payload_tag} = litepcieendpoint_req_queue_syncfifo_dout;
assign {litepcieendpoint_req_queue_fifo_out_last, litepcieendpoint_req_queue_fifo_out_first, litepcieendpoint_req_queue_fifo_out_payload_user_id, litepcieendpoint_req_queue_fifo_out_payload_channel, litepcieendpoint_req_queue_fifo_out_payload_tag} = litepcieendpoint_req_queue_syncfifo_dout;
assign {litepcieendpoint_req_queue_fifo_out_last, litepcieendpoint_req_queue_fifo_out_first, litepcieendpoint_req_queue_fifo_out_payload_user_id, litepcieendpoint_req_queue_fifo_out_payload_channel, litepcieendpoint_req_queue_fifo_out_payload_tag} = litepcieendpoint_req_queue_syncfifo_dout;
assign {litepcieendpoint_req_queue_fifo_out_last, litepcieendpoint_req_queue_fifo_out_first, litepcieendpoint_req_queue_fifo_out_payload_user_id, litepcieendpoint_req_queue_fifo_out_payload_channel, litepcieendpoint_req_queue_fifo_out_payload_tag} = litepcieendpoint_req_queue_syncfifo_dout;
assign litepcieendpoint_req_queue_sink_ready = litepcieendpoint_req_queue_syncfifo_writable;
assign litepcieendpoint_req_queue_syncfifo_we = litepcieendpoint_req_queue_sink_valid;
assign litepcieendpoint_req_queue_fifo_in_first = litepcieendpoint_req_queue_sink_first;
assign litepcieendpoint_req_queue_fifo_in_last = litepcieendpoint_req_queue_sink_last;
assign litepcieendpoint_req_queue_fifo_in_payload_tag = litepcieendpoint_req_queue_sink_payload_tag;
assign litepcieendpoint_req_queue_fifo_in_payload_channel = litepcieendpoint_req_queue_sink_payload_channel;
assign litepcieendpoint_req_queue_fifo_in_payload_user_id = litepcieendpoint_req_queue_sink_payload_user_id;
assign litepcieendpoint_req_queue_source_valid = litepcieendpoint_req_queue_readable;
assign litepcieendpoint_req_queue_source_first = litepcieendpoint_req_queue_fifo_out_first;
assign litepcieendpoint_req_queue_source_last = litepcieendpoint_req_queue_fifo_out_last;
assign litepcieendpoint_req_queue_source_payload_tag = litepcieendpoint_req_queue_fifo_out_payload_tag;
assign litepcieendpoint_req_queue_source_payload_channel = litepcieendpoint_req_queue_fifo_out_payload_channel;
assign litepcieendpoint_req_queue_source_payload_user_id = litepcieendpoint_req_queue_fifo_out_payload_user_id;
assign litepcieendpoint_req_queue_re = litepcieendpoint_req_queue_source_ready;
assign litepcieendpoint_req_queue_syncfifo_re = (litepcieendpoint_req_queue_syncfifo_readable & ((~litepcieendpoint_req_queue_readable) | litepcieendpoint_req_queue_re));
assign litepcieendpoint_req_queue_level1 = (litepcieendpoint_req_queue_level0 + litepcieendpoint_req_queue_readable);
always @(*) begin
    litepcieendpoint_req_queue_wrport_adr <= 3'd0;
    if (litepcieendpoint_req_queue_replace) begin
        litepcieendpoint_req_queue_wrport_adr <= (litepcieendpoint_req_queue_produce - 1'd1);
    end else begin
        litepcieendpoint_req_queue_wrport_adr <= litepcieendpoint_req_queue_produce;
    end
end
assign litepcieendpoint_req_queue_wrport_dat_w = litepcieendpoint_req_queue_syncfifo_din;
assign litepcieendpoint_req_queue_wrport_we = (litepcieendpoint_req_queue_syncfifo_we & (litepcieendpoint_req_queue_syncfifo_writable | litepcieendpoint_req_queue_replace));
assign litepcieendpoint_req_queue_do_read = (litepcieendpoint_req_queue_syncfifo_readable & litepcieendpoint_req_queue_syncfifo_re);
assign litepcieendpoint_req_queue_rdport_adr = litepcieendpoint_req_queue_consume;
assign litepcieendpoint_req_queue_syncfifo_dout = litepcieendpoint_req_queue_rdport_dat_r;
assign litepcieendpoint_req_queue_rdport_re = litepcieendpoint_req_queue_do_read;
assign litepcieendpoint_req_queue_syncfifo_writable = (litepcieendpoint_req_queue_level0 != 4'd8);
assign litepcieendpoint_req_queue_syncfifo_readable = (litepcieendpoint_req_queue_level0 != 1'd0);
always @(*) begin
    litepcieendpoint_fsm0_next_state <= 2'd0;
    litepcieendpoint_fsm0_next_state <= litepcieendpoint_fsm0_state;
    case (litepcieendpoint_fsm0_state)
        1'd1: begin
            if (((litepcieendpoint_master_out_sink_valid & litepcieendpoint_master_out_sink_ready) & litepcieendpoint_master_out_sink_last)) begin
                litepcieendpoint_fsm0_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (((litepcieendpoint_master_out_sink_valid & litepcieendpoint_master_out_sink_ready) & litepcieendpoint_master_out_sink_last)) begin
                litepcieendpoint_fsm0_next_state <= 1'd0;
            end
        end
        default: begin
            if ((litepcieendpoint_master_in_sink_valid & litepcieendpoint_master_in_sink_first)) begin
                if (litepcieendpoint_master_in_sink_payload_we) begin
                    litepcieendpoint_fsm0_next_state <= 1'd1;
                end else begin
                    if ((litepcieendpoint_tag_queue_source_valid & litepcieendpoint_req_queue_sink_ready)) begin
                        litepcieendpoint_fsm0_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litepcieendpoint_req_queue_sink_valid <= 1'd0;
    case (litepcieendpoint_fsm0_state)
        1'd1: begin
        end
        2'd2: begin
            if (((litepcieendpoint_master_out_sink_valid & litepcieendpoint_master_out_sink_ready) & litepcieendpoint_master_out_sink_last)) begin
                litepcieendpoint_req_queue_sink_valid <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_sink_ready <= 1'd0;
    case (litepcieendpoint_fsm0_state)
        1'd1: begin
            litepcieendpoint_master_in_sink_ready <= litepcieendpoint_master_out_sink_ready;
        end
        2'd2: begin
            litepcieendpoint_master_in_sink_ready <= litepcieendpoint_master_out_sink_ready;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_out_sink_payload_tag <= 8'd0;
    case (litepcieendpoint_fsm0_state)
        1'd1: begin
            litepcieendpoint_master_out_sink_payload_tag <= 6'd32;
        end
        2'd2: begin
            litepcieendpoint_master_out_sink_payload_tag <= litepcieendpoint_tag_queue_source_payload_tag;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_tag_queue_source_ready <= 1'd0;
    case (litepcieendpoint_fsm0_state)
        1'd1: begin
        end
        2'd2: begin
            if (((litepcieendpoint_master_out_sink_valid & litepcieendpoint_master_out_sink_ready) & litepcieendpoint_master_out_sink_last)) begin
                litepcieendpoint_tag_queue_source_ready <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_out_sink_valid <= 1'd0;
    case (litepcieendpoint_fsm0_state)
        1'd1: begin
            litepcieendpoint_master_out_sink_valid <= litepcieendpoint_master_in_sink_valid;
        end
        2'd2: begin
            litepcieendpoint_master_out_sink_valid <= litepcieendpoint_master_in_sink_valid;
        end
        default: begin
        end
    endcase
end
assign litepcieendpoint_syncfifo0_syncfifo0_din = {litepcieendpoint_syncfifo0_fifo_in_last, litepcieendpoint_syncfifo0_fifo_in_first, litepcieendpoint_syncfifo0_fifo_in_payload_user_id, litepcieendpoint_syncfifo0_fifo_in_payload_channel, litepcieendpoint_syncfifo0_fifo_in_payload_dat, litepcieendpoint_syncfifo0_fifo_in_payload_tag, litepcieendpoint_syncfifo0_fifo_in_payload_err, litepcieendpoint_syncfifo0_fifo_in_payload_end, litepcieendpoint_syncfifo0_fifo_in_payload_len, litepcieendpoint_syncfifo0_fifo_in_payload_adr, litepcieendpoint_syncfifo0_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign {litepcieendpoint_syncfifo0_fifo_out_last, litepcieendpoint_syncfifo0_fifo_out_first, litepcieendpoint_syncfifo0_fifo_out_payload_user_id, litepcieendpoint_syncfifo0_fifo_out_payload_channel, litepcieendpoint_syncfifo0_fifo_out_payload_dat, litepcieendpoint_syncfifo0_fifo_out_payload_tag, litepcieendpoint_syncfifo0_fifo_out_payload_err, litepcieendpoint_syncfifo0_fifo_out_payload_end, litepcieendpoint_syncfifo0_fifo_out_payload_len, litepcieendpoint_syncfifo0_fifo_out_payload_adr, litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo0_fifo_out_payload_req_id} = litepcieendpoint_syncfifo0_syncfifo0_dout;
assign litepcieendpoint_syncfifo0_sink_ready = litepcieendpoint_syncfifo0_syncfifo0_writable;
assign litepcieendpoint_syncfifo0_syncfifo0_we = litepcieendpoint_syncfifo0_sink_valid;
assign litepcieendpoint_syncfifo0_fifo_in_first = litepcieendpoint_syncfifo0_sink_first;
assign litepcieendpoint_syncfifo0_fifo_in_last = litepcieendpoint_syncfifo0_sink_last;
assign litepcieendpoint_syncfifo0_fifo_in_payload_req_id = litepcieendpoint_syncfifo0_sink_payload_req_id;
assign litepcieendpoint_syncfifo0_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo0_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo0_fifo_in_payload_adr = litepcieendpoint_syncfifo0_sink_payload_adr;
assign litepcieendpoint_syncfifo0_fifo_in_payload_len = litepcieendpoint_syncfifo0_sink_payload_len;
assign litepcieendpoint_syncfifo0_fifo_in_payload_end = litepcieendpoint_syncfifo0_sink_payload_end;
assign litepcieendpoint_syncfifo0_fifo_in_payload_err = litepcieendpoint_syncfifo0_sink_payload_err;
assign litepcieendpoint_syncfifo0_fifo_in_payload_tag = litepcieendpoint_syncfifo0_sink_payload_tag;
assign litepcieendpoint_syncfifo0_fifo_in_payload_dat = litepcieendpoint_syncfifo0_sink_payload_dat;
assign litepcieendpoint_syncfifo0_fifo_in_payload_channel = litepcieendpoint_syncfifo0_sink_payload_channel;
assign litepcieendpoint_syncfifo0_fifo_in_payload_user_id = litepcieendpoint_syncfifo0_sink_payload_user_id;
assign litepcieendpoint_syncfifo0_source_valid = litepcieendpoint_syncfifo0_readable;
assign litepcieendpoint_syncfifo0_source_first = litepcieendpoint_syncfifo0_fifo_out_first;
assign litepcieendpoint_syncfifo0_source_last = litepcieendpoint_syncfifo0_fifo_out_last;
assign litepcieendpoint_syncfifo0_source_payload_req_id = litepcieendpoint_syncfifo0_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo0_source_payload_cmp_id = litepcieendpoint_syncfifo0_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo0_source_payload_adr = litepcieendpoint_syncfifo0_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo0_source_payload_len = litepcieendpoint_syncfifo0_fifo_out_payload_len;
assign litepcieendpoint_syncfifo0_source_payload_end = litepcieendpoint_syncfifo0_fifo_out_payload_end;
assign litepcieendpoint_syncfifo0_source_payload_err = litepcieendpoint_syncfifo0_fifo_out_payload_err;
assign litepcieendpoint_syncfifo0_source_payload_tag = litepcieendpoint_syncfifo0_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo0_source_payload_dat = litepcieendpoint_syncfifo0_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo0_source_payload_channel = litepcieendpoint_syncfifo0_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo0_source_payload_user_id = litepcieendpoint_syncfifo0_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo0_re = litepcieendpoint_syncfifo0_source_ready;
assign litepcieendpoint_syncfifo0_syncfifo0_re = (litepcieendpoint_syncfifo0_syncfifo0_readable & ((~litepcieendpoint_syncfifo0_readable) | litepcieendpoint_syncfifo0_re));
assign litepcieendpoint_syncfifo0_level1 = (litepcieendpoint_syncfifo0_level0 + litepcieendpoint_syncfifo0_readable);
always @(*) begin
    litepcieendpoint_syncfifo0_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo0_replace) begin
        litepcieendpoint_syncfifo0_wrport_adr <= (litepcieendpoint_syncfifo0_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo0_wrport_adr <= litepcieendpoint_syncfifo0_produce;
    end
end
assign litepcieendpoint_syncfifo0_wrport_dat_w = litepcieendpoint_syncfifo0_syncfifo0_din;
assign litepcieendpoint_syncfifo0_wrport_we = (litepcieendpoint_syncfifo0_syncfifo0_we & (litepcieendpoint_syncfifo0_syncfifo0_writable | litepcieendpoint_syncfifo0_replace));
assign litepcieendpoint_syncfifo0_do_read = (litepcieendpoint_syncfifo0_syncfifo0_readable & litepcieendpoint_syncfifo0_syncfifo0_re);
assign litepcieendpoint_syncfifo0_rdport_adr = litepcieendpoint_syncfifo0_consume;
assign litepcieendpoint_syncfifo0_syncfifo0_dout = litepcieendpoint_syncfifo0_rdport_dat_r;
assign litepcieendpoint_syncfifo0_rdport_re = litepcieendpoint_syncfifo0_do_read;
assign litepcieendpoint_syncfifo0_syncfifo0_writable = (litepcieendpoint_syncfifo0_level0 != 9'd256);
assign litepcieendpoint_syncfifo0_syncfifo0_readable = (litepcieendpoint_syncfifo0_level0 != 1'd0);
assign litepcieendpoint_syncfifo1_syncfifo1_din = {litepcieendpoint_syncfifo1_fifo_in_last, litepcieendpoint_syncfifo1_fifo_in_first, litepcieendpoint_syncfifo1_fifo_in_payload_user_id, litepcieendpoint_syncfifo1_fifo_in_payload_channel, litepcieendpoint_syncfifo1_fifo_in_payload_dat, litepcieendpoint_syncfifo1_fifo_in_payload_tag, litepcieendpoint_syncfifo1_fifo_in_payload_err, litepcieendpoint_syncfifo1_fifo_in_payload_end, litepcieendpoint_syncfifo1_fifo_in_payload_len, litepcieendpoint_syncfifo1_fifo_in_payload_adr, litepcieendpoint_syncfifo1_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign {litepcieendpoint_syncfifo1_fifo_out_last, litepcieendpoint_syncfifo1_fifo_out_first, litepcieendpoint_syncfifo1_fifo_out_payload_user_id, litepcieendpoint_syncfifo1_fifo_out_payload_channel, litepcieendpoint_syncfifo1_fifo_out_payload_dat, litepcieendpoint_syncfifo1_fifo_out_payload_tag, litepcieendpoint_syncfifo1_fifo_out_payload_err, litepcieendpoint_syncfifo1_fifo_out_payload_end, litepcieendpoint_syncfifo1_fifo_out_payload_len, litepcieendpoint_syncfifo1_fifo_out_payload_adr, litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo1_fifo_out_payload_req_id} = litepcieendpoint_syncfifo1_syncfifo1_dout;
assign litepcieendpoint_syncfifo1_sink_ready = litepcieendpoint_syncfifo1_syncfifo1_writable;
assign litepcieendpoint_syncfifo1_syncfifo1_we = litepcieendpoint_syncfifo1_sink_valid;
assign litepcieendpoint_syncfifo1_fifo_in_first = litepcieendpoint_syncfifo1_sink_first;
assign litepcieendpoint_syncfifo1_fifo_in_last = litepcieendpoint_syncfifo1_sink_last;
assign litepcieendpoint_syncfifo1_fifo_in_payload_req_id = litepcieendpoint_syncfifo1_sink_payload_req_id;
assign litepcieendpoint_syncfifo1_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo1_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo1_fifo_in_payload_adr = litepcieendpoint_syncfifo1_sink_payload_adr;
assign litepcieendpoint_syncfifo1_fifo_in_payload_len = litepcieendpoint_syncfifo1_sink_payload_len;
assign litepcieendpoint_syncfifo1_fifo_in_payload_end = litepcieendpoint_syncfifo1_sink_payload_end;
assign litepcieendpoint_syncfifo1_fifo_in_payload_err = litepcieendpoint_syncfifo1_sink_payload_err;
assign litepcieendpoint_syncfifo1_fifo_in_payload_tag = litepcieendpoint_syncfifo1_sink_payload_tag;
assign litepcieendpoint_syncfifo1_fifo_in_payload_dat = litepcieendpoint_syncfifo1_sink_payload_dat;
assign litepcieendpoint_syncfifo1_fifo_in_payload_channel = litepcieendpoint_syncfifo1_sink_payload_channel;
assign litepcieendpoint_syncfifo1_fifo_in_payload_user_id = litepcieendpoint_syncfifo1_sink_payload_user_id;
assign litepcieendpoint_syncfifo1_source_valid = litepcieendpoint_syncfifo1_readable;
assign litepcieendpoint_syncfifo1_source_first = litepcieendpoint_syncfifo1_fifo_out_first;
assign litepcieendpoint_syncfifo1_source_last = litepcieendpoint_syncfifo1_fifo_out_last;
assign litepcieendpoint_syncfifo1_source_payload_req_id = litepcieendpoint_syncfifo1_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo1_source_payload_cmp_id = litepcieendpoint_syncfifo1_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo1_source_payload_adr = litepcieendpoint_syncfifo1_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo1_source_payload_len = litepcieendpoint_syncfifo1_fifo_out_payload_len;
assign litepcieendpoint_syncfifo1_source_payload_end = litepcieendpoint_syncfifo1_fifo_out_payload_end;
assign litepcieendpoint_syncfifo1_source_payload_err = litepcieendpoint_syncfifo1_fifo_out_payload_err;
assign litepcieendpoint_syncfifo1_source_payload_tag = litepcieendpoint_syncfifo1_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo1_source_payload_dat = litepcieendpoint_syncfifo1_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo1_source_payload_channel = litepcieendpoint_syncfifo1_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo1_source_payload_user_id = litepcieendpoint_syncfifo1_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo1_re = litepcieendpoint_syncfifo1_source_ready;
assign litepcieendpoint_syncfifo1_syncfifo1_re = (litepcieendpoint_syncfifo1_syncfifo1_readable & ((~litepcieendpoint_syncfifo1_readable) | litepcieendpoint_syncfifo1_re));
assign litepcieendpoint_syncfifo1_level1 = (litepcieendpoint_syncfifo1_level0 + litepcieendpoint_syncfifo1_readable);
always @(*) begin
    litepcieendpoint_syncfifo1_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo1_replace) begin
        litepcieendpoint_syncfifo1_wrport_adr <= (litepcieendpoint_syncfifo1_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo1_wrport_adr <= litepcieendpoint_syncfifo1_produce;
    end
end
assign litepcieendpoint_syncfifo1_wrport_dat_w = litepcieendpoint_syncfifo1_syncfifo1_din;
assign litepcieendpoint_syncfifo1_wrport_we = (litepcieendpoint_syncfifo1_syncfifo1_we & (litepcieendpoint_syncfifo1_syncfifo1_writable | litepcieendpoint_syncfifo1_replace));
assign litepcieendpoint_syncfifo1_do_read = (litepcieendpoint_syncfifo1_syncfifo1_readable & litepcieendpoint_syncfifo1_syncfifo1_re);
assign litepcieendpoint_syncfifo1_rdport_adr = litepcieendpoint_syncfifo1_consume;
assign litepcieendpoint_syncfifo1_syncfifo1_dout = litepcieendpoint_syncfifo1_rdport_dat_r;
assign litepcieendpoint_syncfifo1_rdport_re = litepcieendpoint_syncfifo1_do_read;
assign litepcieendpoint_syncfifo1_syncfifo1_writable = (litepcieendpoint_syncfifo1_level0 != 9'd256);
assign litepcieendpoint_syncfifo1_syncfifo1_readable = (litepcieendpoint_syncfifo1_level0 != 1'd0);
assign litepcieendpoint_syncfifo2_syncfifo2_din = {litepcieendpoint_syncfifo2_fifo_in_last, litepcieendpoint_syncfifo2_fifo_in_first, litepcieendpoint_syncfifo2_fifo_in_payload_user_id, litepcieendpoint_syncfifo2_fifo_in_payload_channel, litepcieendpoint_syncfifo2_fifo_in_payload_dat, litepcieendpoint_syncfifo2_fifo_in_payload_tag, litepcieendpoint_syncfifo2_fifo_in_payload_err, litepcieendpoint_syncfifo2_fifo_in_payload_end, litepcieendpoint_syncfifo2_fifo_in_payload_len, litepcieendpoint_syncfifo2_fifo_in_payload_adr, litepcieendpoint_syncfifo2_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign {litepcieendpoint_syncfifo2_fifo_out_last, litepcieendpoint_syncfifo2_fifo_out_first, litepcieendpoint_syncfifo2_fifo_out_payload_user_id, litepcieendpoint_syncfifo2_fifo_out_payload_channel, litepcieendpoint_syncfifo2_fifo_out_payload_dat, litepcieendpoint_syncfifo2_fifo_out_payload_tag, litepcieendpoint_syncfifo2_fifo_out_payload_err, litepcieendpoint_syncfifo2_fifo_out_payload_end, litepcieendpoint_syncfifo2_fifo_out_payload_len, litepcieendpoint_syncfifo2_fifo_out_payload_adr, litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo2_fifo_out_payload_req_id} = litepcieendpoint_syncfifo2_syncfifo2_dout;
assign litepcieendpoint_syncfifo2_sink_ready = litepcieendpoint_syncfifo2_syncfifo2_writable;
assign litepcieendpoint_syncfifo2_syncfifo2_we = litepcieendpoint_syncfifo2_sink_valid;
assign litepcieendpoint_syncfifo2_fifo_in_first = litepcieendpoint_syncfifo2_sink_first;
assign litepcieendpoint_syncfifo2_fifo_in_last = litepcieendpoint_syncfifo2_sink_last;
assign litepcieendpoint_syncfifo2_fifo_in_payload_req_id = litepcieendpoint_syncfifo2_sink_payload_req_id;
assign litepcieendpoint_syncfifo2_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo2_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo2_fifo_in_payload_adr = litepcieendpoint_syncfifo2_sink_payload_adr;
assign litepcieendpoint_syncfifo2_fifo_in_payload_len = litepcieendpoint_syncfifo2_sink_payload_len;
assign litepcieendpoint_syncfifo2_fifo_in_payload_end = litepcieendpoint_syncfifo2_sink_payload_end;
assign litepcieendpoint_syncfifo2_fifo_in_payload_err = litepcieendpoint_syncfifo2_sink_payload_err;
assign litepcieendpoint_syncfifo2_fifo_in_payload_tag = litepcieendpoint_syncfifo2_sink_payload_tag;
assign litepcieendpoint_syncfifo2_fifo_in_payload_dat = litepcieendpoint_syncfifo2_sink_payload_dat;
assign litepcieendpoint_syncfifo2_fifo_in_payload_channel = litepcieendpoint_syncfifo2_sink_payload_channel;
assign litepcieendpoint_syncfifo2_fifo_in_payload_user_id = litepcieendpoint_syncfifo2_sink_payload_user_id;
assign litepcieendpoint_syncfifo2_source_valid = litepcieendpoint_syncfifo2_readable;
assign litepcieendpoint_syncfifo2_source_first = litepcieendpoint_syncfifo2_fifo_out_first;
assign litepcieendpoint_syncfifo2_source_last = litepcieendpoint_syncfifo2_fifo_out_last;
assign litepcieendpoint_syncfifo2_source_payload_req_id = litepcieendpoint_syncfifo2_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo2_source_payload_cmp_id = litepcieendpoint_syncfifo2_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo2_source_payload_adr = litepcieendpoint_syncfifo2_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo2_source_payload_len = litepcieendpoint_syncfifo2_fifo_out_payload_len;
assign litepcieendpoint_syncfifo2_source_payload_end = litepcieendpoint_syncfifo2_fifo_out_payload_end;
assign litepcieendpoint_syncfifo2_source_payload_err = litepcieendpoint_syncfifo2_fifo_out_payload_err;
assign litepcieendpoint_syncfifo2_source_payload_tag = litepcieendpoint_syncfifo2_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo2_source_payload_dat = litepcieendpoint_syncfifo2_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo2_source_payload_channel = litepcieendpoint_syncfifo2_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo2_source_payload_user_id = litepcieendpoint_syncfifo2_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo2_re = litepcieendpoint_syncfifo2_source_ready;
assign litepcieendpoint_syncfifo2_syncfifo2_re = (litepcieendpoint_syncfifo2_syncfifo2_readable & ((~litepcieendpoint_syncfifo2_readable) | litepcieendpoint_syncfifo2_re));
assign litepcieendpoint_syncfifo2_level1 = (litepcieendpoint_syncfifo2_level0 + litepcieendpoint_syncfifo2_readable);
always @(*) begin
    litepcieendpoint_syncfifo2_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo2_replace) begin
        litepcieendpoint_syncfifo2_wrport_adr <= (litepcieendpoint_syncfifo2_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo2_wrport_adr <= litepcieendpoint_syncfifo2_produce;
    end
end
assign litepcieendpoint_syncfifo2_wrport_dat_w = litepcieendpoint_syncfifo2_syncfifo2_din;
assign litepcieendpoint_syncfifo2_wrport_we = (litepcieendpoint_syncfifo2_syncfifo2_we & (litepcieendpoint_syncfifo2_syncfifo2_writable | litepcieendpoint_syncfifo2_replace));
assign litepcieendpoint_syncfifo2_do_read = (litepcieendpoint_syncfifo2_syncfifo2_readable & litepcieendpoint_syncfifo2_syncfifo2_re);
assign litepcieendpoint_syncfifo2_rdport_adr = litepcieendpoint_syncfifo2_consume;
assign litepcieendpoint_syncfifo2_syncfifo2_dout = litepcieendpoint_syncfifo2_rdport_dat_r;
assign litepcieendpoint_syncfifo2_rdport_re = litepcieendpoint_syncfifo2_do_read;
assign litepcieendpoint_syncfifo2_syncfifo2_writable = (litepcieendpoint_syncfifo2_level0 != 9'd256);
assign litepcieendpoint_syncfifo2_syncfifo2_readable = (litepcieendpoint_syncfifo2_level0 != 1'd0);
assign litepcieendpoint_syncfifo3_syncfifo3_din = {litepcieendpoint_syncfifo3_fifo_in_last, litepcieendpoint_syncfifo3_fifo_in_first, litepcieendpoint_syncfifo3_fifo_in_payload_user_id, litepcieendpoint_syncfifo3_fifo_in_payload_channel, litepcieendpoint_syncfifo3_fifo_in_payload_dat, litepcieendpoint_syncfifo3_fifo_in_payload_tag, litepcieendpoint_syncfifo3_fifo_in_payload_err, litepcieendpoint_syncfifo3_fifo_in_payload_end, litepcieendpoint_syncfifo3_fifo_in_payload_len, litepcieendpoint_syncfifo3_fifo_in_payload_adr, litepcieendpoint_syncfifo3_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign {litepcieendpoint_syncfifo3_fifo_out_last, litepcieendpoint_syncfifo3_fifo_out_first, litepcieendpoint_syncfifo3_fifo_out_payload_user_id, litepcieendpoint_syncfifo3_fifo_out_payload_channel, litepcieendpoint_syncfifo3_fifo_out_payload_dat, litepcieendpoint_syncfifo3_fifo_out_payload_tag, litepcieendpoint_syncfifo3_fifo_out_payload_err, litepcieendpoint_syncfifo3_fifo_out_payload_end, litepcieendpoint_syncfifo3_fifo_out_payload_len, litepcieendpoint_syncfifo3_fifo_out_payload_adr, litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo3_fifo_out_payload_req_id} = litepcieendpoint_syncfifo3_syncfifo3_dout;
assign litepcieendpoint_syncfifo3_sink_ready = litepcieendpoint_syncfifo3_syncfifo3_writable;
assign litepcieendpoint_syncfifo3_syncfifo3_we = litepcieendpoint_syncfifo3_sink_valid;
assign litepcieendpoint_syncfifo3_fifo_in_first = litepcieendpoint_syncfifo3_sink_first;
assign litepcieendpoint_syncfifo3_fifo_in_last = litepcieendpoint_syncfifo3_sink_last;
assign litepcieendpoint_syncfifo3_fifo_in_payload_req_id = litepcieendpoint_syncfifo3_sink_payload_req_id;
assign litepcieendpoint_syncfifo3_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo3_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo3_fifo_in_payload_adr = litepcieendpoint_syncfifo3_sink_payload_adr;
assign litepcieendpoint_syncfifo3_fifo_in_payload_len = litepcieendpoint_syncfifo3_sink_payload_len;
assign litepcieendpoint_syncfifo3_fifo_in_payload_end = litepcieendpoint_syncfifo3_sink_payload_end;
assign litepcieendpoint_syncfifo3_fifo_in_payload_err = litepcieendpoint_syncfifo3_sink_payload_err;
assign litepcieendpoint_syncfifo3_fifo_in_payload_tag = litepcieendpoint_syncfifo3_sink_payload_tag;
assign litepcieendpoint_syncfifo3_fifo_in_payload_dat = litepcieendpoint_syncfifo3_sink_payload_dat;
assign litepcieendpoint_syncfifo3_fifo_in_payload_channel = litepcieendpoint_syncfifo3_sink_payload_channel;
assign litepcieendpoint_syncfifo3_fifo_in_payload_user_id = litepcieendpoint_syncfifo3_sink_payload_user_id;
assign litepcieendpoint_syncfifo3_source_valid = litepcieendpoint_syncfifo3_readable;
assign litepcieendpoint_syncfifo3_source_first = litepcieendpoint_syncfifo3_fifo_out_first;
assign litepcieendpoint_syncfifo3_source_last = litepcieendpoint_syncfifo3_fifo_out_last;
assign litepcieendpoint_syncfifo3_source_payload_req_id = litepcieendpoint_syncfifo3_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo3_source_payload_cmp_id = litepcieendpoint_syncfifo3_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo3_source_payload_adr = litepcieendpoint_syncfifo3_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo3_source_payload_len = litepcieendpoint_syncfifo3_fifo_out_payload_len;
assign litepcieendpoint_syncfifo3_source_payload_end = litepcieendpoint_syncfifo3_fifo_out_payload_end;
assign litepcieendpoint_syncfifo3_source_payload_err = litepcieendpoint_syncfifo3_fifo_out_payload_err;
assign litepcieendpoint_syncfifo3_source_payload_tag = litepcieendpoint_syncfifo3_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo3_source_payload_dat = litepcieendpoint_syncfifo3_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo3_source_payload_channel = litepcieendpoint_syncfifo3_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo3_source_payload_user_id = litepcieendpoint_syncfifo3_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo3_re = litepcieendpoint_syncfifo3_source_ready;
assign litepcieendpoint_syncfifo3_syncfifo3_re = (litepcieendpoint_syncfifo3_syncfifo3_readable & ((~litepcieendpoint_syncfifo3_readable) | litepcieendpoint_syncfifo3_re));
assign litepcieendpoint_syncfifo3_level1 = (litepcieendpoint_syncfifo3_level0 + litepcieendpoint_syncfifo3_readable);
always @(*) begin
    litepcieendpoint_syncfifo3_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo3_replace) begin
        litepcieendpoint_syncfifo3_wrport_adr <= (litepcieendpoint_syncfifo3_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo3_wrport_adr <= litepcieendpoint_syncfifo3_produce;
    end
end
assign litepcieendpoint_syncfifo3_wrport_dat_w = litepcieendpoint_syncfifo3_syncfifo3_din;
assign litepcieendpoint_syncfifo3_wrport_we = (litepcieendpoint_syncfifo3_syncfifo3_we & (litepcieendpoint_syncfifo3_syncfifo3_writable | litepcieendpoint_syncfifo3_replace));
assign litepcieendpoint_syncfifo3_do_read = (litepcieendpoint_syncfifo3_syncfifo3_readable & litepcieendpoint_syncfifo3_syncfifo3_re);
assign litepcieendpoint_syncfifo3_rdport_adr = litepcieendpoint_syncfifo3_consume;
assign litepcieendpoint_syncfifo3_syncfifo3_dout = litepcieendpoint_syncfifo3_rdport_dat_r;
assign litepcieendpoint_syncfifo3_rdport_re = litepcieendpoint_syncfifo3_do_read;
assign litepcieendpoint_syncfifo3_syncfifo3_writable = (litepcieendpoint_syncfifo3_level0 != 9'd256);
assign litepcieendpoint_syncfifo3_syncfifo3_readable = (litepcieendpoint_syncfifo3_level0 != 1'd0);
assign litepcieendpoint_syncfifo4_syncfifo4_din = {litepcieendpoint_syncfifo4_fifo_in_last, litepcieendpoint_syncfifo4_fifo_in_first, litepcieendpoint_syncfifo4_fifo_in_payload_user_id, litepcieendpoint_syncfifo4_fifo_in_payload_channel, litepcieendpoint_syncfifo4_fifo_in_payload_dat, litepcieendpoint_syncfifo4_fifo_in_payload_tag, litepcieendpoint_syncfifo4_fifo_in_payload_err, litepcieendpoint_syncfifo4_fifo_in_payload_end, litepcieendpoint_syncfifo4_fifo_in_payload_len, litepcieendpoint_syncfifo4_fifo_in_payload_adr, litepcieendpoint_syncfifo4_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign {litepcieendpoint_syncfifo4_fifo_out_last, litepcieendpoint_syncfifo4_fifo_out_first, litepcieendpoint_syncfifo4_fifo_out_payload_user_id, litepcieendpoint_syncfifo4_fifo_out_payload_channel, litepcieendpoint_syncfifo4_fifo_out_payload_dat, litepcieendpoint_syncfifo4_fifo_out_payload_tag, litepcieendpoint_syncfifo4_fifo_out_payload_err, litepcieendpoint_syncfifo4_fifo_out_payload_end, litepcieendpoint_syncfifo4_fifo_out_payload_len, litepcieendpoint_syncfifo4_fifo_out_payload_adr, litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo4_fifo_out_payload_req_id} = litepcieendpoint_syncfifo4_syncfifo4_dout;
assign litepcieendpoint_syncfifo4_sink_ready = litepcieendpoint_syncfifo4_syncfifo4_writable;
assign litepcieendpoint_syncfifo4_syncfifo4_we = litepcieendpoint_syncfifo4_sink_valid;
assign litepcieendpoint_syncfifo4_fifo_in_first = litepcieendpoint_syncfifo4_sink_first;
assign litepcieendpoint_syncfifo4_fifo_in_last = litepcieendpoint_syncfifo4_sink_last;
assign litepcieendpoint_syncfifo4_fifo_in_payload_req_id = litepcieendpoint_syncfifo4_sink_payload_req_id;
assign litepcieendpoint_syncfifo4_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo4_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo4_fifo_in_payload_adr = litepcieendpoint_syncfifo4_sink_payload_adr;
assign litepcieendpoint_syncfifo4_fifo_in_payload_len = litepcieendpoint_syncfifo4_sink_payload_len;
assign litepcieendpoint_syncfifo4_fifo_in_payload_end = litepcieendpoint_syncfifo4_sink_payload_end;
assign litepcieendpoint_syncfifo4_fifo_in_payload_err = litepcieendpoint_syncfifo4_sink_payload_err;
assign litepcieendpoint_syncfifo4_fifo_in_payload_tag = litepcieendpoint_syncfifo4_sink_payload_tag;
assign litepcieendpoint_syncfifo4_fifo_in_payload_dat = litepcieendpoint_syncfifo4_sink_payload_dat;
assign litepcieendpoint_syncfifo4_fifo_in_payload_channel = litepcieendpoint_syncfifo4_sink_payload_channel;
assign litepcieendpoint_syncfifo4_fifo_in_payload_user_id = litepcieendpoint_syncfifo4_sink_payload_user_id;
assign litepcieendpoint_syncfifo4_source_valid = litepcieendpoint_syncfifo4_readable;
assign litepcieendpoint_syncfifo4_source_first = litepcieendpoint_syncfifo4_fifo_out_first;
assign litepcieendpoint_syncfifo4_source_last = litepcieendpoint_syncfifo4_fifo_out_last;
assign litepcieendpoint_syncfifo4_source_payload_req_id = litepcieendpoint_syncfifo4_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo4_source_payload_cmp_id = litepcieendpoint_syncfifo4_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo4_source_payload_adr = litepcieendpoint_syncfifo4_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo4_source_payload_len = litepcieendpoint_syncfifo4_fifo_out_payload_len;
assign litepcieendpoint_syncfifo4_source_payload_end = litepcieendpoint_syncfifo4_fifo_out_payload_end;
assign litepcieendpoint_syncfifo4_source_payload_err = litepcieendpoint_syncfifo4_fifo_out_payload_err;
assign litepcieendpoint_syncfifo4_source_payload_tag = litepcieendpoint_syncfifo4_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo4_source_payload_dat = litepcieendpoint_syncfifo4_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo4_source_payload_channel = litepcieendpoint_syncfifo4_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo4_source_payload_user_id = litepcieendpoint_syncfifo4_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo4_re = litepcieendpoint_syncfifo4_source_ready;
assign litepcieendpoint_syncfifo4_syncfifo4_re = (litepcieendpoint_syncfifo4_syncfifo4_readable & ((~litepcieendpoint_syncfifo4_readable) | litepcieendpoint_syncfifo4_re));
assign litepcieendpoint_syncfifo4_level1 = (litepcieendpoint_syncfifo4_level0 + litepcieendpoint_syncfifo4_readable);
always @(*) begin
    litepcieendpoint_syncfifo4_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo4_replace) begin
        litepcieendpoint_syncfifo4_wrport_adr <= (litepcieendpoint_syncfifo4_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo4_wrport_adr <= litepcieendpoint_syncfifo4_produce;
    end
end
assign litepcieendpoint_syncfifo4_wrport_dat_w = litepcieendpoint_syncfifo4_syncfifo4_din;
assign litepcieendpoint_syncfifo4_wrport_we = (litepcieendpoint_syncfifo4_syncfifo4_we & (litepcieendpoint_syncfifo4_syncfifo4_writable | litepcieendpoint_syncfifo4_replace));
assign litepcieendpoint_syncfifo4_do_read = (litepcieendpoint_syncfifo4_syncfifo4_readable & litepcieendpoint_syncfifo4_syncfifo4_re);
assign litepcieendpoint_syncfifo4_rdport_adr = litepcieendpoint_syncfifo4_consume;
assign litepcieendpoint_syncfifo4_syncfifo4_dout = litepcieendpoint_syncfifo4_rdport_dat_r;
assign litepcieendpoint_syncfifo4_rdport_re = litepcieendpoint_syncfifo4_do_read;
assign litepcieendpoint_syncfifo4_syncfifo4_writable = (litepcieendpoint_syncfifo4_level0 != 9'd256);
assign litepcieendpoint_syncfifo4_syncfifo4_readable = (litepcieendpoint_syncfifo4_level0 != 1'd0);
assign litepcieendpoint_syncfifo5_syncfifo5_din = {litepcieendpoint_syncfifo5_fifo_in_last, litepcieendpoint_syncfifo5_fifo_in_first, litepcieendpoint_syncfifo5_fifo_in_payload_user_id, litepcieendpoint_syncfifo5_fifo_in_payload_channel, litepcieendpoint_syncfifo5_fifo_in_payload_dat, litepcieendpoint_syncfifo5_fifo_in_payload_tag, litepcieendpoint_syncfifo5_fifo_in_payload_err, litepcieendpoint_syncfifo5_fifo_in_payload_end, litepcieendpoint_syncfifo5_fifo_in_payload_len, litepcieendpoint_syncfifo5_fifo_in_payload_adr, litepcieendpoint_syncfifo5_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign {litepcieendpoint_syncfifo5_fifo_out_last, litepcieendpoint_syncfifo5_fifo_out_first, litepcieendpoint_syncfifo5_fifo_out_payload_user_id, litepcieendpoint_syncfifo5_fifo_out_payload_channel, litepcieendpoint_syncfifo5_fifo_out_payload_dat, litepcieendpoint_syncfifo5_fifo_out_payload_tag, litepcieendpoint_syncfifo5_fifo_out_payload_err, litepcieendpoint_syncfifo5_fifo_out_payload_end, litepcieendpoint_syncfifo5_fifo_out_payload_len, litepcieendpoint_syncfifo5_fifo_out_payload_adr, litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo5_fifo_out_payload_req_id} = litepcieendpoint_syncfifo5_syncfifo5_dout;
assign litepcieendpoint_syncfifo5_sink_ready = litepcieendpoint_syncfifo5_syncfifo5_writable;
assign litepcieendpoint_syncfifo5_syncfifo5_we = litepcieendpoint_syncfifo5_sink_valid;
assign litepcieendpoint_syncfifo5_fifo_in_first = litepcieendpoint_syncfifo5_sink_first;
assign litepcieendpoint_syncfifo5_fifo_in_last = litepcieendpoint_syncfifo5_sink_last;
assign litepcieendpoint_syncfifo5_fifo_in_payload_req_id = litepcieendpoint_syncfifo5_sink_payload_req_id;
assign litepcieendpoint_syncfifo5_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo5_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo5_fifo_in_payload_adr = litepcieendpoint_syncfifo5_sink_payload_adr;
assign litepcieendpoint_syncfifo5_fifo_in_payload_len = litepcieendpoint_syncfifo5_sink_payload_len;
assign litepcieendpoint_syncfifo5_fifo_in_payload_end = litepcieendpoint_syncfifo5_sink_payload_end;
assign litepcieendpoint_syncfifo5_fifo_in_payload_err = litepcieendpoint_syncfifo5_sink_payload_err;
assign litepcieendpoint_syncfifo5_fifo_in_payload_tag = litepcieendpoint_syncfifo5_sink_payload_tag;
assign litepcieendpoint_syncfifo5_fifo_in_payload_dat = litepcieendpoint_syncfifo5_sink_payload_dat;
assign litepcieendpoint_syncfifo5_fifo_in_payload_channel = litepcieendpoint_syncfifo5_sink_payload_channel;
assign litepcieendpoint_syncfifo5_fifo_in_payload_user_id = litepcieendpoint_syncfifo5_sink_payload_user_id;
assign litepcieendpoint_syncfifo5_source_valid = litepcieendpoint_syncfifo5_readable;
assign litepcieendpoint_syncfifo5_source_first = litepcieendpoint_syncfifo5_fifo_out_first;
assign litepcieendpoint_syncfifo5_source_last = litepcieendpoint_syncfifo5_fifo_out_last;
assign litepcieendpoint_syncfifo5_source_payload_req_id = litepcieendpoint_syncfifo5_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo5_source_payload_cmp_id = litepcieendpoint_syncfifo5_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo5_source_payload_adr = litepcieendpoint_syncfifo5_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo5_source_payload_len = litepcieendpoint_syncfifo5_fifo_out_payload_len;
assign litepcieendpoint_syncfifo5_source_payload_end = litepcieendpoint_syncfifo5_fifo_out_payload_end;
assign litepcieendpoint_syncfifo5_source_payload_err = litepcieendpoint_syncfifo5_fifo_out_payload_err;
assign litepcieendpoint_syncfifo5_source_payload_tag = litepcieendpoint_syncfifo5_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo5_source_payload_dat = litepcieendpoint_syncfifo5_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo5_source_payload_channel = litepcieendpoint_syncfifo5_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo5_source_payload_user_id = litepcieendpoint_syncfifo5_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo5_re = litepcieendpoint_syncfifo5_source_ready;
assign litepcieendpoint_syncfifo5_syncfifo5_re = (litepcieendpoint_syncfifo5_syncfifo5_readable & ((~litepcieendpoint_syncfifo5_readable) | litepcieendpoint_syncfifo5_re));
assign litepcieendpoint_syncfifo5_level1 = (litepcieendpoint_syncfifo5_level0 + litepcieendpoint_syncfifo5_readable);
always @(*) begin
    litepcieendpoint_syncfifo5_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo5_replace) begin
        litepcieendpoint_syncfifo5_wrport_adr <= (litepcieendpoint_syncfifo5_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo5_wrport_adr <= litepcieendpoint_syncfifo5_produce;
    end
end
assign litepcieendpoint_syncfifo5_wrport_dat_w = litepcieendpoint_syncfifo5_syncfifo5_din;
assign litepcieendpoint_syncfifo5_wrport_we = (litepcieendpoint_syncfifo5_syncfifo5_we & (litepcieendpoint_syncfifo5_syncfifo5_writable | litepcieendpoint_syncfifo5_replace));
assign litepcieendpoint_syncfifo5_do_read = (litepcieendpoint_syncfifo5_syncfifo5_readable & litepcieendpoint_syncfifo5_syncfifo5_re);
assign litepcieendpoint_syncfifo5_rdport_adr = litepcieendpoint_syncfifo5_consume;
assign litepcieendpoint_syncfifo5_syncfifo5_dout = litepcieendpoint_syncfifo5_rdport_dat_r;
assign litepcieendpoint_syncfifo5_rdport_re = litepcieendpoint_syncfifo5_do_read;
assign litepcieendpoint_syncfifo5_syncfifo5_writable = (litepcieendpoint_syncfifo5_level0 != 9'd256);
assign litepcieendpoint_syncfifo5_syncfifo5_readable = (litepcieendpoint_syncfifo5_level0 != 1'd0);
assign litepcieendpoint_syncfifo6_syncfifo6_din = {litepcieendpoint_syncfifo6_fifo_in_last, litepcieendpoint_syncfifo6_fifo_in_first, litepcieendpoint_syncfifo6_fifo_in_payload_user_id, litepcieendpoint_syncfifo6_fifo_in_payload_channel, litepcieendpoint_syncfifo6_fifo_in_payload_dat, litepcieendpoint_syncfifo6_fifo_in_payload_tag, litepcieendpoint_syncfifo6_fifo_in_payload_err, litepcieendpoint_syncfifo6_fifo_in_payload_end, litepcieendpoint_syncfifo6_fifo_in_payload_len, litepcieendpoint_syncfifo6_fifo_in_payload_adr, litepcieendpoint_syncfifo6_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign {litepcieendpoint_syncfifo6_fifo_out_last, litepcieendpoint_syncfifo6_fifo_out_first, litepcieendpoint_syncfifo6_fifo_out_payload_user_id, litepcieendpoint_syncfifo6_fifo_out_payload_channel, litepcieendpoint_syncfifo6_fifo_out_payload_dat, litepcieendpoint_syncfifo6_fifo_out_payload_tag, litepcieendpoint_syncfifo6_fifo_out_payload_err, litepcieendpoint_syncfifo6_fifo_out_payload_end, litepcieendpoint_syncfifo6_fifo_out_payload_len, litepcieendpoint_syncfifo6_fifo_out_payload_adr, litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo6_fifo_out_payload_req_id} = litepcieendpoint_syncfifo6_syncfifo6_dout;
assign litepcieendpoint_syncfifo6_sink_ready = litepcieendpoint_syncfifo6_syncfifo6_writable;
assign litepcieendpoint_syncfifo6_syncfifo6_we = litepcieendpoint_syncfifo6_sink_valid;
assign litepcieendpoint_syncfifo6_fifo_in_first = litepcieendpoint_syncfifo6_sink_first;
assign litepcieendpoint_syncfifo6_fifo_in_last = litepcieendpoint_syncfifo6_sink_last;
assign litepcieendpoint_syncfifo6_fifo_in_payload_req_id = litepcieendpoint_syncfifo6_sink_payload_req_id;
assign litepcieendpoint_syncfifo6_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo6_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo6_fifo_in_payload_adr = litepcieendpoint_syncfifo6_sink_payload_adr;
assign litepcieendpoint_syncfifo6_fifo_in_payload_len = litepcieendpoint_syncfifo6_sink_payload_len;
assign litepcieendpoint_syncfifo6_fifo_in_payload_end = litepcieendpoint_syncfifo6_sink_payload_end;
assign litepcieendpoint_syncfifo6_fifo_in_payload_err = litepcieendpoint_syncfifo6_sink_payload_err;
assign litepcieendpoint_syncfifo6_fifo_in_payload_tag = litepcieendpoint_syncfifo6_sink_payload_tag;
assign litepcieendpoint_syncfifo6_fifo_in_payload_dat = litepcieendpoint_syncfifo6_sink_payload_dat;
assign litepcieendpoint_syncfifo6_fifo_in_payload_channel = litepcieendpoint_syncfifo6_sink_payload_channel;
assign litepcieendpoint_syncfifo6_fifo_in_payload_user_id = litepcieendpoint_syncfifo6_sink_payload_user_id;
assign litepcieendpoint_syncfifo6_source_valid = litepcieendpoint_syncfifo6_readable;
assign litepcieendpoint_syncfifo6_source_first = litepcieendpoint_syncfifo6_fifo_out_first;
assign litepcieendpoint_syncfifo6_source_last = litepcieendpoint_syncfifo6_fifo_out_last;
assign litepcieendpoint_syncfifo6_source_payload_req_id = litepcieendpoint_syncfifo6_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo6_source_payload_cmp_id = litepcieendpoint_syncfifo6_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo6_source_payload_adr = litepcieendpoint_syncfifo6_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo6_source_payload_len = litepcieendpoint_syncfifo6_fifo_out_payload_len;
assign litepcieendpoint_syncfifo6_source_payload_end = litepcieendpoint_syncfifo6_fifo_out_payload_end;
assign litepcieendpoint_syncfifo6_source_payload_err = litepcieendpoint_syncfifo6_fifo_out_payload_err;
assign litepcieendpoint_syncfifo6_source_payload_tag = litepcieendpoint_syncfifo6_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo6_source_payload_dat = litepcieendpoint_syncfifo6_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo6_source_payload_channel = litepcieendpoint_syncfifo6_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo6_source_payload_user_id = litepcieendpoint_syncfifo6_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo6_re = litepcieendpoint_syncfifo6_source_ready;
assign litepcieendpoint_syncfifo6_syncfifo6_re = (litepcieendpoint_syncfifo6_syncfifo6_readable & ((~litepcieendpoint_syncfifo6_readable) | litepcieendpoint_syncfifo6_re));
assign litepcieendpoint_syncfifo6_level1 = (litepcieendpoint_syncfifo6_level0 + litepcieendpoint_syncfifo6_readable);
always @(*) begin
    litepcieendpoint_syncfifo6_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo6_replace) begin
        litepcieendpoint_syncfifo6_wrport_adr <= (litepcieendpoint_syncfifo6_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo6_wrport_adr <= litepcieendpoint_syncfifo6_produce;
    end
end
assign litepcieendpoint_syncfifo6_wrport_dat_w = litepcieendpoint_syncfifo6_syncfifo6_din;
assign litepcieendpoint_syncfifo6_wrport_we = (litepcieendpoint_syncfifo6_syncfifo6_we & (litepcieendpoint_syncfifo6_syncfifo6_writable | litepcieendpoint_syncfifo6_replace));
assign litepcieendpoint_syncfifo6_do_read = (litepcieendpoint_syncfifo6_syncfifo6_readable & litepcieendpoint_syncfifo6_syncfifo6_re);
assign litepcieendpoint_syncfifo6_rdport_adr = litepcieendpoint_syncfifo6_consume;
assign litepcieendpoint_syncfifo6_syncfifo6_dout = litepcieendpoint_syncfifo6_rdport_dat_r;
assign litepcieendpoint_syncfifo6_rdport_re = litepcieendpoint_syncfifo6_do_read;
assign litepcieendpoint_syncfifo6_syncfifo6_writable = (litepcieendpoint_syncfifo6_level0 != 9'd256);
assign litepcieendpoint_syncfifo6_syncfifo6_readable = (litepcieendpoint_syncfifo6_level0 != 1'd0);
assign litepcieendpoint_syncfifo7_syncfifo7_din = {litepcieendpoint_syncfifo7_fifo_in_last, litepcieendpoint_syncfifo7_fifo_in_first, litepcieendpoint_syncfifo7_fifo_in_payload_user_id, litepcieendpoint_syncfifo7_fifo_in_payload_channel, litepcieendpoint_syncfifo7_fifo_in_payload_dat, litepcieendpoint_syncfifo7_fifo_in_payload_tag, litepcieendpoint_syncfifo7_fifo_in_payload_err, litepcieendpoint_syncfifo7_fifo_in_payload_end, litepcieendpoint_syncfifo7_fifo_in_payload_len, litepcieendpoint_syncfifo7_fifo_in_payload_adr, litepcieendpoint_syncfifo7_fifo_in_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_in_payload_req_id};
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign {litepcieendpoint_syncfifo7_fifo_out_last, litepcieendpoint_syncfifo7_fifo_out_first, litepcieendpoint_syncfifo7_fifo_out_payload_user_id, litepcieendpoint_syncfifo7_fifo_out_payload_channel, litepcieendpoint_syncfifo7_fifo_out_payload_dat, litepcieendpoint_syncfifo7_fifo_out_payload_tag, litepcieendpoint_syncfifo7_fifo_out_payload_err, litepcieendpoint_syncfifo7_fifo_out_payload_end, litepcieendpoint_syncfifo7_fifo_out_payload_len, litepcieendpoint_syncfifo7_fifo_out_payload_adr, litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id, litepcieendpoint_syncfifo7_fifo_out_payload_req_id} = litepcieendpoint_syncfifo7_syncfifo7_dout;
assign litepcieendpoint_syncfifo7_sink_ready = litepcieendpoint_syncfifo7_syncfifo7_writable;
assign litepcieendpoint_syncfifo7_syncfifo7_we = litepcieendpoint_syncfifo7_sink_valid;
assign litepcieendpoint_syncfifo7_fifo_in_first = litepcieendpoint_syncfifo7_sink_first;
assign litepcieendpoint_syncfifo7_fifo_in_last = litepcieendpoint_syncfifo7_sink_last;
assign litepcieendpoint_syncfifo7_fifo_in_payload_req_id = litepcieendpoint_syncfifo7_sink_payload_req_id;
assign litepcieendpoint_syncfifo7_fifo_in_payload_cmp_id = litepcieendpoint_syncfifo7_sink_payload_cmp_id;
assign litepcieendpoint_syncfifo7_fifo_in_payload_adr = litepcieendpoint_syncfifo7_sink_payload_adr;
assign litepcieendpoint_syncfifo7_fifo_in_payload_len = litepcieendpoint_syncfifo7_sink_payload_len;
assign litepcieendpoint_syncfifo7_fifo_in_payload_end = litepcieendpoint_syncfifo7_sink_payload_end;
assign litepcieendpoint_syncfifo7_fifo_in_payload_err = litepcieendpoint_syncfifo7_sink_payload_err;
assign litepcieendpoint_syncfifo7_fifo_in_payload_tag = litepcieendpoint_syncfifo7_sink_payload_tag;
assign litepcieendpoint_syncfifo7_fifo_in_payload_dat = litepcieendpoint_syncfifo7_sink_payload_dat;
assign litepcieendpoint_syncfifo7_fifo_in_payload_channel = litepcieendpoint_syncfifo7_sink_payload_channel;
assign litepcieendpoint_syncfifo7_fifo_in_payload_user_id = litepcieendpoint_syncfifo7_sink_payload_user_id;
assign litepcieendpoint_syncfifo7_source_valid = litepcieendpoint_syncfifo7_readable;
assign litepcieendpoint_syncfifo7_source_first = litepcieendpoint_syncfifo7_fifo_out_first;
assign litepcieendpoint_syncfifo7_source_last = litepcieendpoint_syncfifo7_fifo_out_last;
assign litepcieendpoint_syncfifo7_source_payload_req_id = litepcieendpoint_syncfifo7_fifo_out_payload_req_id;
assign litepcieendpoint_syncfifo7_source_payload_cmp_id = litepcieendpoint_syncfifo7_fifo_out_payload_cmp_id;
assign litepcieendpoint_syncfifo7_source_payload_adr = litepcieendpoint_syncfifo7_fifo_out_payload_adr;
assign litepcieendpoint_syncfifo7_source_payload_len = litepcieendpoint_syncfifo7_fifo_out_payload_len;
assign litepcieendpoint_syncfifo7_source_payload_end = litepcieendpoint_syncfifo7_fifo_out_payload_end;
assign litepcieendpoint_syncfifo7_source_payload_err = litepcieendpoint_syncfifo7_fifo_out_payload_err;
assign litepcieendpoint_syncfifo7_source_payload_tag = litepcieendpoint_syncfifo7_fifo_out_payload_tag;
assign litepcieendpoint_syncfifo7_source_payload_dat = litepcieendpoint_syncfifo7_fifo_out_payload_dat;
assign litepcieendpoint_syncfifo7_source_payload_channel = litepcieendpoint_syncfifo7_fifo_out_payload_channel;
assign litepcieendpoint_syncfifo7_source_payload_user_id = litepcieendpoint_syncfifo7_fifo_out_payload_user_id;
assign litepcieendpoint_syncfifo7_re = litepcieendpoint_syncfifo7_source_ready;
assign litepcieendpoint_syncfifo7_syncfifo7_re = (litepcieendpoint_syncfifo7_syncfifo7_readable & ((~litepcieendpoint_syncfifo7_readable) | litepcieendpoint_syncfifo7_re));
assign litepcieendpoint_syncfifo7_level1 = (litepcieendpoint_syncfifo7_level0 + litepcieendpoint_syncfifo7_readable);
always @(*) begin
    litepcieendpoint_syncfifo7_wrport_adr <= 8'd0;
    if (litepcieendpoint_syncfifo7_replace) begin
        litepcieendpoint_syncfifo7_wrport_adr <= (litepcieendpoint_syncfifo7_produce - 1'd1);
    end else begin
        litepcieendpoint_syncfifo7_wrport_adr <= litepcieendpoint_syncfifo7_produce;
    end
end
assign litepcieendpoint_syncfifo7_wrport_dat_w = litepcieendpoint_syncfifo7_syncfifo7_din;
assign litepcieendpoint_syncfifo7_wrport_we = (litepcieendpoint_syncfifo7_syncfifo7_we & (litepcieendpoint_syncfifo7_syncfifo7_writable | litepcieendpoint_syncfifo7_replace));
assign litepcieendpoint_syncfifo7_do_read = (litepcieendpoint_syncfifo7_syncfifo7_readable & litepcieendpoint_syncfifo7_syncfifo7_re);
assign litepcieendpoint_syncfifo7_rdport_adr = litepcieendpoint_syncfifo7_consume;
assign litepcieendpoint_syncfifo7_syncfifo7_dout = litepcieendpoint_syncfifo7_rdport_dat_r;
assign litepcieendpoint_syncfifo7_rdport_re = litepcieendpoint_syncfifo7_do_read;
assign litepcieendpoint_syncfifo7_syncfifo7_writable = (litepcieendpoint_syncfifo7_level0 != 9'd256);
assign litepcieendpoint_syncfifo7_syncfifo7_readable = (litepcieendpoint_syncfifo7_level0 != 1'd0);
always @(*) begin
    litepcieendpoint_fsm1_next_state <= 2'd0;
    litepcieendpoint_fsm1_next_state <= litepcieendpoint_fsm1_state;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
            if ((litepcieendpoint_master_out_source_valid & litepcieendpoint_master_out_source_first)) begin
                litepcieendpoint_fsm1_next_state <= 2'd2;
            end else begin
            end
        end
        2'd2: begin
            if (((litepcieendpoint_master_out_source_valid & litepcieendpoint_master_out_source_ready) & litepcieendpoint_master_out_source_last)) begin
                litepcieendpoint_fsm1_next_state <= 1'd1;
            end
        end
        default: begin
            if ((litepcieendpoint_fill_tag == 3'd7)) begin
                litepcieendpoint_fsm1_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litepcieendpoint_tag_queue_sink_valid <= 1'd0;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
        end
        2'd2: begin
            if (((litepcieendpoint_master_out_source_valid & litepcieendpoint_master_out_source_ready) & litepcieendpoint_master_out_source_last)) begin
                if (litepcieendpoint_master_out_source_payload_end) begin
                    litepcieendpoint_tag_queue_sink_valid <= 1'd1;
                end
            end
        end
        default: begin
            litepcieendpoint_tag_queue_sink_valid <= 1'd1;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_out_source_ready <= 1'd0;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
            if ((litepcieendpoint_master_out_source_valid & litepcieendpoint_master_out_source_first)) begin
            end else begin
                litepcieendpoint_master_out_source_ready <= 1'd1;
            end
        end
        2'd2: begin
            litepcieendpoint_master_out_source_ready <= litepcieendpoint_cmp_reorder_ready;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_cmp_reorder_valid <= 1'd0;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
        end
        2'd2: begin
            litepcieendpoint_cmp_reorder_valid <= litepcieendpoint_master_out_source_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_tag_queue_sink_payload_tag <= 3'd0;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
        end
        2'd2: begin
            if (((litepcieendpoint_master_out_source_valid & litepcieendpoint_master_out_source_ready) & litepcieendpoint_master_out_source_last)) begin
                if (litepcieendpoint_master_out_source_payload_end) begin
                    litepcieendpoint_tag_queue_sink_payload_tag <= litepcieendpoint_master_out_source_payload_tag;
                end
            end
        end
        default: begin
            litepcieendpoint_tag_queue_sink_payload_tag <= litepcieendpoint_fill_tag;
        end
    endcase
end
always @(*) begin
    litepcieendpoint_fill_tag_litepciecrossbar_next_value <= 3'd0;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            litepcieendpoint_fill_tag_litepciecrossbar_next_value <= (litepcieendpoint_fill_tag + 1'd1);
        end
    endcase
end
always @(*) begin
    litepcieendpoint_fill_tag_litepciecrossbar_next_value_ce <= 1'd0;
    case (litepcieendpoint_fsm1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            litepcieendpoint_fill_tag_litepciecrossbar_next_value_ce <= 1'd1;
        end
    endcase
end
assign litepcieendpoint_master_in_sink_valid = pcie_msi_sink_valid;
assign pcie_msi_sink_ready = litepcieendpoint_master_in_sink_ready;
assign litepcieendpoint_master_in_sink_first = pcie_msi_sink_first;
assign litepcieendpoint_master_in_sink_last = pcie_msi_sink_last;
assign litepcieendpoint_master_in_sink_payload_req_id = pcie_msi_sink_payload_req_id;
assign litepcieendpoint_master_in_sink_payload_we = pcie_msi_sink_payload_we;
assign litepcieendpoint_master_in_sink_payload_adr = pcie_msi_sink_payload_adr;
assign litepcieendpoint_master_in_sink_payload_len = pcie_msi_sink_payload_len;
assign litepcieendpoint_master_in_sink_payload_tag = pcie_msi_sink_payload_tag;
assign litepcieendpoint_master_in_sink_payload_dat = pcie_msi_sink_payload_dat;
assign litepcieendpoint_master_in_sink_payload_channel = pcie_msi_sink_payload_channel;
assign litepcieendpoint_master_in_sink_payload_user_id = pcie_msi_sink_payload_user_id;
always @(*) begin
    litepcieendpoint_m_dispatcher_sel1 <= 1'd0;
    if (litepcieendpoint_m_dispatcher_first) begin
        litepcieendpoint_m_dispatcher_sel1 <= litepcieendpoint_m_dispatcher_sel0;
    end else begin
        litepcieendpoint_m_dispatcher_sel1 <= litepcieendpoint_m_dispatcher_sel_ongoing;
    end
end
always @(*) begin
    pcie_msi_source_valid <= 1'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_valid <= litepcieendpoint_master_in_source_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_first <= 1'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_first <= litepcieendpoint_master_in_source_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_last <= 1'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_last <= litepcieendpoint_master_in_source_last;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_req_id <= 16'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_req_id <= litepcieendpoint_master_in_source_payload_req_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_cmp_id <= 16'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_cmp_id <= litepcieendpoint_master_in_source_payload_cmp_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_adr <= 32'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_adr <= litepcieendpoint_master_in_source_payload_adr;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_len <= 10'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_len <= litepcieendpoint_master_in_source_payload_len;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_end <= 1'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_end <= litepcieendpoint_master_in_source_payload_end;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_err <= 1'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_err <= litepcieendpoint_master_in_source_payload_err;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_tag <= 8'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_tag <= litepcieendpoint_master_in_source_payload_tag;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_dat <= 64'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_dat <= litepcieendpoint_master_in_source_payload_dat;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litepcieendpoint_master_in_source_ready <= 1'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            litepcieendpoint_master_in_source_ready <= pcie_msi_source_ready;
        end
        default: begin
            litepcieendpoint_master_in_source_ready <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_channel <= 8'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_channel <= litepcieendpoint_master_in_source_payload_channel;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_source_payload_user_id <= 8'd0;
    case (litepcieendpoint_m_dispatcher_sel1)
        1'd1: begin
            pcie_msi_source_payload_user_id <= litepcieendpoint_master_in_source_payload_user_id;
        end
        default: begin
        end
    endcase
end
assign litepcieendpoint_m_dispatcher_last = ((litepcieendpoint_master_in_source_valid & litepcieendpoint_master_in_source_last) & litepcieendpoint_master_in_source_ready);
assign litepcieendpoint_m_dispatcher_ongoing0 = ((litepcieendpoint_master_in_source_valid | litepcieendpoint_m_dispatcher_ongoing1) & (~litepcieendpoint_m_dispatcher_last));
assign master_sink_valid = litepcieendpoint_master_out_sink_valid;
assign litepcieendpoint_master_out_sink_ready = master_sink_ready;
assign master_sink_first = litepcieendpoint_master_out_sink_first;
assign master_sink_last = litepcieendpoint_master_out_sink_last;
assign master_sink_payload_req_id = litepcieendpoint_master_out_sink_payload_req_id;
assign master_sink_payload_we = litepcieendpoint_master_out_sink_payload_we;
assign master_sink_payload_adr = litepcieendpoint_master_out_sink_payload_adr;
assign master_sink_payload_len = litepcieendpoint_master_out_sink_payload_len;
assign master_sink_payload_tag = litepcieendpoint_master_out_sink_payload_tag;
assign master_sink_payload_dat = litepcieendpoint_master_out_sink_payload_dat;
assign master_sink_payload_channel = litepcieendpoint_master_out_sink_payload_channel;
assign master_sink_payload_user_id = litepcieendpoint_master_out_sink_payload_user_id;
always @(*) begin
    litepciewishbonemaster_next_state <= 2'd0;
    litepciewishbonemaster_next_state <= litepciewishbonemaster_state;
    case (litepciewishbonemaster_state)
        1'd1: begin
            if (pcie_wishbone_master_bus_ack) begin
                litepciewishbonemaster_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (pcie_wishbone_master_bus_ack) begin
                litepciewishbonemaster_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (pcie_wishbone_master_sink_ready) begin
                litepciewishbonemaster_next_state <= 1'd0;
            end
        end
        default: begin
            if ((pcie_wishbone_master_source_valid & pcie_wishbone_master_source_first)) begin
                if (pcie_wishbone_master_source_payload_we) begin
                    litepciewishbonemaster_next_state <= 1'd1;
                end else begin
                    litepciewishbonemaster_next_state <= 2'd2;
                end
            end else begin
            end
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_bus_we <= 1'd0;
    case (litepciewishbonemaster_state)
        1'd1: begin
            pcie_wishbone_master_bus_we <= 1'd1;
        end
        2'd2: begin
            pcie_wishbone_master_bus_we <= 1'd0;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_source_ready <= 1'd0;
    case (litepciewishbonemaster_state)
        1'd1: begin
            if (pcie_wishbone_master_bus_ack) begin
                pcie_wishbone_master_source_ready <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_wishbone_master_sink_ready) begin
                pcie_wishbone_master_source_ready <= 1'd1;
            end
        end
        default: begin
            if ((pcie_wishbone_master_source_valid & pcie_wishbone_master_source_first)) begin
            end else begin
                pcie_wishbone_master_source_ready <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_sink_valid <= 1'd0;
    case (litepciewishbonemaster_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            pcie_wishbone_master_sink_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_update_dat <= 1'd0;
    case (litepciewishbonemaster_state)
        1'd1: begin
        end
        2'd2: begin
            if (pcie_wishbone_master_bus_ack) begin
                pcie_wishbone_master_update_dat <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_bus_cyc <= 1'd0;
    case (litepciewishbonemaster_state)
        1'd1: begin
            pcie_wishbone_master_bus_cyc <= 1'd1;
        end
        2'd2: begin
            pcie_wishbone_master_bus_cyc <= 1'd1;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_wishbone_master_bus_stb <= 1'd0;
    case (litepciewishbonemaster_state)
        1'd1: begin
            pcie_wishbone_master_bus_stb <= 1'd1;
        end
        2'd2: begin
            pcie_wishbone_master_bus_stb <= 1'd1;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
assign addr = (wb_adr - 1'd0);
always @(*) begin
    wishbone2axilite_next_state <= 2'd0;
    wishbone2axilite_next_state <= wishbone2axilite_state;
    case (wishbone2axilite_state)
        1'd1: begin
            if ((b_valid & b_ready)) begin
                if ((b_payload_resp == 1'd0)) begin
                    wishbone2axilite_next_state <= 1'd0;
                end else begin
                    wishbone2axilite_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if ((r_valid & r_ready)) begin
                if ((r_payload_resp == 1'd0)) begin
                    wishbone2axilite_next_state <= 1'd0;
                end else begin
                    wishbone2axilite_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            wishbone2axilite_next_state <= 1'd0;
        end
        default: begin
            if ((wb_stb & wb_cyc)) begin
                if (wb_we) begin
                    wishbone2axilite_next_state <= 1'd1;
                end else begin
                    wishbone2axilite_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    r_ready <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
        end
        2'd2: begin
            r_ready <= cmd_done;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    cmd_done_wishbone2axilite_next_value0 <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            if ((aw_valid & aw_ready)) begin
                cmd_done_wishbone2axilite_next_value0 <= 1'd1;
            end
        end
        2'd2: begin
            if ((ar_valid & ar_ready)) begin
                cmd_done_wishbone2axilite_next_value0 <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
            cmd_done_wishbone2axilite_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    cmd_done_wishbone2axilite_next_value_ce0 <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            if ((aw_valid & aw_ready)) begin
                cmd_done_wishbone2axilite_next_value_ce0 <= 1'd1;
            end
        end
        2'd2: begin
            if ((ar_valid & ar_ready)) begin
                cmd_done_wishbone2axilite_next_value_ce0 <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
            cmd_done_wishbone2axilite_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    w_payload_data <= 32'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            w_payload_data <= wb_dat_w;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    w_payload_strb <= 4'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            w_payload_strb <= wb_sel;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    wb_ack <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            if ((b_valid & b_ready)) begin
                if ((b_payload_resp == 1'd0)) begin
                    wb_ack <= 1'd1;
                end else begin
                end
            end
        end
        2'd2: begin
            if ((r_valid & r_ready)) begin
                if ((r_payload_resp == 1'd0)) begin
                    wb_ack <= 1'd1;
                end else begin
                end
            end
        end
        2'd3: begin
            wb_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    data_done_wishbone2axilite_next_value1 <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            if ((w_valid & w_ready)) begin
                data_done_wishbone2axilite_next_value1 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            data_done_wishbone2axilite_next_value1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    data_done_wishbone2axilite_next_value_ce1 <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            if ((w_valid & w_ready)) begin
                data_done_wishbone2axilite_next_value_ce1 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            data_done_wishbone2axilite_next_value_ce1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    b_ready <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            b_ready <= (cmd_done & data_done);
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    wb_err <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            wb_err <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    aw_valid <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            aw_valid <= (~cmd_done);
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ar_valid <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
        end
        2'd2: begin
            ar_valid <= (~cmd_done);
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    aw_payload_addr <= 32'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            aw_payload_addr[31:2] <= addr;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ar_payload_addr <= 32'd0;
    case (wishbone2axilite_state)
        1'd1: begin
        end
        2'd2: begin
            ar_payload_addr[31:2] <= addr;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    w_valid <= 1'd0;
    case (wishbone2axilite_state)
        1'd1: begin
            w_valid <= (~data_done);
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    wb_dat_r <= 32'd0;
    case (wishbone2axilite_state)
        1'd1: begin
        end
        2'd2: begin
            if ((r_valid & r_ready)) begin
                if ((r_payload_resp == 1'd0)) begin
                    wb_dat_r <= r_payload_data;
                end else begin
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
assign pcie_msi_enable = pcie_msi_enable_storage;
assign pcie_msi_pba_status = pcie_msi_vector;
always @(*) begin
    pcie_msi_msix_clear <= 64'd0;
    if (pcie_msi_vector[63]) begin
        pcie_msi_msix_clear <= 64'd9223372036854775808;
    end
    if (pcie_msi_vector[62]) begin
        pcie_msi_msix_clear <= 63'd4611686018427387904;
    end
    if (pcie_msi_vector[61]) begin
        pcie_msi_msix_clear <= 62'd2305843009213693952;
    end
    if (pcie_msi_vector[60]) begin
        pcie_msi_msix_clear <= 61'd1152921504606846976;
    end
    if (pcie_msi_vector[59]) begin
        pcie_msi_msix_clear <= 60'd576460752303423488;
    end
    if (pcie_msi_vector[58]) begin
        pcie_msi_msix_clear <= 59'd288230376151711744;
    end
    if (pcie_msi_vector[57]) begin
        pcie_msi_msix_clear <= 58'd144115188075855872;
    end
    if (pcie_msi_vector[56]) begin
        pcie_msi_msix_clear <= 57'd72057594037927936;
    end
    if (pcie_msi_vector[55]) begin
        pcie_msi_msix_clear <= 56'd36028797018963968;
    end
    if (pcie_msi_vector[54]) begin
        pcie_msi_msix_clear <= 55'd18014398509481984;
    end
    if (pcie_msi_vector[53]) begin
        pcie_msi_msix_clear <= 54'd9007199254740992;
    end
    if (pcie_msi_vector[52]) begin
        pcie_msi_msix_clear <= 53'd4503599627370496;
    end
    if (pcie_msi_vector[51]) begin
        pcie_msi_msix_clear <= 52'd2251799813685248;
    end
    if (pcie_msi_vector[50]) begin
        pcie_msi_msix_clear <= 51'd1125899906842624;
    end
    if (pcie_msi_vector[49]) begin
        pcie_msi_msix_clear <= 50'd562949953421312;
    end
    if (pcie_msi_vector[48]) begin
        pcie_msi_msix_clear <= 49'd281474976710656;
    end
    if (pcie_msi_vector[47]) begin
        pcie_msi_msix_clear <= 48'd140737488355328;
    end
    if (pcie_msi_vector[46]) begin
        pcie_msi_msix_clear <= 47'd70368744177664;
    end
    if (pcie_msi_vector[45]) begin
        pcie_msi_msix_clear <= 46'd35184372088832;
    end
    if (pcie_msi_vector[44]) begin
        pcie_msi_msix_clear <= 45'd17592186044416;
    end
    if (pcie_msi_vector[43]) begin
        pcie_msi_msix_clear <= 44'd8796093022208;
    end
    if (pcie_msi_vector[42]) begin
        pcie_msi_msix_clear <= 43'd4398046511104;
    end
    if (pcie_msi_vector[41]) begin
        pcie_msi_msix_clear <= 42'd2199023255552;
    end
    if (pcie_msi_vector[40]) begin
        pcie_msi_msix_clear <= 41'd1099511627776;
    end
    if (pcie_msi_vector[39]) begin
        pcie_msi_msix_clear <= 40'd549755813888;
    end
    if (pcie_msi_vector[38]) begin
        pcie_msi_msix_clear <= 39'd274877906944;
    end
    if (pcie_msi_vector[37]) begin
        pcie_msi_msix_clear <= 38'd137438953472;
    end
    if (pcie_msi_vector[36]) begin
        pcie_msi_msix_clear <= 37'd68719476736;
    end
    if (pcie_msi_vector[35]) begin
        pcie_msi_msix_clear <= 36'd34359738368;
    end
    if (pcie_msi_vector[34]) begin
        pcie_msi_msix_clear <= 35'd17179869184;
    end
    if (pcie_msi_vector[33]) begin
        pcie_msi_msix_clear <= 34'd8589934592;
    end
    if (pcie_msi_vector[32]) begin
        pcie_msi_msix_clear <= 33'd4294967296;
    end
    if (pcie_msi_vector[31]) begin
        pcie_msi_msix_clear <= 32'd2147483648;
    end
    if (pcie_msi_vector[30]) begin
        pcie_msi_msix_clear <= 31'd1073741824;
    end
    if (pcie_msi_vector[29]) begin
        pcie_msi_msix_clear <= 30'd536870912;
    end
    if (pcie_msi_vector[28]) begin
        pcie_msi_msix_clear <= 29'd268435456;
    end
    if (pcie_msi_vector[27]) begin
        pcie_msi_msix_clear <= 28'd134217728;
    end
    if (pcie_msi_vector[26]) begin
        pcie_msi_msix_clear <= 27'd67108864;
    end
    if (pcie_msi_vector[25]) begin
        pcie_msi_msix_clear <= 26'd33554432;
    end
    if (pcie_msi_vector[24]) begin
        pcie_msi_msix_clear <= 25'd16777216;
    end
    if (pcie_msi_vector[23]) begin
        pcie_msi_msix_clear <= 24'd8388608;
    end
    if (pcie_msi_vector[22]) begin
        pcie_msi_msix_clear <= 23'd4194304;
    end
    if (pcie_msi_vector[21]) begin
        pcie_msi_msix_clear <= 22'd2097152;
    end
    if (pcie_msi_vector[20]) begin
        pcie_msi_msix_clear <= 21'd1048576;
    end
    if (pcie_msi_vector[19]) begin
        pcie_msi_msix_clear <= 20'd524288;
    end
    if (pcie_msi_vector[18]) begin
        pcie_msi_msix_clear <= 19'd262144;
    end
    if (pcie_msi_vector[17]) begin
        pcie_msi_msix_clear <= 18'd131072;
    end
    if (pcie_msi_vector[16]) begin
        pcie_msi_msix_clear <= 17'd65536;
    end
    if (pcie_msi_vector[15]) begin
        pcie_msi_msix_clear <= 16'd32768;
    end
    if (pcie_msi_vector[14]) begin
        pcie_msi_msix_clear <= 15'd16384;
    end
    if (pcie_msi_vector[13]) begin
        pcie_msi_msix_clear <= 14'd8192;
    end
    if (pcie_msi_vector[12]) begin
        pcie_msi_msix_clear <= 13'd4096;
    end
    if (pcie_msi_vector[11]) begin
        pcie_msi_msix_clear <= 12'd2048;
    end
    if (pcie_msi_vector[10]) begin
        pcie_msi_msix_clear <= 11'd1024;
    end
    if (pcie_msi_vector[9]) begin
        pcie_msi_msix_clear <= 10'd512;
    end
    if (pcie_msi_vector[8]) begin
        pcie_msi_msix_clear <= 9'd256;
    end
    if (pcie_msi_vector[7]) begin
        pcie_msi_msix_clear <= 8'd128;
    end
    if (pcie_msi_vector[6]) begin
        pcie_msi_msix_clear <= 7'd64;
    end
    if (pcie_msi_vector[5]) begin
        pcie_msi_msix_clear <= 6'd32;
    end
    if (pcie_msi_vector[4]) begin
        pcie_msi_msix_clear <= 5'd16;
    end
    if (pcie_msi_vector[3]) begin
        pcie_msi_msix_clear <= 4'd8;
    end
    if (pcie_msi_vector[2]) begin
        pcie_msi_msix_clear <= 3'd4;
    end
    if (pcie_msi_vector[1]) begin
        pcie_msi_msix_clear <= 2'd2;
    end
    if (pcie_msi_vector[0]) begin
        pcie_msi_msix_clear <= 1'd1;
    end
end
always @(*) begin
    pcie_msi_msix_valid <= 1'd0;
    if (pcie_msi_vector[63]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[62]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[61]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[60]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[59]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[58]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[57]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[56]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[55]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[54]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[53]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[52]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[51]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[50]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[49]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[48]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[47]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[46]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[45]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[44]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[43]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[42]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[41]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[40]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[39]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[38]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[37]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[36]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[35]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[34]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[33]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[32]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[31]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[30]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[29]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[28]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[27]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[26]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[25]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[24]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[23]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[22]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[21]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[20]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[19]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[18]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[17]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[16]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[15]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[14]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[13]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[12]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[11]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[10]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[9]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[8]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[7]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[6]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[5]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[4]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[3]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[2]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[1]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
    if (pcie_msi_vector[0]) begin
        pcie_msi_msix_valid <= 1'd1;
    end
end
always @(*) begin
    pcie_msi_msix_num <= 6'd0;
    if (pcie_msi_vector[63]) begin
        pcie_msi_msix_num <= 6'd63;
    end
    if (pcie_msi_vector[62]) begin
        pcie_msi_msix_num <= 6'd62;
    end
    if (pcie_msi_vector[61]) begin
        pcie_msi_msix_num <= 6'd61;
    end
    if (pcie_msi_vector[60]) begin
        pcie_msi_msix_num <= 6'd60;
    end
    if (pcie_msi_vector[59]) begin
        pcie_msi_msix_num <= 6'd59;
    end
    if (pcie_msi_vector[58]) begin
        pcie_msi_msix_num <= 6'd58;
    end
    if (pcie_msi_vector[57]) begin
        pcie_msi_msix_num <= 6'd57;
    end
    if (pcie_msi_vector[56]) begin
        pcie_msi_msix_num <= 6'd56;
    end
    if (pcie_msi_vector[55]) begin
        pcie_msi_msix_num <= 6'd55;
    end
    if (pcie_msi_vector[54]) begin
        pcie_msi_msix_num <= 6'd54;
    end
    if (pcie_msi_vector[53]) begin
        pcie_msi_msix_num <= 6'd53;
    end
    if (pcie_msi_vector[52]) begin
        pcie_msi_msix_num <= 6'd52;
    end
    if (pcie_msi_vector[51]) begin
        pcie_msi_msix_num <= 6'd51;
    end
    if (pcie_msi_vector[50]) begin
        pcie_msi_msix_num <= 6'd50;
    end
    if (pcie_msi_vector[49]) begin
        pcie_msi_msix_num <= 6'd49;
    end
    if (pcie_msi_vector[48]) begin
        pcie_msi_msix_num <= 6'd48;
    end
    if (pcie_msi_vector[47]) begin
        pcie_msi_msix_num <= 6'd47;
    end
    if (pcie_msi_vector[46]) begin
        pcie_msi_msix_num <= 6'd46;
    end
    if (pcie_msi_vector[45]) begin
        pcie_msi_msix_num <= 6'd45;
    end
    if (pcie_msi_vector[44]) begin
        pcie_msi_msix_num <= 6'd44;
    end
    if (pcie_msi_vector[43]) begin
        pcie_msi_msix_num <= 6'd43;
    end
    if (pcie_msi_vector[42]) begin
        pcie_msi_msix_num <= 6'd42;
    end
    if (pcie_msi_vector[41]) begin
        pcie_msi_msix_num <= 6'd41;
    end
    if (pcie_msi_vector[40]) begin
        pcie_msi_msix_num <= 6'd40;
    end
    if (pcie_msi_vector[39]) begin
        pcie_msi_msix_num <= 6'd39;
    end
    if (pcie_msi_vector[38]) begin
        pcie_msi_msix_num <= 6'd38;
    end
    if (pcie_msi_vector[37]) begin
        pcie_msi_msix_num <= 6'd37;
    end
    if (pcie_msi_vector[36]) begin
        pcie_msi_msix_num <= 6'd36;
    end
    if (pcie_msi_vector[35]) begin
        pcie_msi_msix_num <= 6'd35;
    end
    if (pcie_msi_vector[34]) begin
        pcie_msi_msix_num <= 6'd34;
    end
    if (pcie_msi_vector[33]) begin
        pcie_msi_msix_num <= 6'd33;
    end
    if (pcie_msi_vector[32]) begin
        pcie_msi_msix_num <= 6'd32;
    end
    if (pcie_msi_vector[31]) begin
        pcie_msi_msix_num <= 5'd31;
    end
    if (pcie_msi_vector[30]) begin
        pcie_msi_msix_num <= 5'd30;
    end
    if (pcie_msi_vector[29]) begin
        pcie_msi_msix_num <= 5'd29;
    end
    if (pcie_msi_vector[28]) begin
        pcie_msi_msix_num <= 5'd28;
    end
    if (pcie_msi_vector[27]) begin
        pcie_msi_msix_num <= 5'd27;
    end
    if (pcie_msi_vector[26]) begin
        pcie_msi_msix_num <= 5'd26;
    end
    if (pcie_msi_vector[25]) begin
        pcie_msi_msix_num <= 5'd25;
    end
    if (pcie_msi_vector[24]) begin
        pcie_msi_msix_num <= 5'd24;
    end
    if (pcie_msi_vector[23]) begin
        pcie_msi_msix_num <= 5'd23;
    end
    if (pcie_msi_vector[22]) begin
        pcie_msi_msix_num <= 5'd22;
    end
    if (pcie_msi_vector[21]) begin
        pcie_msi_msix_num <= 5'd21;
    end
    if (pcie_msi_vector[20]) begin
        pcie_msi_msix_num <= 5'd20;
    end
    if (pcie_msi_vector[19]) begin
        pcie_msi_msix_num <= 5'd19;
    end
    if (pcie_msi_vector[18]) begin
        pcie_msi_msix_num <= 5'd18;
    end
    if (pcie_msi_vector[17]) begin
        pcie_msi_msix_num <= 5'd17;
    end
    if (pcie_msi_vector[16]) begin
        pcie_msi_msix_num <= 5'd16;
    end
    if (pcie_msi_vector[15]) begin
        pcie_msi_msix_num <= 4'd15;
    end
    if (pcie_msi_vector[14]) begin
        pcie_msi_msix_num <= 4'd14;
    end
    if (pcie_msi_vector[13]) begin
        pcie_msi_msix_num <= 4'd13;
    end
    if (pcie_msi_vector[12]) begin
        pcie_msi_msix_num <= 4'd12;
    end
    if (pcie_msi_vector[11]) begin
        pcie_msi_msix_num <= 4'd11;
    end
    if (pcie_msi_vector[10]) begin
        pcie_msi_msix_num <= 4'd10;
    end
    if (pcie_msi_vector[9]) begin
        pcie_msi_msix_num <= 4'd9;
    end
    if (pcie_msi_vector[8]) begin
        pcie_msi_msix_num <= 4'd8;
    end
    if (pcie_msi_vector[7]) begin
        pcie_msi_msix_num <= 3'd7;
    end
    if (pcie_msi_vector[6]) begin
        pcie_msi_msix_num <= 3'd6;
    end
    if (pcie_msi_vector[5]) begin
        pcie_msi_msix_num <= 3'd5;
    end
    if (pcie_msi_vector[4]) begin
        pcie_msi_msix_num <= 3'd4;
    end
    if (pcie_msi_vector[3]) begin
        pcie_msi_msix_num <= 2'd3;
    end
    if (pcie_msi_vector[2]) begin
        pcie_msi_msix_num <= 2'd2;
    end
    if (pcie_msi_vector[1]) begin
        pcie_msi_msix_num <= 1'd1;
    end
    if (pcie_msi_vector[0]) begin
        pcie_msi_msix_num <= 1'd0;
    end
end
assign pcie_msi_sink_payload_channel = 1'd0;
assign pcie_msi_sink_first = 1'd1;
assign pcie_msi_sink_last = 1'd1;
assign pcie_msi_sink_payload_adr = pcie_msi_table_port_dat_r[127:96];
assign pcie_msi_sink_payload_req_id = s7pciephy_id;
assign pcie_msi_sink_payload_tag = 1'd0;
assign pcie_msi_sink_payload_len = 1'd1;
assign pcie_msi_sink_payload_dat = pcie_msi_table_port_dat_r[63:32];
always @(*) begin
    litepciemsix_next_state <= 1'd0;
    litepciemsix_next_state <= litepciemsix_state;
    case (litepciemsix_state)
        1'd1: begin
            if ((pcie_msi_sink_ready | pcie_msi_table_port_dat_r[0])) begin
                litepciemsix_next_state <= 1'd0;
            end
        end
        default: begin
            if (pcie_msi_msix_valid) begin
                litepciemsix_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    pcie_msi_table_port_adr <= 6'd0;
    case (litepciemsix_state)
        1'd1: begin
        end
        default: begin
            pcie_msi_table_port_adr <= pcie_msi_msix_num;
        end
    endcase
end
always @(*) begin
    pcie_msi_table_port_re <= 1'd0;
    case (litepciemsix_state)
        1'd1: begin
        end
        default: begin
            pcie_msi_table_port_re <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_msi_sink_valid <= 1'd0;
    case (litepciemsix_state)
        1'd1: begin
            pcie_msi_sink_valid <= (~pcie_msi_table_port_dat_r[0]);
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_msix_clear_on_ready_litepciemsix_next_value <= 64'd0;
    case (litepciemsix_state)
        1'd1: begin
        end
        default: begin
            if (pcie_msi_msix_valid) begin
                pcie_msi_msix_clear_on_ready_litepciemsix_next_value <= pcie_msi_msix_clear;
            end
        end
    endcase
end
always @(*) begin
    pcie_msi_msix_clear_on_ready_litepciemsix_next_value_ce <= 1'd0;
    case (litepciemsix_state)
        1'd1: begin
        end
        default: begin
            if (pcie_msi_msix_valid) begin
                pcie_msi_msix_clear_on_ready_litepciemsix_next_value_ce <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    pcie_msi_sink_payload_we <= 1'd0;
    case (litepciemsix_state)
        1'd1: begin
            pcie_msi_sink_payload_we <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_msi_clear <= 64'd0;
    case (litepciemsix_state)
        1'd1: begin
            if ((pcie_msi_sink_ready | pcie_msi_table_port_dat_r[0])) begin
                pcie_msi_clear <= pcie_msi_msix_clear_on_ready;
            end
        end
        default: begin
        end
    endcase
end
assign sniffer_clk_1 = sniffer_clk;
assign sniffer_rst = (~sniffer_rst_n);
assign pcie_ptm_sniffer_rawdatapath_sink_sink_valid = 1'd1;
assign pcie_ptm_sniffer_rawdatapath_sink_sink_payload_data = sniffer_rx_data;
assign pcie_ptm_sniffer_rawdatapath_sink_sink_payload_ctrl = sniffer_rx_ctl;
assign pcie_ptm_sniffer_rawdescrambler_sink_sink_valid = pcie_ptm_sniffer_rawdatapath_source_source_valid;
assign pcie_ptm_sniffer_rawdatapath_source_source_ready = pcie_ptm_sniffer_rawdescrambler_sink_sink_ready;
assign pcie_ptm_sniffer_rawdescrambler_sink_sink_first = pcie_ptm_sniffer_rawdatapath_source_source_first;
assign pcie_ptm_sniffer_rawdescrambler_sink_sink_last = pcie_ptm_sniffer_rawdatapath_source_source_last;
assign pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data = pcie_ptm_sniffer_rawdatapath_source_source_payload_data;
assign pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_source_source_payload_ctrl;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_valid = pcie_ptm_sniffer_tlpfilterformater_source_source_valid;
assign pcie_ptm_sniffer_tlpfilterformater_source_source_ready = pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_ready;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_first = pcie_ptm_sniffer_tlpfilterformater_source_source_first;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_last = pcie_ptm_sniffer_tlpfilterformater_source_source_last;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_payload_dat = pcie_ptm_sniffer_tlpfilterformater_source_source_payload_dat;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_payload_be = pcie_ptm_sniffer_tlpfilterformater_source_source_payload_be;
assign pcie_ptm_sniffer_cdc_sink_sink_valid = pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_valid;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_ready = pcie_ptm_sniffer_cdc_sink_sink_ready;
always @(*) begin
    pcie_ptm_sniffer_cdc_sink_sink_payload_master_time <= 64'd0;
    pcie_ptm_sniffer_cdc_sink_sink_payload_master_time <= pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_master_time;
    pcie_ptm_sniffer_cdc_sink_sink_payload_master_time[31:0] <= pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_master_time[63:32];
    pcie_ptm_sniffer_cdc_sink_sink_payload_master_time[63:32] <= pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_master_time[31:0];
end
assign pcie_ptm_sniffer_cdc_sink_sink_payload_message_code = pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_message_code;
assign pcie_ptm_sniffer_cdc_sink_sink_payload_link_delay = {pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_dat[39:32], pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_dat[47:40], pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_dat[55:48], pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_dat[63:56]};
assign pcie_ptm_sniffer_source_source_valid = pcie_ptm_sniffer_cdc_source_source_valid;
assign pcie_ptm_sniffer_cdc_source_source_ready = pcie_ptm_sniffer_source_source_ready;
assign pcie_ptm_sniffer_source_source_first = pcie_ptm_sniffer_cdc_source_source_first;
assign pcie_ptm_sniffer_source_source_last = pcie_ptm_sniffer_cdc_source_source_last;
assign pcie_ptm_sniffer_source_source_payload_message_code = pcie_ptm_sniffer_cdc_source_source_payload_message_code;
assign pcie_ptm_sniffer_source_source_payload_master_time = pcie_ptm_sniffer_cdc_source_source_payload_master_time;
assign pcie_ptm_sniffer_source_source_payload_link_delay = pcie_ptm_sniffer_cdc_source_source_payload_link_delay;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_valid = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_first = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_first;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_last = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_last;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_ready = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_payload_data = {pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_payload_ctrl, pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_payload_data};
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_valid = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_first = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_first;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_last = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_last;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_ready = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_ready;
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_data <= 32'd0;
    pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_data[15:0] <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_payload_data[15:0];
    pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_data[31:16] <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_payload_data[33:18];
end
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_ctrl <= 4'd0;
    pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_ctrl[1:0] <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_payload_data[17:16];
    pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_ctrl[3:2] <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_payload_data[35:34];
end
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_valid = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_ready = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_first = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_first;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_last = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_last;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_payload_data = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_valid = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_ready = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_ready;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_first = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_first;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_last = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_last;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_source_payload_data = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_ready = ((~pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_strobe_all) | pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_ready);
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_valid = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_strobe_all;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_load_part = (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_valid & pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_ready);
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_ready = ((~pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_valid) | pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_ready);
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_valid = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_ready = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_first = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_first;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_last = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_last;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_payload_data = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_payload_data;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_valid = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_ready = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_ready;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_first = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_first;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_last = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_last;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_payload_data = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_source_source_payload_ctrl = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_din = {pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_last, pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_first, pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_payload_ctrl, pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_payload_data};
assign {pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_last, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_first, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_ctrl, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_data} = pcie_ptm_sniffer_rawdatapath_cdc_dout;
assign {pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_last, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_first, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_ctrl, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_data} = pcie_ptm_sniffer_rawdatapath_cdc_dout;
assign {pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_last, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_first, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_ctrl, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_data} = pcie_ptm_sniffer_rawdatapath_cdc_dout;
assign {pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_last, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_first, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_ctrl, pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_data} = pcie_ptm_sniffer_rawdatapath_cdc_dout;
assign pcie_ptm_sniffer_rawdatapath_cdc_sink_ready = pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_writable;
assign pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_we = pcie_ptm_sniffer_rawdatapath_cdc_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_first = pcie_ptm_sniffer_rawdatapath_cdc_sink_first;
assign pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_last = pcie_ptm_sniffer_rawdatapath_cdc_sink_last;
assign pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_payload_data = pcie_ptm_sniffer_rawdatapath_cdc_sink_payload_data;
assign pcie_ptm_sniffer_rawdatapath_cdc_fifo_in_payload_ctrl = pcie_ptm_sniffer_rawdatapath_cdc_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_cdc_source_valid = pcie_ptm_sniffer_rawdatapath_cdc_readable;
assign pcie_ptm_sniffer_rawdatapath_cdc_source_first = pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_first;
assign pcie_ptm_sniffer_rawdatapath_cdc_source_last = pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_last;
assign pcie_ptm_sniffer_rawdatapath_cdc_source_payload_data = pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_data;
assign pcie_ptm_sniffer_rawdatapath_cdc_source_payload_ctrl = pcie_ptm_sniffer_rawdatapath_cdc_fifo_out_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_cdc_re = pcie_ptm_sniffer_rawdatapath_cdc_source_ready;
assign pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_re = (pcie_ptm_sniffer_rawdatapath_cdc_re | (~pcie_ptm_sniffer_rawdatapath_cdc_readable));
assign pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_ce = (pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_writable & pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_we);
assign pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_ce = (pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_readable & pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_re);
assign pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_writable = (((pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q[3] == pcie_ptm_sniffer_rawdatapath_cdc_consume_wdomain[3]) | (pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q[2] == pcie_ptm_sniffer_rawdatapath_cdc_consume_wdomain[2])) | (pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q[1:0] != pcie_ptm_sniffer_rawdatapath_cdc_consume_wdomain[1:0]));
assign pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_readable = (pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q != pcie_ptm_sniffer_rawdatapath_cdc_produce_rdomain);
assign pcie_ptm_sniffer_rawdatapath_cdc_wrport_adr = pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_binary[2:0];
assign pcie_ptm_sniffer_rawdatapath_cdc_wrport_dat_w = pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_din;
assign pcie_ptm_sniffer_rawdatapath_cdc_wrport_we = pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_ce;
assign pcie_ptm_sniffer_rawdatapath_cdc_rdport_adr = pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary[2:0];
assign pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_dout = pcie_ptm_sniffer_rawdatapath_cdc_rdport_dat_r;
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary <= 4'd0;
    if (pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_ce) begin
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary <= (pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_binary;
    end
end
assign pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next = (pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary ^ pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary[3:1]);
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary <= 4'd0;
    if (pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_ce) begin
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary <= (pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_binary;
    end
end
assign pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next = (pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary ^ pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary[3:1]);
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_first = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_last = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_valid = (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_valid);
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_ready = (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_ready);
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment <= 2'd0;
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[3] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[31:24] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment <= 2'd3;
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[2] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[23:16] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment <= 2'd2;
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[1] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[15:8] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment <= 1'd1;
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[0] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[7:0] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment <= 1'd0;
        end
    end
end
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update <= 1'd0;
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[3] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[31:24] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update <= 1'd1;
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[2] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[23:16] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update <= 1'd1;
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[1] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[15:8] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update <= 1'd1;
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl[0] & (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data[7:0] == 8'd188))) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update <= 1'd1;
        end
    end
end
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data <= 32'd0;
    case (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment_d)
        1'd0: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data <= {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_data};
        end
        1'd1: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data <= slice_proxy0[63:8];
        end
        2'd2: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data <= slice_proxy2[63:16];
        end
        2'd3: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data <= slice_proxy4[63:24];
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl <= 4'd0;
    case (pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment_d)
        1'd0: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl <= {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_ctrl};
        end
        1'd1: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl <= slice_proxy1[7:1];
        end
        2'd2: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl <= slice_proxy3[7:2];
        end
        2'd3: begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl <= slice_proxy5[7:3];
        end
    endcase
end
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_first = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_last = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_ready = ((~pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_valid) | pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_ready);
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_first = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_last = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_first = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_last = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_ready = ((~pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_valid) | pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_ready);
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_first = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_last = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_sink_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_first = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_last = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_valid = pcie_ptm_sniffer_rawdatapath_sink_sink_valid;
assign pcie_ptm_sniffer_rawdatapath_sink_sink_ready = pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_first = pcie_ptm_sniffer_rawdatapath_sink_sink_first;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_last = pcie_ptm_sniffer_rawdatapath_sink_sink_last;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_payload_data = pcie_ptm_sniffer_rawdatapath_sink_sink_payload_data;
assign pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_sink_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_sink_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_cdc_sink_valid = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_valid;
assign pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_ready = pcie_ptm_sniffer_rawdatapath_cdc_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_cdc_sink_first = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_first;
assign pcie_ptm_sniffer_rawdatapath_cdc_sink_last = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_last;
assign pcie_ptm_sniffer_rawdatapath_cdc_sink_payload_data = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_cdc_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_converter_strideconverter_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid = pcie_ptm_sniffer_rawdatapath_cdc_source_valid;
assign pcie_ptm_sniffer_rawdatapath_cdc_source_ready = pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_first = pcie_ptm_sniffer_rawdatapath_cdc_source_first;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_last = pcie_ptm_sniffer_rawdatapath_cdc_source_last;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data = pcie_ptm_sniffer_rawdatapath_cdc_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl = pcie_ptm_sniffer_rawdatapath_cdc_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdatapath_source_source_valid = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_valid;
assign pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_ready = pcie_ptm_sniffer_rawdatapath_source_source_ready;
assign pcie_ptm_sniffer_rawdatapath_source_source_first = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_first;
assign pcie_ptm_sniffer_rawdatapath_source_source_last = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_last;
assign pcie_ptm_sniffer_rawdatapath_source_source_payload_data = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_payload_data;
assign pcie_ptm_sniffer_rawdatapath_source_source_payload_ctrl = pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_source_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_enable = pcie_ptm_sniffer_rawdescrambler_enable;
always @(*) begin
    pcie_ptm_sniffer_rawdescrambler_scrambler_reset <= 1'd0;
    if ((((pcie_ptm_sniffer_rawdescrambler_sink_sink_valid & pcie_ptm_sniffer_rawdescrambler_sink_sink_ready) & (pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data[7:0] == 8'd188)) & pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl[0])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_reset <= 1'd1;
    end
    if ((((pcie_ptm_sniffer_rawdescrambler_sink_sink_valid & pcie_ptm_sniffer_rawdescrambler_sink_sink_ready) & (pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data[15:8] == 8'd188)) & pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl[1])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_reset <= 1'd1;
    end
    if ((((pcie_ptm_sniffer_rawdescrambler_sink_sink_valid & pcie_ptm_sniffer_rawdescrambler_sink_sink_ready) & (pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data[23:16] == 8'd188)) & pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl[2])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_reset <= 1'd1;
    end
    if ((((pcie_ptm_sniffer_rawdescrambler_sink_sink_valid & pcie_ptm_sniffer_rawdescrambler_sink_sink_ready) & (pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data[31:24] == 8'd188)) & pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl[3])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_reset <= 1'd1;
    end
end
assign pcie_ptm_sniffer_rawdescrambler_scrambler_sink_valid = pcie_ptm_sniffer_rawdescrambler_sink_sink_valid;
assign pcie_ptm_sniffer_rawdescrambler_sink_sink_ready = pcie_ptm_sniffer_rawdescrambler_scrambler_sink_ready;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_sink_first = pcie_ptm_sniffer_rawdescrambler_sink_sink_first;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_sink_last = pcie_ptm_sniffer_rawdescrambler_sink_sink_last;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data = pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_data;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl = pcie_ptm_sniffer_rawdescrambler_sink_sink_payload_ctrl;
assign pcie_ptm_sniffer_rawdescrambler_source_source_valid = pcie_ptm_sniffer_rawdescrambler_scrambler_source_valid;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_source_ready = pcie_ptm_sniffer_rawdescrambler_source_source_ready;
assign pcie_ptm_sniffer_rawdescrambler_source_source_first = pcie_ptm_sniffer_rawdescrambler_scrambler_source_first;
assign pcie_ptm_sniffer_rawdescrambler_source_source_last = pcie_ptm_sniffer_rawdescrambler_scrambler_source_last;
assign pcie_ptm_sniffer_rawdescrambler_source_source_payload_data = pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data;
assign pcie_ptm_sniffer_rawdescrambler_source_source_payload_ctrl = pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_ctrl;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_ce = (pcie_ptm_sniffer_rawdescrambler_scrambler_sink_valid & pcie_ptm_sniffer_rawdescrambler_scrambler_sink_ready);
assign pcie_ptm_sniffer_rawdescrambler_scrambler_source_valid = pcie_ptm_sniffer_rawdescrambler_scrambler_sink_valid;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_sink_ready = pcie_ptm_sniffer_rawdescrambler_scrambler_source_ready;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_source_first = pcie_ptm_sniffer_rawdescrambler_scrambler_sink_first;
assign pcie_ptm_sniffer_rawdescrambler_scrambler_source_last = pcie_ptm_sniffer_rawdescrambler_scrambler_sink_last;
always @(*) begin
    pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data <= 32'd0;
    pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data <= pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data;
    if (((~pcie_ptm_sniffer_rawdescrambler_scrambler_enable) | pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl[0])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[7:0] <= pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[7:0];
    end else begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[7:0] <= (pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[7:0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_value[7:0]);
    end
    if (((~pcie_ptm_sniffer_rawdescrambler_scrambler_enable) | pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl[1])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[15:8] <= pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[15:8];
    end else begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[15:8] <= (pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[15:8] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_value[15:8]);
    end
    if (((~pcie_ptm_sniffer_rawdescrambler_scrambler_enable) | pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl[2])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[23:16] <= pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[23:16];
    end else begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[23:16] <= (pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[23:16] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_value[23:16]);
    end
    if (((~pcie_ptm_sniffer_rawdescrambler_scrambler_enable) | pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl[3])) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[31:24] <= pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[31:24];
    end else begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_data[31:24] <= (pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_data[31:24] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_value[31:24]);
    end
end
assign pcie_ptm_sniffer_rawdescrambler_scrambler_source_payload_ctrl = pcie_ptm_sniffer_rawdescrambler_scrambler_sink_payload_ctrl;
always @(*) begin
    pcie_ptm_sniffer_rawdescrambler_scrambler_new <= 16'd0;
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[0] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[1] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[2] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[3] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[4] <= (((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[5] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[6] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[7] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[8] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[9] <= (((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[10] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[11] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[12] <= (((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[13] <= (((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[14] <= ((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_new[15] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
end
always @(*) begin
    pcie_ptm_sniffer_rawdescrambler_scrambler_value <= 32'd0;
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[0] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[1] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[2] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[3] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[4] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[5] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[6] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[7] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[8] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[9] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[10] <= pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5];
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[11] <= (pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[12] <= ((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[13] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[14] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[15] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[16] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[17] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[18] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[19] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[20] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[21] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[22] <= ((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[23] <= ((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[24] <= (((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[25] <= (((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[26] <= ((((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[5]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[15]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[27] <= (((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[4]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[14]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[28] <= ((((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[3]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[13]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[29] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[2] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[12]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[30] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[1] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[7]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[9]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[11]);
    pcie_ptm_sniffer_rawdescrambler_scrambler_value[31] <= (((pcie_ptm_sniffer_rawdescrambler_scrambler_cur[0] ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[6]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[8]) ^ pcie_ptm_sniffer_rawdescrambler_scrambler_cur[10]);
end
assign pcie_ptm_sniffer_tlpaligner_sink_ready = 1'd1;
always @(*) begin
    clockdomainsrenamer0_next_state <= 2'd0;
    clockdomainsrenamer0_next_state <= clockdomainsrenamer0_state;
    case (clockdomainsrenamer0_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                clockdomainsrenamer0_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_tlpaligner_sink_valid & (~pcie_ptm_sniffer_tlpaligner_first))) begin
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[0] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[7:0] == 8'd253))) begin
                    clockdomainsrenamer0_next_state <= 1'd0;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[1] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[15:8] == 8'd253))) begin
                    clockdomainsrenamer0_next_state <= 1'd0;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[2] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[23:16] == 8'd253))) begin
                    clockdomainsrenamer0_next_state <= 1'd0;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[3] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[31:24] == 8'd253))) begin
                    clockdomainsrenamer0_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[0] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[7:0] == 8'd251))) begin
                    clockdomainsrenamer0_next_state <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[1] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[15:8] == 8'd251))) begin
                    clockdomainsrenamer0_next_state <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[2] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[23:16] == 8'd251))) begin
                    clockdomainsrenamer0_next_state <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[3] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[31:24] == 8'd251))) begin
                    clockdomainsrenamer0_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value1 <= 1'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value1 <= 1'd1;
            end
        end
        2'd2: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value1 <= 1'd0;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value_ce1 <= 1'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
            end
        end
        2'd2: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0 <= 2'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[0] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[7:0] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0 <= 1'd0;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[1] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[15:8] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0 <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[2] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[23:16] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0 <= 2'd2;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[3] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[31:24] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0 <= 2'd3;
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0 <= 1'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[0] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[7:0] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[1] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[15:8] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[2] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[23:16] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[3] & (pcie_ptm_sniffer_tlpaligner_sink_payload_data[31:24] == 8'd251))) begin
                    pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_source_valid <= 1'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
        end
        2'd2: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                pcie_ptm_sniffer_tlpaligner_source_valid <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_source_last <= 1'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_tlpaligner_sink_valid & (~pcie_ptm_sniffer_tlpaligner_first))) begin
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[0] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[7:0] == 8'd253))) begin
                    pcie_ptm_sniffer_tlpaligner_source_last <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[1] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[15:8] == 8'd253))) begin
                    pcie_ptm_sniffer_tlpaligner_source_last <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[2] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[23:16] == 8'd253))) begin
                    pcie_ptm_sniffer_tlpaligner_source_last <= 1'd1;
                end
                if ((pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[3] & (pcie_ptm_sniffer_tlpaligner_sink_data_dd[31:24] == 8'd253))) begin
                    pcie_ptm_sniffer_tlpaligner_source_last <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_source_payload_data <= 32'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
        end
        2'd2: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                case (pcie_ptm_sniffer_tlpaligner_alignment)
                    1'd0: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[7:0] <= pcie_ptm_sniffer_tlpaligner_sink_data_dd[31:24];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[15:8] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[7:0];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[23:16] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[15:8];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[31:24] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[23:16];
                    end
                    1'd1: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[7:0] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[7:0];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[15:8] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[15:8];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[23:16] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[23:16];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[31:24] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[31:24];
                    end
                    2'd2: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[7:0] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[15:8];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[15:8] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[23:16];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[23:16] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[31:24];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[31:24] <= pcie_ptm_sniffer_tlpaligner_sink_payload_data[7:0];
                    end
                    2'd3: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[7:0] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[23:16];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[15:8] <= pcie_ptm_sniffer_tlpaligner_sink_data_d[31:24];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[23:16] <= pcie_ptm_sniffer_tlpaligner_sink_payload_data[7:0];
                        pcie_ptm_sniffer_tlpaligner_source_payload_data[31:24] <= pcie_ptm_sniffer_tlpaligner_sink_payload_data[15:8];
                    end
                endcase
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpaligner_source_payload_ctrl <= 4'd0;
    case (clockdomainsrenamer0_state)
        1'd1: begin
        end
        2'd2: begin
            if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
                case (pcie_ptm_sniffer_tlpaligner_alignment)
                    1'd0: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[0] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd[3];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[1] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[0];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[2] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[1];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[3] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[2];
                    end
                    1'd1: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[0] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[0];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[1] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[1];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[2] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[2];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[3] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[3];
                    end
                    2'd2: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[0] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[1];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[1] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[2];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[2] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[3];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[3] <= pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[0];
                    end
                    2'd3: begin
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[0] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[2];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[1] <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d[3];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[2] <= pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[0];
                        pcie_ptm_sniffer_tlpaligner_source_payload_ctrl[3] <= pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl[1];
                    end
                endcase
            end
        end
        default: begin
        end
    endcase
end
assign pcie_ptm_sniffer_tlpendiannessswap_source_valid = pcie_ptm_sniffer_tlpendiannessswap_sink_valid;
assign pcie_ptm_sniffer_tlpendiannessswap_sink_ready = pcie_ptm_sniffer_tlpendiannessswap_source_ready;
assign pcie_ptm_sniffer_tlpendiannessswap_source_first = pcie_ptm_sniffer_tlpendiannessswap_sink_first;
assign pcie_ptm_sniffer_tlpendiannessswap_source_last = pcie_ptm_sniffer_tlpendiannessswap_sink_last;
always @(*) begin
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_data <= 32'd0;
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_data[7:0] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_data[31:24];
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_data[15:8] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_data[23:16];
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_data[23:16] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_data[15:8];
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_data[31:24] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_data[7:0];
end
always @(*) begin
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl <= 4'd0;
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl[0] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_ctrl[3];
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl[1] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_ctrl[2];
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl[2] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_ctrl[1];
    pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl[3] <= pcie_ptm_sniffer_tlpendiannessswap_sink_payload_ctrl[0];
end
assign pcie_ptm_sniffer_tlpfilterformater_sink_sink_ready = 1'd1;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_be = 4'd15;
assign pcie_ptm_sniffer_tlpfilterformater_conv_sink_valid = pcie_ptm_sniffer_tlpfilterformater_fifo_source_valid;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_source_ready = pcie_ptm_sniffer_tlpfilterformater_conv_sink_ready;
assign pcie_ptm_sniffer_tlpfilterformater_conv_sink_first = pcie_ptm_sniffer_tlpfilterformater_fifo_source_first;
assign pcie_ptm_sniffer_tlpfilterformater_conv_sink_last = pcie_ptm_sniffer_tlpfilterformater_fifo_source_last;
assign pcie_ptm_sniffer_tlpfilterformater_conv_sink_payload_dat = pcie_ptm_sniffer_tlpfilterformater_fifo_source_payload_dat;
assign pcie_ptm_sniffer_tlpfilterformater_conv_sink_payload_be = pcie_ptm_sniffer_tlpfilterformater_fifo_source_payload_be;
assign pcie_ptm_sniffer_tlpfilterformater_source_source_valid = pcie_ptm_sniffer_tlpfilterformater_conv_source_valid;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_ready = pcie_ptm_sniffer_tlpfilterformater_source_source_ready;
assign pcie_ptm_sniffer_tlpfilterformater_source_source_first = pcie_ptm_sniffer_tlpfilterformater_conv_source_first;
assign pcie_ptm_sniffer_tlpfilterformater_source_source_last = pcie_ptm_sniffer_tlpfilterformater_conv_source_last;
assign pcie_ptm_sniffer_tlpfilterformater_source_source_payload_dat = pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_dat;
assign pcie_ptm_sniffer_tlpfilterformater_source_source_payload_be = pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_be;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_din = {pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_last, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_first, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_payload_be, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_payload_dat};
assign {pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_last, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_first, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_be, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_dat} = pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_dout;
assign {pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_last, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_first, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_be, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_dat} = pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_dout;
assign {pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_last, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_first, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_be, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_dat} = pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_dout;
assign {pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_last, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_first, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_be, pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_dat} = pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_dout;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_sink_ready = pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_writable;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_we = pcie_ptm_sniffer_tlpfilterformater_fifo_sink_valid;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_first = pcie_ptm_sniffer_tlpfilterformater_fifo_sink_first;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_last = pcie_ptm_sniffer_tlpfilterformater_fifo_sink_last;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_payload_dat = pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_dat;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_in_payload_be = pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_be;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_source_valid = pcie_ptm_sniffer_tlpfilterformater_fifo_readable;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_source_first = pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_first;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_source_last = pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_last;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_source_payload_dat = pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_dat;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_source_payload_be = pcie_ptm_sniffer_tlpfilterformater_fifo_fifo_out_payload_be;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_re = pcie_ptm_sniffer_tlpfilterformater_fifo_source_ready;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_re = (pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_readable & ((~pcie_ptm_sniffer_tlpfilterformater_fifo_readable) | pcie_ptm_sniffer_tlpfilterformater_fifo_re));
assign pcie_ptm_sniffer_tlpfilterformater_fifo_level1 = (pcie_ptm_sniffer_tlpfilterformater_fifo_level0 + pcie_ptm_sniffer_tlpfilterformater_fifo_readable);
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_adr <= 2'd0;
    if (pcie_ptm_sniffer_tlpfilterformater_fifo_replace) begin
        pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_adr <= (pcie_ptm_sniffer_tlpfilterformater_fifo_produce - 1'd1);
    end else begin
        pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_adr <= pcie_ptm_sniffer_tlpfilterformater_fifo_produce;
    end
end
assign pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_dat_w = pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_din;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_we = (pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_we & (pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_writable | pcie_ptm_sniffer_tlpfilterformater_fifo_replace));
assign pcie_ptm_sniffer_tlpfilterformater_fifo_do_read = (pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_readable & pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_re);
assign pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_adr = pcie_ptm_sniffer_tlpfilterformater_fifo_consume;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_dout = pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_dat_r;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_re = pcie_ptm_sniffer_tlpfilterformater_fifo_do_read;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_writable = (pcie_ptm_sniffer_tlpfilterformater_fifo_level0 != 3'd4);
assign pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_readable = (pcie_ptm_sniffer_tlpfilterformater_fifo_level0 != 1'd0);
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_valid = pcie_ptm_sniffer_tlpfilterformater_conv_sink_valid;
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_first = pcie_ptm_sniffer_tlpfilterformater_conv_sink_first;
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_last = pcie_ptm_sniffer_tlpfilterformater_conv_sink_last;
assign pcie_ptm_sniffer_tlpfilterformater_conv_sink_ready = pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_ready;
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_payload_data = {pcie_ptm_sniffer_tlpfilterformater_conv_sink_payload_be, pcie_ptm_sniffer_tlpfilterformater_conv_sink_payload_dat};
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_valid = pcie_ptm_sniffer_tlpfilterformater_conv_source_source_valid;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_first = pcie_ptm_sniffer_tlpfilterformater_conv_source_source_first;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_last = pcie_ptm_sniffer_tlpfilterformater_conv_source_source_last;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_source_ready = pcie_ptm_sniffer_tlpfilterformater_conv_source_ready;
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_dat <= 64'd0;
    pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_dat[31:0] <= pcie_ptm_sniffer_tlpfilterformater_conv_source_source_payload_data[31:0];
    pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_dat[63:32] <= pcie_ptm_sniffer_tlpfilterformater_conv_source_source_payload_data[67:36];
end
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_be <= 8'd0;
    pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_be[3:0] <= pcie_ptm_sniffer_tlpfilterformater_conv_source_source_payload_data[35:32];
    pcie_ptm_sniffer_tlpfilterformater_conv_source_payload_be[7:4] <= pcie_ptm_sniffer_tlpfilterformater_conv_source_source_payload_data[71:68];
end
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_source_valid = pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_valid;
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_ready = pcie_ptm_sniffer_tlpfilterformater_conv_source_source_ready;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_source_first = pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_first;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_source_last = pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_last;
assign pcie_ptm_sniffer_tlpfilterformater_conv_source_source_payload_data = pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_data;
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_ready = ((~pcie_ptm_sniffer_tlpfilterformater_conv_converter_strobe_all) | pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_ready);
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_valid = pcie_ptm_sniffer_tlpfilterformater_conv_converter_strobe_all;
assign pcie_ptm_sniffer_tlpfilterformater_conv_converter_load_part = (pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_valid & pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_ready);
always @(*) begin
    clockdomainsrenamer1_next_state <= 2'd0;
    clockdomainsrenamer1_next_state <= clockdomainsrenamer1_state;
    case (clockdomainsrenamer1_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_count == 1'd0)) begin
                    clockdomainsrenamer1_next_state <= 2'd2;
                end
                if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_last) begin
                    clockdomainsrenamer1_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid & pcie_ptm_sniffer_tlpfilterformater_sink_sink_last)) begin
                clockdomainsrenamer1_next_state <= 1'd0;
            end
        end
        default: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 6'd52)) begin
                    clockdomainsrenamer1_next_state <= 1'd1;
                end else begin
                    if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 7'd116)) begin
                        clockdomainsrenamer1_next_state <= 1'd1;
                    end else begin
                        clockdomainsrenamer1_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_last <= 1'd0;
    case (clockdomainsrenamer1_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_count == 1'd0)) begin
                    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_last <= 1'd1;
                end
                if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_last) begin
                    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_last <= 1'd1;
                end
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_dat <= 32'd0;
    case (clockdomainsrenamer1_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_dat <= pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data;
            end
        end
        2'd2: begin
        end
        default: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 6'd52)) begin
                    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_dat <= pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data;
                end else begin
                    if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 7'd116)) begin
                        pcie_ptm_sniffer_tlpfilterformater_fifo_sink_payload_dat <= pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data;
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value <= 32'd0;
    case (clockdomainsrenamer1_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value <= (pcie_ptm_sniffer_tlpfilterformater_count - 1'd1);
            end
        end
        2'd2: begin
        end
        default: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 6'd52)) begin
                    pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value <= 2'd2;
                end else begin
                    if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 7'd116)) begin
                        pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value <= 2'd3;
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value_ce <= 1'd0;
    case (clockdomainsrenamer1_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value_ce <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 6'd52)) begin
                    pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value_ce <= 1'd1;
                end else begin
                    if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 7'd116)) begin
                        pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value_ce <= 1'd1;
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_valid <= 1'd0;
    case (clockdomainsrenamer1_state)
        1'd1: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                pcie_ptm_sniffer_tlpfilterformater_fifo_sink_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
            if (pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid) begin
                if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 6'd52)) begin
                    pcie_ptm_sniffer_tlpfilterformater_fifo_sink_valid <= 1'd1;
                end else begin
                    if ((pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data[31:24] == 7'd116)) begin
                        pcie_ptm_sniffer_tlpfilterformater_fifo_sink_valid <= 1'd1;
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign pcie_ptm_sniffer_tlpaligner_sink_valid = pcie_ptm_sniffer_rawdescrambler_source_source_valid;
assign pcie_ptm_sniffer_rawdescrambler_source_source_ready = pcie_ptm_sniffer_tlpaligner_sink_ready;
assign pcie_ptm_sniffer_tlpaligner_sink_first = pcie_ptm_sniffer_rawdescrambler_source_source_first;
assign pcie_ptm_sniffer_tlpaligner_sink_last = pcie_ptm_sniffer_rawdescrambler_source_source_last;
assign pcie_ptm_sniffer_tlpaligner_sink_payload_data = pcie_ptm_sniffer_rawdescrambler_source_source_payload_data;
assign pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl = pcie_ptm_sniffer_rawdescrambler_source_source_payload_ctrl;
assign pcie_ptm_sniffer_tlpendiannessswap_sink_valid = pcie_ptm_sniffer_tlpaligner_source_valid;
assign pcie_ptm_sniffer_tlpaligner_source_ready = pcie_ptm_sniffer_tlpendiannessswap_sink_ready;
assign pcie_ptm_sniffer_tlpendiannessswap_sink_first = pcie_ptm_sniffer_tlpaligner_source_first;
assign pcie_ptm_sniffer_tlpendiannessswap_sink_last = pcie_ptm_sniffer_tlpaligner_source_last;
assign pcie_ptm_sniffer_tlpendiannessswap_sink_payload_data = pcie_ptm_sniffer_tlpaligner_source_payload_data;
assign pcie_ptm_sniffer_tlpendiannessswap_sink_payload_ctrl = pcie_ptm_sniffer_tlpaligner_source_payload_ctrl;
assign pcie_ptm_sniffer_tlpfilterformater_sink_sink_valid = pcie_ptm_sniffer_tlpendiannessswap_source_valid;
assign pcie_ptm_sniffer_tlpendiannessswap_source_ready = pcie_ptm_sniffer_tlpfilterformater_sink_sink_ready;
assign pcie_ptm_sniffer_tlpfilterformater_sink_sink_first = pcie_ptm_sniffer_tlpendiannessswap_source_first;
assign pcie_ptm_sniffer_tlpfilterformater_sink_sink_last = pcie_ptm_sniffer_tlpendiannessswap_source_last;
assign pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_data = pcie_ptm_sniffer_tlpendiannessswap_source_payload_data;
assign pcie_ptm_sniffer_tlpfilterformater_sink_sink_payload_ctrl = pcie_ptm_sniffer_tlpendiannessswap_source_payload_ctrl;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid = pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_valid;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_ready = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_ready;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_first = pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_first;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_last = pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_last;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_dat = pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_payload_dat;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_be = pcie_ptm_sniffer_litepcietlpdepacketizer_sink_sink_payload_be;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_ready = 1'd1;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_ready = pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_first = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_first;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_last = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_last;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_fmt = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[30:29];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_type = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[28:24];
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_dat <= 64'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_dat[31:0] <= {pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[7:0], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[15:8], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[23:16], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[31:24]};
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_dat[63:32] <= {pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[39:32], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[47:40], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[55:48], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[63:56]};
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_be <= 8'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_be[3:0] <= {pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[0], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[1], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[2], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[3]};
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_be[7:4] <= {pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[4], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[5], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[6], pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[7]};
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel0 <= 1'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel0 <= 1'd0;
    if ((({pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_fmt, pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_type} == 6'd52) | ({pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_fmt, pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_type} == 7'd116))) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel0 <= 1'd1;
    end
end
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_valid = pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_valid;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_ready = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_ready;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_first = pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_first;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_last = pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_last;
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_fmt <= 2'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_fmt <= pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_fmt;
    pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_fmt <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[30:29];
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_type <= 5'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_type <= pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_type;
    pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_type <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[28:24];
end
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_dat = pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_dat;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_be = pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_be;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_attr = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[13:12];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_ep = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[14];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_length = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[9:0];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_ln = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[17];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_master_time = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[127:64];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_message_code = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[39:32];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_requester_id = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[63:48];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_tc = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[22:20];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_td = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[15];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_th = pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[16];
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_valid = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_valid;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_ready = pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_ready;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_first = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_first;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_last = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_last;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_requester_id = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_requester_id;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_length = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_length;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_message_code = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_message_code;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_master_time = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_master_time;
assign pcie_ptm_sniffer_litepcietlpdepacketizer_ptm_source_payload_dat = pcie_ptm_sniffer_litepcietlpdepacketizer_tlp_ptm_payload_dat;
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat <= 64'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[31:0] <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_dat[63:32];
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_dat[63:32] <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_dat[31:0];
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be <= 8'd0;
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[3:0] <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_be[7:4];
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_be[7:4] <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_be[3:0];
end
always @(*) begin
    clockdomainsrenamer2_next_state <= 2'd0;
    clockdomainsrenamer2_next_state <= clockdomainsrenamer2_state;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count) begin
                    clockdomainsrenamer2_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_ready)) begin
                if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_last) begin
                    clockdomainsrenamer2_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value0 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_ready)) begin
                pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value0 <= 1'd0;
            end
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value_ce0 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_ready)) begin
                pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_ready <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_ready <= 1'd1;
        end
        2'd2: begin
            if ((pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_ready)) begin
                pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_ready <= (1'd1 & (~pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last));
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value1 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count) begin
                    if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_last) begin
                        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value1 <= 1'd1;
                    end
                end
            end
        end
        2'd2: begin
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value1 <= 1'd0;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value_ce1 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count) begin
                    if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_last) begin
                        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
                    end
                end
            end
        end
        2'd2: begin
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value2 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value2 <= (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count + 1'd1);
            end
        end
        2'd2: begin
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value2 <= 1'd0;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
        end
        2'd2: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_valid <= (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid | pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last);
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value_ce2 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value_ce2 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value_ce2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_first <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
        end
        2'd2: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_first <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value0 <= 32'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value0 <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[95:64];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_last <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
        end
        2'd2: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_last <= (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_last | pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last);
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value_ce0 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value_ce0 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value1 <= 32'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value1 <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[127:96];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value_ce1 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value_ce1 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value2 <= 32'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value2 <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_dat[31:0];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value_ce2 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value_ce2 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value3 <= 32'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value3 <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_dat[63:32];
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    clockdomainsrenamer2_next_value_ce3 <= 1'd0;
    case (clockdomainsrenamer2_state)
        1'd1: begin
            if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid) begin
                clockdomainsrenamer2_next_value_ce3 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1 <= 1'd0;
    if (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_first) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1 <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel0;
    end else begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1 <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel_ongoing;
    end
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_be <= 8'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_be <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_be;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_valid <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_valid <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_first <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_first <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_first;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_last <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_last <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_last;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_fmt <= 2'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_fmt <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_fmt;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_type <= 5'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_type <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_type;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_dat <= 64'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_dat <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_dat;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_be <= 8'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_payload_be <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_be;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_valid <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_valid <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready <= pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_ready;
        end
        1'd1: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready <= pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint1_ready;
        end
        default: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready <= 1'd1;
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_first <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_first <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_first;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_last <= 1'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_last <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_last;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_fmt <= 2'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_fmt <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_fmt;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_type <= 5'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_type <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_type;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_dat <= 64'd0;
    case (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel1)
        1'd0: begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_endpoint0_payload_dat <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_payload_dat;
        end
        1'd1: begin
        end
        default: begin
        end
    endcase
end
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_last = ((pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_last) & pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready);
assign pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing0 = ((pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid | pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing1) & (~pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_last));
assign pcie_ptm_sniffer_cdc_cdc_sink_valid = pcie_ptm_sniffer_cdc_sink_sink_valid;
assign pcie_ptm_sniffer_cdc_sink_sink_ready = pcie_ptm_sniffer_cdc_cdc_sink_ready;
assign pcie_ptm_sniffer_cdc_cdc_sink_first = pcie_ptm_sniffer_cdc_sink_sink_first;
assign pcie_ptm_sniffer_cdc_cdc_sink_last = pcie_ptm_sniffer_cdc_sink_sink_last;
assign pcie_ptm_sniffer_cdc_cdc_sink_payload_message_code = pcie_ptm_sniffer_cdc_sink_sink_payload_message_code;
assign pcie_ptm_sniffer_cdc_cdc_sink_payload_master_time = pcie_ptm_sniffer_cdc_sink_sink_payload_master_time;
assign pcie_ptm_sniffer_cdc_cdc_sink_payload_link_delay = pcie_ptm_sniffer_cdc_sink_sink_payload_link_delay;
assign pcie_ptm_sniffer_cdc_source_source_valid = pcie_ptm_sniffer_cdc_cdc_source_valid;
assign pcie_ptm_sniffer_cdc_cdc_source_ready = pcie_ptm_sniffer_cdc_source_source_ready;
assign pcie_ptm_sniffer_cdc_source_source_first = pcie_ptm_sniffer_cdc_cdc_source_first;
assign pcie_ptm_sniffer_cdc_source_source_last = pcie_ptm_sniffer_cdc_cdc_source_last;
assign pcie_ptm_sniffer_cdc_source_source_payload_message_code = pcie_ptm_sniffer_cdc_cdc_source_payload_message_code;
assign pcie_ptm_sniffer_cdc_source_source_payload_master_time = pcie_ptm_sniffer_cdc_cdc_source_payload_master_time;
assign pcie_ptm_sniffer_cdc_source_source_payload_link_delay = pcie_ptm_sniffer_cdc_cdc_source_payload_link_delay;
assign pcie_ptm_sniffer_cdc_cdc_asyncfifo_din = {pcie_ptm_sniffer_cdc_cdc_fifo_in_last, pcie_ptm_sniffer_cdc_cdc_fifo_in_first, pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_link_delay, pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_master_time, pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_message_code};
assign {pcie_ptm_sniffer_cdc_cdc_fifo_out_last, pcie_ptm_sniffer_cdc_cdc_fifo_out_first, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code} = pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout;
assign {pcie_ptm_sniffer_cdc_cdc_fifo_out_last, pcie_ptm_sniffer_cdc_cdc_fifo_out_first, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code} = pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout;
assign {pcie_ptm_sniffer_cdc_cdc_fifo_out_last, pcie_ptm_sniffer_cdc_cdc_fifo_out_first, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code} = pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout;
assign {pcie_ptm_sniffer_cdc_cdc_fifo_out_last, pcie_ptm_sniffer_cdc_cdc_fifo_out_first, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code} = pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout;
assign {pcie_ptm_sniffer_cdc_cdc_fifo_out_last, pcie_ptm_sniffer_cdc_cdc_fifo_out_first, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time, pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code} = pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout;
assign pcie_ptm_sniffer_cdc_cdc_sink_ready = pcie_ptm_sniffer_cdc_cdc_asyncfifo_writable;
assign pcie_ptm_sniffer_cdc_cdc_asyncfifo_we = pcie_ptm_sniffer_cdc_cdc_sink_valid;
assign pcie_ptm_sniffer_cdc_cdc_fifo_in_first = pcie_ptm_sniffer_cdc_cdc_sink_first;
assign pcie_ptm_sniffer_cdc_cdc_fifo_in_last = pcie_ptm_sniffer_cdc_cdc_sink_last;
assign pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_message_code = pcie_ptm_sniffer_cdc_cdc_sink_payload_message_code;
assign pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_master_time = pcie_ptm_sniffer_cdc_cdc_sink_payload_master_time;
assign pcie_ptm_sniffer_cdc_cdc_fifo_in_payload_link_delay = pcie_ptm_sniffer_cdc_cdc_sink_payload_link_delay;
assign pcie_ptm_sniffer_cdc_cdc_source_valid = pcie_ptm_sniffer_cdc_cdc_asyncfifo_readable;
assign pcie_ptm_sniffer_cdc_cdc_source_first = pcie_ptm_sniffer_cdc_cdc_fifo_out_first;
assign pcie_ptm_sniffer_cdc_cdc_source_last = pcie_ptm_sniffer_cdc_cdc_fifo_out_last;
assign pcie_ptm_sniffer_cdc_cdc_source_payload_message_code = pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_message_code;
assign pcie_ptm_sniffer_cdc_cdc_source_payload_master_time = pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_master_time;
assign pcie_ptm_sniffer_cdc_cdc_source_payload_link_delay = pcie_ptm_sniffer_cdc_cdc_fifo_out_payload_link_delay;
assign pcie_ptm_sniffer_cdc_cdc_asyncfifo_re = pcie_ptm_sniffer_cdc_cdc_source_ready;
assign pcie_ptm_sniffer_cdc_cdc_graycounter0_ce = (pcie_ptm_sniffer_cdc_cdc_asyncfifo_writable & pcie_ptm_sniffer_cdc_cdc_asyncfifo_we);
assign pcie_ptm_sniffer_cdc_cdc_graycounter1_ce = (pcie_ptm_sniffer_cdc_cdc_asyncfifo_readable & pcie_ptm_sniffer_cdc_cdc_asyncfifo_re);
assign pcie_ptm_sniffer_cdc_cdc_asyncfifo_writable = (((pcie_ptm_sniffer_cdc_cdc_graycounter0_q[2] == pcie_ptm_sniffer_cdc_cdc_consume_wdomain[2]) | (pcie_ptm_sniffer_cdc_cdc_graycounter0_q[1] == pcie_ptm_sniffer_cdc_cdc_consume_wdomain[1])) | (pcie_ptm_sniffer_cdc_cdc_graycounter0_q[0] != pcie_ptm_sniffer_cdc_cdc_consume_wdomain[0]));
assign pcie_ptm_sniffer_cdc_cdc_asyncfifo_readable = (pcie_ptm_sniffer_cdc_cdc_graycounter1_q != pcie_ptm_sniffer_cdc_cdc_produce_rdomain);
assign pcie_ptm_sniffer_cdc_cdc_wrport_adr = pcie_ptm_sniffer_cdc_cdc_graycounter0_q_binary[1:0];
assign pcie_ptm_sniffer_cdc_cdc_wrport_dat_w = pcie_ptm_sniffer_cdc_cdc_asyncfifo_din;
assign pcie_ptm_sniffer_cdc_cdc_wrport_we = pcie_ptm_sniffer_cdc_cdc_graycounter0_ce;
assign pcie_ptm_sniffer_cdc_cdc_rdport_adr = pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary[1:0];
assign pcie_ptm_sniffer_cdc_cdc_asyncfifo_dout = pcie_ptm_sniffer_cdc_cdc_rdport_dat_r;
always @(*) begin
    pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (pcie_ptm_sniffer_cdc_cdc_graycounter0_ce) begin
        pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary <= (pcie_ptm_sniffer_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary <= pcie_ptm_sniffer_cdc_cdc_graycounter0_q_binary;
    end
end
assign pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next = (pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary ^ pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (pcie_ptm_sniffer_cdc_cdc_graycounter1_ce) begin
        pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary <= (pcie_ptm_sniffer_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary <= pcie_ptm_sniffer_cdc_cdc_graycounter1_q_binary;
    end
end
assign pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next = (pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary ^ pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign ptm_capabilities_reg = ({depacketizer_conf_source_payload_ext_reg, depacketizer_conf_source_payload_register_no} - 7'd107);
assign ptm_capabilities_mem_ctrl_port_adr = 2'd2;
assign ptm_capabilities_ptm_enable = ((ptm_capabilities_mem_ctrl_port_dat_r >>> 1'd0) & 1'd1);
assign ptm_capabilities_ptm_root_select = ((ptm_capabilities_mem_ctrl_port_dat_r >>> 1'd1) & 1'd1);
assign ptm_capabilities_ptm_effective_granularity = ((ptm_capabilities_mem_ctrl_port_dat_r >>> 4'd8) & 8'd255);
always @(*) begin
    ptmcapabilities_next_state <= 2'd0;
    ptmcapabilities_next_state <= ptmcapabilities_state;
    case (ptmcapabilities_state)
        1'd1: begin
            ptmcapabilities_next_state <= 1'd0;
        end
        2'd2: begin
            ptmcapabilities_next_state <= 2'd3;
        end
        2'd3: begin
            if ((ptm_capabilities_sink_valid & ptm_capabilities_sink_ready)) begin
                ptmcapabilities_next_state <= 1'd0;
            end
        end
        default: begin
            if (depacketizer_conf_source_valid) begin
                if (depacketizer_conf_source_payload_we) begin
                    ptmcapabilities_next_state <= 1'd1;
                end else begin
                    ptmcapabilities_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_valid <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_first <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_first <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_last <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_last <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_dat_ptmcapabilities_next_value <= 32'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_dat_ptmcapabilities_next_value <= ptm_capabilities_mem_rd_port_dat_r;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_req_id <= 16'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_req_id <= depacketizer_conf_source_payload_req_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_dat_ptmcapabilities_next_value_ce <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_dat_ptmcapabilities_next_value_ce <= 1'd1;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_mem_wr_port_adr <= 2'd0;
    case (ptmcapabilities_state)
        1'd1: begin
            ptm_capabilities_mem_wr_port_adr <= ptm_capabilities_reg;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_err <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_err <= 1'd0;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_adr <= 32'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_adr <= 1'd0;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_cmp_id <= 16'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_cmp_id <= s7pciephy_id;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_mem_wr_port_we <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
            ptm_capabilities_mem_wr_port_we <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_mem_wr_port_dat_w <= 32'd0;
    case (ptmcapabilities_state)
        1'd1: begin
            ptm_capabilities_mem_wr_port_dat_w <= depacketizer_conf_source_payload_dat;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_mem_rd_port_adr <= 2'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
            ptm_capabilities_mem_rd_port_adr <= ptm_capabilities_reg;
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_tag <= 8'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_tag <= depacketizer_conf_source_payload_tag;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    depacketizer_conf_source_ready <= 1'd0;
    case (ptmcapabilities_state)
        1'd1: begin
            depacketizer_conf_source_ready <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            if ((ptm_capabilities_sink_valid & ptm_capabilities_sink_ready)) begin
                depacketizer_conf_source_ready <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_len <= 10'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_len <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_capabilities_sink_payload_dat <= 64'd0;
    case (ptmcapabilities_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            ptm_capabilities_sink_payload_dat <= ptm_capabilities_dat;
        end
        default: begin
        end
    endcase
end
assign ptm_requester_enable0 = ptm_requester_enable1;
assign ptm_requester_trigger0 = ptm_requester_trigger1;
assign ptm_requester_valid1 = ptm_requester_valid0;
assign ptm_requester_busy1 = ptm_requester_busy0;
assign ptm_requester_master_time_status = ptm_requester_master_time;
assign ptm_requester_link_delay_status = ptm_requester_link_delay;
assign ptm_requester_t1_time_status = ptm_requester_t1;
assign ptm_requester_t4_time_status = ptm_requester_t4;
assign time_clk = ptm_requester_time_clk;
assign time_rst = ptm_requester_time_rst;
assign ptm_requester_sink_sink_valid = 1'd1;
assign ptm_requester_sink_sink_payload_time = ptm_requester_time0;
assign ptm_requester_source_source_ready = 1'd1;
assign ptm_requester_reset = (~ptm_requester_enable0);
assign pcie_ptm_sniffer_source_source_ready = 1'd1;
assign ptm_requester_cdc_sink_valid = ptm_requester_sink_sink_valid;
assign ptm_requester_sink_sink_ready = ptm_requester_cdc_sink_ready;
assign ptm_requester_cdc_sink_first = ptm_requester_sink_sink_first;
assign ptm_requester_cdc_sink_last = ptm_requester_sink_sink_last;
assign ptm_requester_cdc_sink_payload_time = ptm_requester_sink_sink_payload_time;
assign ptm_requester_source_source_valid = ptm_requester_cdc_source_valid;
assign ptm_requester_cdc_source_ready = ptm_requester_source_source_ready;
assign ptm_requester_source_source_first = ptm_requester_cdc_source_first;
assign ptm_requester_source_source_last = ptm_requester_cdc_source_last;
assign ptm_requester_source_source_payload_time = ptm_requester_cdc_source_payload_time;
assign ptm_requester_cdc_asyncfifo_din = {ptm_requester_cdc_fifo_in_last, ptm_requester_cdc_fifo_in_first, ptm_requester_cdc_fifo_in_payload_time};
assign {ptm_requester_cdc_fifo_out_last, ptm_requester_cdc_fifo_out_first, ptm_requester_cdc_fifo_out_payload_time} = ptm_requester_cdc_asyncfifo_dout;
assign {ptm_requester_cdc_fifo_out_last, ptm_requester_cdc_fifo_out_first, ptm_requester_cdc_fifo_out_payload_time} = ptm_requester_cdc_asyncfifo_dout;
assign {ptm_requester_cdc_fifo_out_last, ptm_requester_cdc_fifo_out_first, ptm_requester_cdc_fifo_out_payload_time} = ptm_requester_cdc_asyncfifo_dout;
assign ptm_requester_cdc_sink_ready = ptm_requester_cdc_asyncfifo_writable;
assign ptm_requester_cdc_asyncfifo_we = ptm_requester_cdc_sink_valid;
assign ptm_requester_cdc_fifo_in_first = ptm_requester_cdc_sink_first;
assign ptm_requester_cdc_fifo_in_last = ptm_requester_cdc_sink_last;
assign ptm_requester_cdc_fifo_in_payload_time = ptm_requester_cdc_sink_payload_time;
assign ptm_requester_cdc_source_valid = ptm_requester_cdc_asyncfifo_readable;
assign ptm_requester_cdc_source_first = ptm_requester_cdc_fifo_out_first;
assign ptm_requester_cdc_source_last = ptm_requester_cdc_fifo_out_last;
assign ptm_requester_cdc_source_payload_time = ptm_requester_cdc_fifo_out_payload_time;
assign ptm_requester_cdc_asyncfifo_re = ptm_requester_cdc_source_ready;
assign ptm_requester_cdc_graycounter0_ce = (ptm_requester_cdc_asyncfifo_writable & ptm_requester_cdc_asyncfifo_we);
assign ptm_requester_cdc_graycounter1_ce = (ptm_requester_cdc_asyncfifo_readable & ptm_requester_cdc_asyncfifo_re);
assign ptm_requester_cdc_asyncfifo_writable = (((ptm_requester_cdc_graycounter0_q[2] == ptm_requester_cdc_consume_wdomain[2]) | (ptm_requester_cdc_graycounter0_q[1] == ptm_requester_cdc_consume_wdomain[1])) | (ptm_requester_cdc_graycounter0_q[0] != ptm_requester_cdc_consume_wdomain[0]));
assign ptm_requester_cdc_asyncfifo_readable = (ptm_requester_cdc_graycounter1_q != ptm_requester_cdc_produce_rdomain);
assign ptm_requester_cdc_wrport_adr = ptm_requester_cdc_graycounter0_q_binary[1:0];
assign ptm_requester_cdc_wrport_dat_w = ptm_requester_cdc_asyncfifo_din;
assign ptm_requester_cdc_wrport_we = ptm_requester_cdc_graycounter0_ce;
assign ptm_requester_cdc_rdport_adr = ptm_requester_cdc_graycounter1_q_next_binary[1:0];
assign ptm_requester_cdc_asyncfifo_dout = ptm_requester_cdc_rdport_dat_r;
always @(*) begin
    ptm_requester_cdc_graycounter0_q_next_binary <= 3'd0;
    if (ptm_requester_cdc_graycounter0_ce) begin
        ptm_requester_cdc_graycounter0_q_next_binary <= (ptm_requester_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        ptm_requester_cdc_graycounter0_q_next_binary <= ptm_requester_cdc_graycounter0_q_binary;
    end
end
assign ptm_requester_cdc_graycounter0_q_next = (ptm_requester_cdc_graycounter0_q_next_binary ^ ptm_requester_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    ptm_requester_cdc_graycounter1_q_next_binary <= 3'd0;
    if (ptm_requester_cdc_graycounter1_ce) begin
        ptm_requester_cdc_graycounter1_q_next_binary <= (ptm_requester_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        ptm_requester_cdc_graycounter1_q_next_binary <= ptm_requester_cdc_graycounter1_q_binary;
    end
end
assign ptm_requester_cdc_graycounter1_q_next = (ptm_requester_cdc_graycounter1_q_next_binary ^ ptm_requester_cdc_graycounter1_q_next_binary[2:1]);
assign ptm_requester_done = (ptm_requester_count == 1'd0);
always @(*) begin
    ptmrequester_next_state <= 3'd0;
    ptmrequester_next_state <= ptmrequester_state;
    case (ptmrequester_state)
        1'd1: begin
            if (ptm_requester_trigger0) begin
                ptmrequester_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (packetizer_ptm_sink_ready) begin
                ptmrequester_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                        ptmrequester_next_state <= 3'd4;
                    end else begin
                        ptmrequester_next_state <= 3'd5;
                    end
                end
            end
        end
        3'd4: begin
            if (ptm_requester_done) begin
                ptmrequester_next_state <= 2'd2;
            end
        end
        3'd5: begin
            if (ptm_requester_trigger0) begin
                ptmrequester_next_state <= 2'd2;
            end
            if (ptm_requester_invalidate) begin
                ptmrequester_next_state <= 1'd1;
            end
        end
        default: begin
            if (ptm_requester_enable0) begin
                ptmrequester_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_payload_response <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_payload_response <= 1'd0;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_t4_ptmrequester_next_value_ce4 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_t4_ptmrequester_next_value_ce4 <= 1'd1;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_payload_requester_id <= 16'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_payload_requester_id <= s7pciephy_id;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_wait <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            ptm_requester_wait <= 1'd1;
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_payload_length <= 10'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_payload_length <= 1'd0;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_payload_message_code <= 8'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_payload_message_code <= 7'd82;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_valid0 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
            ptm_requester_valid0 <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_busy0 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            ptm_requester_busy0 <= 1'd1;
        end
        2'd3: begin
            ptm_requester_busy0 <= 1'd1;
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_payload_request <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_payload_request <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_t1_ptmrequester_next_value0 <= 64'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            if (packetizer_ptm_sink_ready) begin
                ptm_requester_t1_ptmrequester_next_value0 <= ptm_requester_time1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_t1_ptmrequester_next_value_ce0 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            if (packetizer_ptm_sink_ready) begin
                ptm_requester_t1_ptmrequester_next_value_ce0 <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_update_ptmrequester_next_value1 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_update_ptmrequester_next_value1 <= 1'd1;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
            ptm_requester_update_ptmrequester_next_value1 <= 1'd0;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_update_ptmrequester_next_value_ce1 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_update_ptmrequester_next_value_ce1 <= 1'd1;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
            ptm_requester_update_ptmrequester_next_value_ce1 <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_master_time_ptmrequester_next_value2 <= 64'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_master_time_ptmrequester_next_value2 <= pcie_ptm_sniffer_source_source_payload_master_time;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_valid <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_valid <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_master_time_ptmrequester_next_value_ce2 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_master_time_ptmrequester_next_value_ce2 <= 1'd1;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_link_delay_ptmrequester_next_value3 <= 32'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_link_delay_ptmrequester_next_value3 <= pcie_ptm_sniffer_source_source_payload_link_delay;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_first <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_first <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_link_delay_ptmrequester_next_value_ce3 <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_link_delay_ptmrequester_next_value_ce3 <= 1'd1;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    packetizer_ptm_sink_last <= 1'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
            packetizer_ptm_sink_last <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    ptm_requester_t4_ptmrequester_next_value4 <= 64'd0;
    case (ptmrequester_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (pcie_ptm_sniffer_source_source_valid) begin
                if ((pcie_ptm_sniffer_source_source_payload_message_code == 7'd83)) begin
                    if ((pcie_ptm_sniffer_source_source_payload_master_time == 1'd0)) begin
                    end else begin
                        ptm_requester_t4_ptmrequester_next_value4 <= ptm_requester_time1;
                    end
                end
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    wishbone2csr_next_state <= 1'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    interface0_dat_r <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_dat_r <= interface1_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface0_ack <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface1_adr <= 14'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr;
            end
        end
    endcase
end
always @(*) begin
    interface1_re <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_re <= ((~interface0_we) & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_we <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface1_dat_w <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank0_reset0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_re <= interface0_bank_bus_we;
    end
end
always @(*) begin
    csrbank0_reset0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_we <= interface0_bank_bus_re;
    end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w;
always @(*) begin
    csrbank0_scratch0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    csrbank0_scratch0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_re <= interface0_bank_bus_we;
    end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w;
always @(*) begin
    csrbank0_bus_errors_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_re <= interface0_bank_bus_we;
    end
end
always @(*) begin
    csrbank0_bus_errors_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_we <= interface0_bank_bus_re;
    end
end
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csrbank0_reset0_w = reset_storage;
assign csrbank0_scratch0_w = scratch_storage;
assign csrbank0_bus_errors_w = bus_errors_status;
assign bus_errors_we = csrbank0_bus_errors_we;
assign sram0_sel = (interface0_sram_bus_adr[13:9] == 3'd7);
always @(*) begin
    interface0_sram_bus_dat_r <= 32'd0;
    if (sram0_sel_r) begin
        interface0_sram_bus_dat_r <= sram0_dat_r;
    end
end
assign sram0_adr = interface0_sram_bus_adr[5:0];
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 4'd8);
always @(*) begin
    csrbank1_phy_link_status_r <= 10'd0;
    csrbank1_phy_link_status_r <= interface1_bank_bus_dat_w[9:0];
    csrbank1_phy_link_status_r <= interface3_bank_bus_dat_w[9:0];
end
always @(*) begin
    csrbank1_phy_link_status_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_phy_link_status_we <= interface1_bank_bus_re;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_phy_link_status_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_phy_link_status_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_phy_link_status_re <= interface1_bank_bus_we;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_phy_link_status_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_phy_msi_enable_r <= 1'd0;
    csrbank1_phy_msi_enable_r <= interface1_bank_bus_dat_w[0];
    csrbank1_phy_msi_enable_r <= interface3_bank_bus_dat_w[0];
end
always @(*) begin
    csrbank1_phy_msi_enable_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_phy_msi_enable_we <= interface1_bank_bus_re;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_phy_msi_enable_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_phy_msi_enable_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_phy_msi_enable_re <= interface1_bank_bus_we;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_phy_msi_enable_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_phy_msix_enable_r <= 1'd0;
    csrbank1_phy_msix_enable_r <= interface1_bank_bus_dat_w[0];
    csrbank1_phy_msix_enable_r <= interface3_bank_bus_dat_w[0];
end
always @(*) begin
    csrbank1_phy_msix_enable_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_phy_msix_enable_re <= interface1_bank_bus_we;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_phy_msix_enable_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_phy_msix_enable_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_phy_msix_enable_we <= interface1_bank_bus_re;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_phy_msix_enable_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_phy_bus_master_enable_r <= 1'd0;
    csrbank1_phy_bus_master_enable_r <= interface1_bank_bus_dat_w[0];
    csrbank1_phy_bus_master_enable_r <= interface3_bank_bus_dat_w[0];
end
always @(*) begin
    csrbank1_phy_bus_master_enable_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank1_phy_bus_master_enable_re <= interface1_bank_bus_we;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank1_phy_bus_master_enable_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_phy_bus_master_enable_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank1_phy_bus_master_enable_we <= interface1_bank_bus_re;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank1_phy_bus_master_enable_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_phy_max_request_size_r <= 16'd0;
    csrbank1_phy_max_request_size_r <= interface1_bank_bus_dat_w[15:0];
    csrbank1_phy_max_request_size_r <= interface3_bank_bus_dat_w[15:0];
end
always @(*) begin
    csrbank1_phy_max_request_size_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank1_phy_max_request_size_we <= interface1_bank_bus_re;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank1_phy_max_request_size_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_phy_max_request_size_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank1_phy_max_request_size_re <= interface1_bank_bus_we;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank1_phy_max_request_size_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_phy_max_payload_size_r <= 16'd0;
    csrbank1_phy_max_payload_size_r <= interface1_bank_bus_dat_w[15:0];
    csrbank1_phy_max_payload_size_r <= interface3_bank_bus_dat_w[15:0];
end
always @(*) begin
    csrbank1_phy_max_payload_size_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank1_phy_max_payload_size_we <= interface1_bank_bus_re;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank1_phy_max_payload_size_we <= interface3_bank_bus_re;
    end
end
always @(*) begin
    csrbank1_phy_max_payload_size_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank1_phy_max_payload_size_re <= interface1_bank_bus_we;
    end
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank1_phy_max_payload_size_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    s7pciephy_link_status_status <= 10'd0;
    s7pciephy_link_status_status[0] <= s7pciephy_csrfield_status;
    s7pciephy_link_status_status[1] <= s7pciephy_csrfield_rate;
    s7pciephy_link_status_status[3:2] <= s7pciephy_csrfield_width;
    s7pciephy_link_status_status[9:4] <= s7pciephy_csrfield_ltssm;
end
assign csrbank1_phy_link_status_w = s7pciephy_link_status_status;
assign s7pciephy_link_status_we = csrbank1_phy_link_status_we;
assign csrbank1_phy_msi_enable_w = s7pciephy_msi_enable_status;
assign s7pciephy_msi_enable_we = csrbank1_phy_msi_enable_we;
assign csrbank1_phy_msix_enable_w = s7pciephy_msix_enable_status;
assign s7pciephy_msix_enable_we = csrbank1_phy_msix_enable_we;
assign csrbank1_phy_bus_master_enable_w = s7pciephy_bus_master_enable_status;
assign s7pciephy_bus_master_enable_we = csrbank1_phy_bus_master_enable_we;
assign csrbank1_phy_max_request_size_w = s7pciephy_max_request_size_status;
assign s7pciephy_max_request_size_we = csrbank1_phy_max_request_size_we;
assign csrbank1_phy_max_payload_size_w = s7pciephy_max_payload_size_status;
assign s7pciephy_max_payload_size_we = csrbank1_phy_max_payload_size_we;
assign sram1_sel = (interface1_sram_bus_adr[13:9] == 3'd4);
assign sram1_word_expanded = sram1_dat_r;
always @(*) begin
    interface1_sram_bus_dat_r <= 32'd0;
    if (sram1_sel_r) begin
        case (sram1_word_index)
            1'd0: begin
                interface1_sram_bus_dat_r <= sram1_word_expanded[127:96];
            end
            1'd1: begin
                interface1_sram_bus_dat_r <= sram1_word_expanded[95:64];
            end
            2'd2: begin
                interface1_sram_bus_dat_r <= sram1_word_expanded[63:32];
            end
            default: begin
                interface1_sram_bus_dat_r <= sram1_word_expanded[31:0];
            end
        endcase
    end
end
assign sram1_we = ((sram1_sel & interface1_sram_bus_we) & (interface1_sram_bus_adr[1:0] == 2'd3));
assign sram1_dat_w = {sram1_wreg0, sram1_wreg1, sram1_wreg2, interface1_sram_bus_dat_w};
assign sram1_adr = interface1_sram_bus_adr[7:2];
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd3);
assign csrbank2_enable1_r = interface2_bank_bus_dat_w;
always @(*) begin
    csrbank2_enable1_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_enable1_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_enable1_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_enable1_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_enable0_r = interface2_bank_bus_dat_w;
always @(*) begin
    csrbank2_enable0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_enable0_we <= interface2_bank_bus_re;
    end
end
always @(*) begin
    csrbank2_enable0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_enable0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_pba1_r = interface2_bank_bus_dat_w;
always @(*) begin
    csrbank2_pba1_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank2_pba1_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_pba1_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank2_pba1_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_pba0_r = interface2_bank_bus_dat_w;
always @(*) begin
    csrbank2_pba0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_pba0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_pba0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_pba0_we <= interface2_bank_bus_re;
    end
end
assign csrbank2_enable1_w = pcie_msi_enable_storage[63:32];
assign csrbank2_enable0_w = pcie_msi_enable_storage[31:0];
assign csrbank2_pba1_w = pcie_msi_pba_status[63:32];
assign csrbank2_pba0_w = pcie_msi_pba_status[31:0];
assign pcie_msi_pba_we = csrbank2_pba0_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd2);
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd6);
assign csrbank4_control0_r = interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank4_control0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_control0_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_control0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_control0_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_status_r = interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank4_status_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank4_status_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_status_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank4_status_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_phy_tx_delay_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_phy_tx_delay_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank4_phy_tx_delay_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_phy_tx_delay_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank4_phy_tx_delay_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_phy_rx_delay_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_phy_rx_delay_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank4_phy_rx_delay_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_phy_rx_delay_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank4_phy_rx_delay_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_master_time1_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_master_time1_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank4_master_time1_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_master_time1_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank4_master_time1_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_master_time0_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_master_time0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank4_master_time0_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_master_time0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank4_master_time0_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_link_delay_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_link_delay_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank4_link_delay_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_link_delay_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank4_link_delay_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_t1_time1_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_t1_time1_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank4_t1_time1_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_t1_time1_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank4_t1_time1_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_t1_time0_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_t1_time0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank4_t1_time0_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_t1_time0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd8))) begin
        csrbank4_t1_time0_we <= interface4_bank_bus_re;
    end
end
assign csrbank4_t4_time1_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_t4_time1_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank4_t4_time1_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_t4_time1_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank4_t4_time1_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_t4_time0_r = interface4_bank_bus_dat_w;
always @(*) begin
    csrbank4_t4_time0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank4_t4_time0_we <= interface4_bank_bus_re;
    end
end
always @(*) begin
    csrbank4_t4_time0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank4_t4_time0_re <= interface4_bank_bus_we;
    end
end
assign ptm_requester_enable1 = ptm_requester_control_storage[0];
always @(*) begin
    ptm_requester_trigger1 <= 1'd0;
    if (ptm_requester_control_re) begin
        ptm_requester_trigger1 <= ptm_requester_control_storage[1];
    end
end
assign csrbank4_control0_w = ptm_requester_control_storage;
always @(*) begin
    ptm_requester_status_status <= 2'd0;
    ptm_requester_status_status[0] <= ptm_requester_valid1;
    ptm_requester_status_status[1] <= ptm_requester_busy1;
end
assign csrbank4_status_w = ptm_requester_status_status;
assign ptm_requester_status_we = csrbank4_status_we;
assign csrbank4_phy_tx_delay_w = ptm_requester_phy_tx_delay_status;
assign ptm_requester_phy_tx_delay_we = csrbank4_phy_tx_delay_we;
assign csrbank4_phy_rx_delay_w = ptm_requester_phy_rx_delay_status;
assign ptm_requester_phy_rx_delay_we = csrbank4_phy_rx_delay_we;
assign csrbank4_master_time1_w = ptm_requester_master_time_status[63:32];
assign csrbank4_master_time0_w = ptm_requester_master_time_status[31:0];
assign ptm_requester_master_time_we = csrbank4_master_time0_we;
assign csrbank4_link_delay_w = ptm_requester_link_delay_status;
assign ptm_requester_link_delay_we = csrbank4_link_delay_we;
assign csrbank4_t1_time1_w = ptm_requester_t1_time_status[63:32];
assign csrbank4_t1_time0_w = ptm_requester_t1_time_status[31:0];
assign ptm_requester_t1_time_we = csrbank4_t1_time0_we;
assign csrbank4_t4_time1_w = ptm_requester_t4_time_status[63:32];
assign csrbank4_t4_time0_w = ptm_requester_t4_time_status[31:0];
assign ptm_requester_t4_time_we = csrbank4_t4_time0_we;
assign adr = interface1_adr;
assign re = interface1_re;
assign we = interface1_we;
assign dat_w = interface1_dat_w;
assign interface1_dat_r = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface2_bank_bus_adr = adr;
assign interface3_bank_bus_adr = adr;
assign interface4_bank_bus_adr = adr;
assign interface0_sram_bus_adr = adr;
assign interface1_sram_bus_adr = adr;
assign interface0_bank_bus_re = re;
assign interface1_bank_bus_re = re;
assign interface2_bank_bus_re = re;
assign interface3_bank_bus_re = re;
assign interface4_bank_bus_re = re;
assign interface0_sram_bus_re = re;
assign interface1_sram_bus_re = re;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface2_bank_bus_we = we;
assign interface3_bank_bus_we = we;
assign interface4_bank_bus_we = we;
assign interface0_sram_bus_we = we;
assign interface1_sram_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign interface2_bank_bus_dat_w = dat_w;
assign interface3_bank_bus_dat_w = dat_w;
assign interface4_bank_bus_dat_w = dat_w;
assign interface0_sram_bus_dat_w = dat_w;
assign interface1_sram_bus_dat_w = dat_w;
assign dat_r = ((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface0_sram_bus_dat_r) | interface1_sram_bus_dat_r);
assign slice_proxy0 = {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_data};
assign slice_proxy1 = {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_ctrl};
assign slice_proxy2 = {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_data};
assign slice_proxy3 = {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_ctrl};
assign slice_proxy4 = {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_data, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_data};
assign slice_proxy5 = {pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_payload_ctrl, pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_source_source_payload_ctrl};
always @(*) begin
    self0 <= 30'd0;
    case (grant)
        default: begin
            self0 <= pcie_wishbone_master_bus_adr;
        end
    endcase
end
always @(*) begin
    self1 <= 32'd0;
    case (grant)
        default: begin
            self1 <= pcie_wishbone_master_bus_dat_w;
        end
    endcase
end
always @(*) begin
    self2 <= 4'd0;
    case (grant)
        default: begin
            self2 <= pcie_wishbone_master_bus_sel;
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (grant)
        default: begin
            self3 <= pcie_wishbone_master_bus_cyc;
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (grant)
        default: begin
            self4 <= pcie_wishbone_master_bus_stb;
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (grant)
        default: begin
            self5 <= pcie_wishbone_master_bus_we;
        end
    endcase
end
always @(*) begin
    self6 <= 3'd0;
    case (grant)
        default: begin
            self6 <= pcie_wishbone_master_bus_cti;
        end
    endcase
end
always @(*) begin
    self7 <= 2'd0;
    case (grant)
        default: begin
            self7 <= pcie_wishbone_master_bus_bte;
        end
    endcase
end
assign s7pciephy_tx_datapath_cdc_cdc_produce_rdomain = xilinxmultiregimpl01;
assign s7pciephy_tx_datapath_cdc_cdc_consume_wdomain = xilinxmultiregimpl11;
assign s7pciephy_rx_datapath_cdc_cdc_produce_rdomain = xilinxmultiregimpl21;
assign s7pciephy_rx_datapath_cdc_cdc_consume_wdomain = xilinxmultiregimpl31;
assign s7pciephy_msi_cdc_cdc_produce_rdomain = xilinxmultiregimpl41;
assign s7pciephy_msi_cdc_cdc_consume_wdomain = xilinxmultiregimpl51;
assign xilinxasyncresetsynchronizerimpl6 = (~s7pciephy_locked);
assign xilinxasyncresetsynchronizerimpl7 = (~s7pciephy_locked);
assign xilinxasyncresetsynchronizerimpl8 = (~s7pciephy_locked);
assign xilinxasyncresetsynchronizerimpl9 = (~s7pciephy_locked);
assign s7pciephy_pipe_pclk_sel_r = xilinxmultiregimpl61;
assign s7pciephy_csrfield_status = xilinxmultiregimpl71;
assign s7pciephy_msi_enable_status = xilinxmultiregimpl81;
assign s7pciephy_msix_enable_status = xilinxmultiregimpl91;
assign s7pciephy_command = xilinxmultiregimpl101;
assign s7pciephy_dcommand = xilinxmultiregimpl111;
assign s7pciephy_bus_number = xilinxmultiregimpl121;
assign s7pciephy_device_number = xilinxmultiregimpl131;
assign s7pciephy_function_number = xilinxmultiregimpl141;
assign s7pciephy_csrfield_rate = xilinxmultiregimpl151;
assign s7pciephy_csrfield_width = xilinxmultiregimpl161;
assign s7pciephy_csrfield_ltssm = xilinxmultiregimpl171;
assign pcie_ptm_sniffer_rawdatapath_cdc_produce_rdomain = xilinxmultiregimpl181;
assign pcie_ptm_sniffer_rawdatapath_cdc_consume_wdomain = xilinxmultiregimpl191;
assign pcie_ptm_sniffer_cdc_cdc_produce_rdomain = xilinxmultiregimpl201;
assign pcie_ptm_sniffer_cdc_cdc_consume_wdomain = xilinxmultiregimpl211;
assign ptm_requester_cdc_produce_rdomain = xilinxmultiregimpl221;
assign ptm_requester_cdc_consume_wdomain = xilinxmultiregimpl231;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge from216_clk) begin
    s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_binary <= s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next_binary;
    s7pciephy_tx_datapath_cdc_cdc_graycounter0_q <= s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_next;
    if (from216_rst) begin
        s7pciephy_tx_datapath_cdc_cdc_graycounter0_q <= 5'd0;
        s7pciephy_tx_datapath_cdc_cdc_graycounter0_q_binary <= 5'd0;
    end
    xilinxmultiregimpl10 <= s7pciephy_tx_datapath_cdc_cdc_graycounter1_q;
    xilinxmultiregimpl11 <= xilinxmultiregimpl10;
end

always @(posedge from617_clk) begin
    s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_binary <= s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next_binary;
    s7pciephy_rx_datapath_cdc_cdc_graycounter0_q <= s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_next;
    if (from617_rst) begin
        s7pciephy_rx_datapath_cdc_cdc_graycounter0_q <= 5'd0;
        s7pciephy_rx_datapath_cdc_cdc_graycounter0_q_binary <= 5'd0;
    end
    xilinxmultiregimpl30 <= s7pciephy_rx_datapath_cdc_cdc_graycounter1_q;
    xilinxmultiregimpl31 <= xilinxmultiregimpl30;
end

always @(posedge from808_clk) begin
    s7pciephy_msi_cdc_cdc_graycounter0_q_binary <= s7pciephy_msi_cdc_cdc_graycounter0_q_next_binary;
    s7pciephy_msi_cdc_cdc_graycounter0_q <= s7pciephy_msi_cdc_cdc_graycounter0_q_next;
    if (from808_rst) begin
        s7pciephy_msi_cdc_cdc_graycounter0_q <= 3'd0;
        s7pciephy_msi_cdc_cdc_graycounter0_q_binary <= 3'd0;
    end
    xilinxmultiregimpl50 <= s7pciephy_msi_cdc_cdc_graycounter1_q;
    xilinxmultiregimpl51 <= xilinxmultiregimpl50;
end

always @(posedge pcie_clk) begin
    if ((s7pciephy_tx_datapath_pipe_ready_sink_valid & (~s7pciephy_tx_datapath_pipe_ready_source_ready))) begin
        s7pciephy_tx_datapath_pipe_ready_valid <= 1'd1;
    end else begin
        if (s7pciephy_tx_datapath_pipe_ready_source_ready) begin
            s7pciephy_tx_datapath_pipe_ready_valid <= 1'd0;
        end
    end
    if (((~s7pciephy_tx_datapath_pipe_ready_source_ready) & (~s7pciephy_tx_datapath_pipe_ready_valid))) begin
        s7pciephy_tx_datapath_pipe_ready_sink_d_valid <= s7pciephy_tx_datapath_pipe_ready_sink_valid;
        s7pciephy_tx_datapath_pipe_ready_sink_d_ready <= s7pciephy_tx_datapath_pipe_ready_sink_ready;
        s7pciephy_tx_datapath_pipe_ready_sink_d_first <= s7pciephy_tx_datapath_pipe_ready_sink_first;
        s7pciephy_tx_datapath_pipe_ready_sink_d_last <= s7pciephy_tx_datapath_pipe_ready_sink_last;
        s7pciephy_tx_datapath_pipe_ready_sink_d_payload_dat <= s7pciephy_tx_datapath_pipe_ready_sink_payload_dat;
        s7pciephy_tx_datapath_pipe_ready_sink_d_payload_be <= s7pciephy_tx_datapath_pipe_ready_sink_payload_be;
    end
    if ((s7pciephy_rx_datapath_pipe_ready_sink_valid & (~s7pciephy_rx_datapath_pipe_ready_source_ready))) begin
        s7pciephy_rx_datapath_pipe_ready_valid <= 1'd1;
    end else begin
        if (s7pciephy_rx_datapath_pipe_ready_source_ready) begin
            s7pciephy_rx_datapath_pipe_ready_valid <= 1'd0;
        end
    end
    if (((~s7pciephy_rx_datapath_pipe_ready_source_ready) & (~s7pciephy_rx_datapath_pipe_ready_valid))) begin
        s7pciephy_rx_datapath_pipe_ready_sink_d_valid <= s7pciephy_rx_datapath_pipe_ready_sink_valid;
        s7pciephy_rx_datapath_pipe_ready_sink_d_ready <= s7pciephy_rx_datapath_pipe_ready_sink_ready;
        s7pciephy_rx_datapath_pipe_ready_sink_d_first <= s7pciephy_rx_datapath_pipe_ready_sink_first;
        s7pciephy_rx_datapath_pipe_ready_sink_d_last <= s7pciephy_rx_datapath_pipe_ready_sink_last;
        s7pciephy_rx_datapath_pipe_ready_sink_d_payload_dat <= s7pciephy_rx_datapath_pipe_ready_sink_payload_dat;
        s7pciephy_rx_datapath_pipe_ready_sink_d_payload_be <= s7pciephy_rx_datapath_pipe_ready_sink_payload_be;
    end
    if (pcie_rst) begin
        s7pciephy_tx_datapath_pipe_ready_valid <= 1'd0;
        s7pciephy_tx_datapath_pipe_ready_sink_d_valid <= 1'd0;
        s7pciephy_tx_datapath_pipe_ready_sink_d_ready <= 1'd0;
        s7pciephy_tx_datapath_pipe_ready_sink_d_payload_dat <= 64'd0;
        s7pciephy_tx_datapath_pipe_ready_sink_d_payload_be <= 8'd0;
        s7pciephy_rx_datapath_pipe_ready_valid <= 1'd0;
        s7pciephy_rx_datapath_pipe_ready_sink_d_valid <= 1'd0;
        s7pciephy_rx_datapath_pipe_ready_sink_d_ready <= 1'd0;
        s7pciephy_rx_datapath_pipe_ready_sink_d_payload_dat <= 64'd0;
        s7pciephy_rx_datapath_pipe_ready_sink_d_payload_be <= 8'd0;
    end
end

always @(posedge pclk_clk) begin
    rx_data <= (rx_data + 1'd1);
    rx_ctl <= (rx_ctl + 1'd1);
    if ((s7pciephy_pipe_pclk_sel_r == 1'd1)) begin
        s7pciephy_pclk_sel <= 1'd1;
    end
    if ((s7pciephy_pipe_pclk_sel_r == 1'd0)) begin
        s7pciephy_pclk_sel <= 1'd0;
    end
    if (pclk_rst) begin
        s7pciephy_pclk_sel <= 1'd0;
        rx_data <= 16'd0;
        rx_ctl <= 2'd0;
    end
    xilinxmultiregimpl60 <= s7pciephy_pipe_pclk_sel;
    xilinxmultiregimpl61 <= xilinxmultiregimpl60;
end

always @(posedge sniffer_clk_1) begin
    if (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_ready) begin
        pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_strobe_all <= 1'd0;
    end
    if (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_load_part) begin
        if (((pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux == 1'd1) | pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_last)) begin
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux <= 1'd0;
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_strobe_all <= 1'd1;
        end else begin
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux <= (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux + 1'd1);
        end
    end
    if ((pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_valid & pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_valid & pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_ready)) begin
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_first <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_first;
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_last <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_last;
        end else begin
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_first <= 1'd0;
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_valid & pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_ready)) begin
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_first <= (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_first | pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_first);
            pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_last <= (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_last | pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_last);
        end
    end
    if (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_load_part) begin
        case (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux)
            1'd0: begin
                pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_data[17:0] <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_payload_data;
            end
            1'd1: begin
                pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_data[35:18] <= pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_sink_payload_data;
            end
        endcase
    end
    if (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_load_part) begin
        pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_valid_token_count <= (pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux + 1'd1);
    end
    if (((~pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_valid) | pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_ready)) begin
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_valid <= pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_valid;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_first <= pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_first;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_last <= pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_last;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_data <= pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_payload_data;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_ctrl <= pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_sink_payload_ctrl;
    end
    pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_binary <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next_binary;
    pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_next;
    if ((pcie_ptm_sniffer_rawdatapath_cdc_re | (~pcie_ptm_sniffer_rawdatapath_cdc_readable))) begin
        pcie_ptm_sniffer_rawdatapath_cdc_dout <= pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_dout;
        pcie_ptm_sniffer_rawdatapath_cdc_readable <= pcie_ptm_sniffer_rawdatapath_cdc_asyncfifo_readable;
    end
    pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_binary <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next_binary;
    pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_next;
    if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_valid & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_sink_ready)) begin
        if ((pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_enable & pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_update)) begin
            pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment_d <= pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment;
        end
    end
    if (((~pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_valid) | pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_ready)) begin
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_valid <= pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_valid;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_first <= pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_first;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_last <= pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_last;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_data <= pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_payload_data;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_ctrl <= pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_sink_payload_ctrl;
    end
    if (((~pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_valid) | pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_ready)) begin
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_valid <= pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_valid;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_first <= pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_first;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_last <= pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_last;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_data <= pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_payload_data;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_ctrl <= pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_sink_payload_ctrl;
    end
    if (pcie_ptm_sniffer_rawdescrambler_scrambler_ce) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_cur <= pcie_ptm_sniffer_rawdescrambler_scrambler_new;
    end
    if (pcie_ptm_sniffer_rawdescrambler_scrambler_reset) begin
        pcie_ptm_sniffer_rawdescrambler_scrambler_cur <= 16'd65535;
    end
    if (pcie_ptm_sniffer_tlpaligner_sink_valid) begin
        pcie_ptm_sniffer_tlpaligner_sink_data_d <= pcie_ptm_sniffer_tlpaligner_sink_payload_data;
        pcie_ptm_sniffer_tlpaligner_sink_data_dd <= pcie_ptm_sniffer_tlpaligner_sink_data_d;
        pcie_ptm_sniffer_tlpaligner_sink_ctrl_d <= pcie_ptm_sniffer_tlpaligner_sink_payload_ctrl;
        pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd <= pcie_ptm_sniffer_tlpaligner_sink_ctrl_d;
    end
    clockdomainsrenamer0_state <= clockdomainsrenamer0_next_state;
    if (pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value_ce0) begin
        pcie_ptm_sniffer_tlpaligner_alignment <= pcie_ptm_sniffer_tlpaligner_alignment_clockdomainsrenamer0_next_value0;
    end
    if (pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value_ce1) begin
        pcie_ptm_sniffer_tlpaligner_first <= pcie_ptm_sniffer_tlpaligner_first_clockdomainsrenamer0_next_value1;
    end
    if (pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_re) begin
        pcie_ptm_sniffer_tlpfilterformater_fifo_readable <= 1'd1;
    end else begin
        if (pcie_ptm_sniffer_tlpfilterformater_fifo_re) begin
            pcie_ptm_sniffer_tlpfilterformater_fifo_readable <= 1'd0;
        end
    end
    if (((pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_we & pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_writable) & (~pcie_ptm_sniffer_tlpfilterformater_fifo_replace))) begin
        pcie_ptm_sniffer_tlpfilterformater_fifo_produce <= (pcie_ptm_sniffer_tlpfilterformater_fifo_produce + 1'd1);
    end
    if (pcie_ptm_sniffer_tlpfilterformater_fifo_do_read) begin
        pcie_ptm_sniffer_tlpfilterformater_fifo_consume <= (pcie_ptm_sniffer_tlpfilterformater_fifo_consume + 1'd1);
    end
    if (((pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_we & pcie_ptm_sniffer_tlpfilterformater_fifo_syncfifo_writable) & (~pcie_ptm_sniffer_tlpfilterformater_fifo_replace))) begin
        if ((~pcie_ptm_sniffer_tlpfilterformater_fifo_do_read)) begin
            pcie_ptm_sniffer_tlpfilterformater_fifo_level0 <= (pcie_ptm_sniffer_tlpfilterformater_fifo_level0 + 1'd1);
        end
    end else begin
        if (pcie_ptm_sniffer_tlpfilterformater_fifo_do_read) begin
            pcie_ptm_sniffer_tlpfilterformater_fifo_level0 <= (pcie_ptm_sniffer_tlpfilterformater_fifo_level0 - 1'd1);
        end
    end
    if (pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_ready) begin
        pcie_ptm_sniffer_tlpfilterformater_conv_converter_strobe_all <= 1'd0;
    end
    if (pcie_ptm_sniffer_tlpfilterformater_conv_converter_load_part) begin
        if (((pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux == 1'd1) | pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_last)) begin
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux <= 1'd0;
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_strobe_all <= 1'd1;
        end else begin
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux <= (pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux + 1'd1);
        end
    end
    if ((pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_valid & pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_ready)) begin
        if ((pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_valid & pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_ready)) begin
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_first <= pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_first;
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_last <= pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_last;
        end else begin
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_first <= 1'd0;
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_last <= 1'd0;
        end
    end else begin
        if ((pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_valid & pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_ready)) begin
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_first <= (pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_first | pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_first);
            pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_last <= (pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_last | pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_last);
        end
    end
    if (pcie_ptm_sniffer_tlpfilterformater_conv_converter_load_part) begin
        case (pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux)
            1'd0: begin
                pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_data[35:0] <= pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_payload_data;
            end
            1'd1: begin
                pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_data[71:36] <= pcie_ptm_sniffer_tlpfilterformater_conv_converter_sink_payload_data;
            end
        endcase
    end
    if (pcie_ptm_sniffer_tlpfilterformater_conv_converter_load_part) begin
        pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_valid_token_count <= (pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux + 1'd1);
    end
    clockdomainsrenamer1_state <= clockdomainsrenamer1_next_state;
    if (pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value_ce) begin
        pcie_ptm_sniffer_tlpfilterformater_count <= pcie_ptm_sniffer_tlpfilterformater_count_clockdomainsrenamer1_next_value;
    end
    if ((pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_ready)) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_dat <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_dat;
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_be <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_sink_payload_be;
    end
    clockdomainsrenamer2_state <= clockdomainsrenamer2_next_state;
    if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value_ce0) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first_clockdomainsrenamer2_next_value0;
    end
    if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value_ce1) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last_clockdomainsrenamer2_next_value1;
    end
    if (pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value_ce2) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count <= pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count_clockdomainsrenamer2_next_value2;
    end
    if (clockdomainsrenamer2_next_value_ce0) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[31:0] <= clockdomainsrenamer2_next_value0;
    end
    if (clockdomainsrenamer2_next_value_ce1) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[63:32] <= clockdomainsrenamer2_next_value1;
    end
    if (clockdomainsrenamer2_next_value_ce2) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[95:64] <= clockdomainsrenamer2_next_value2;
    end
    if (clockdomainsrenamer2_next_value_ce3) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header[127:96] <= clockdomainsrenamer2_next_value3;
    end
    if (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_first) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel_ongoing <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel0;
    end
    pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing1 <= pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing0;
    if (pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_last) begin
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_first <= 1'd1;
    end else begin
        if ((pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_valid & pcie_ptm_sniffer_litepcietlpdepacketizer_dispatch_sink_ready)) begin
            pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_first <= 1'd0;
        end
    end
    pcie_ptm_sniffer_cdc_cdc_graycounter0_q_binary <= pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next_binary;
    pcie_ptm_sniffer_cdc_cdc_graycounter0_q <= pcie_ptm_sniffer_cdc_cdc_graycounter0_q_next;
    if (sniffer_rst) begin
        pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_data <= 36'd0;
        pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_source_payload_valid_token_count <= 2'd0;
        pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_demux <= 1'd0;
        pcie_ptm_sniffer_rawdatapath_converter_strideconverter_converter_strobe_all <= 1'd0;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_valid <= 1'd0;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_data <= 16'd0;
        pcie_ptm_sniffer_rawdatapath_converter_bufferizeendpoints_pipe_valid_source_payload_ctrl <= 2'd0;
        pcie_ptm_sniffer_rawdatapath_cdc_readable <= 1'd0;
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q <= 4'd0;
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q_binary <= 4'd0;
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q <= 4'd0;
        pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q_binary <= 4'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_alignment_d <= 2'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_valid <= 1'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_data <= 32'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_rawwordaligner_pipe_valid_source_payload_ctrl <= 4'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_valid <= 1'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_data <= 32'd0;
        pcie_ptm_sniffer_rawdatapath_word_aligner_bufferizeendpoints_pipe_valid_source_payload_ctrl <= 4'd0;
        pcie_ptm_sniffer_rawdescrambler_scrambler_cur <= 16'd65535;
        pcie_ptm_sniffer_tlpaligner_first <= 1'd0;
        pcie_ptm_sniffer_tlpaligner_alignment <= 2'd0;
        pcie_ptm_sniffer_tlpaligner_sink_ctrl_d <= 4'd0;
        pcie_ptm_sniffer_tlpaligner_sink_ctrl_dd <= 4'd0;
        pcie_ptm_sniffer_tlpaligner_sink_data_d <= 32'd0;
        pcie_ptm_sniffer_tlpaligner_sink_data_dd <= 32'd0;
        pcie_ptm_sniffer_tlpfilterformater_count <= 32'd0;
        pcie_ptm_sniffer_tlpfilterformater_fifo_readable <= 1'd0;
        pcie_ptm_sniffer_tlpfilterformater_fifo_level0 <= 3'd0;
        pcie_ptm_sniffer_tlpfilterformater_fifo_produce <= 2'd0;
        pcie_ptm_sniffer_tlpfilterformater_fifo_consume <= 2'd0;
        pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_data <= 72'd0;
        pcie_ptm_sniffer_tlpfilterformater_conv_converter_source_payload_valid_token_count <= 2'd0;
        pcie_ptm_sniffer_tlpfilterformater_conv_converter_demux <= 1'd0;
        pcie_ptm_sniffer_tlpfilterformater_conv_converter_strobe_all <= 1'd0;
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_source_payload_header <= 128'd0;
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_first <= 1'd0;
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_last <= 1'd0;
        pcie_ptm_sniffer_litepcietlpdepacketizer_header_extracter_count <= 1'd0;
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_first <= 1'd1;
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_ongoing1 <= 1'd0;
        pcie_ptm_sniffer_litepcietlpdepacketizer_dispatcher_sel_ongoing <= 1'd0;
        pcie_ptm_sniffer_cdc_cdc_graycounter0_q <= 3'd0;
        pcie_ptm_sniffer_cdc_cdc_graycounter0_q_binary <= 3'd0;
        clockdomainsrenamer0_state <= 2'd0;
        clockdomainsrenamer1_state <= 2'd0;
        clockdomainsrenamer2_state <= 2'd0;
    end
    xilinxmultiregimpl180 <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter0_q;
    xilinxmultiregimpl181 <= xilinxmultiregimpl180;
    xilinxmultiregimpl190 <= pcie_ptm_sniffer_rawdatapath_cdc_graycounter1_q;
    xilinxmultiregimpl191 <= xilinxmultiregimpl190;
    xilinxmultiregimpl210 <= pcie_ptm_sniffer_cdc_cdc_graycounter1_q;
    xilinxmultiregimpl211 <= xilinxmultiregimpl210;
end

always @(posedge sys_clk) begin
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    if (((~s7pciephy_tx_datapath_pipe_valid_source_valid) | s7pciephy_tx_datapath_pipe_valid_source_ready)) begin
        s7pciephy_tx_datapath_pipe_valid_source_valid <= s7pciephy_tx_datapath_pipe_valid_sink_valid;
        s7pciephy_tx_datapath_pipe_valid_source_first <= s7pciephy_tx_datapath_pipe_valid_sink_first;
        s7pciephy_tx_datapath_pipe_valid_source_last <= s7pciephy_tx_datapath_pipe_valid_sink_last;
        s7pciephy_tx_datapath_pipe_valid_source_payload_dat <= s7pciephy_tx_datapath_pipe_valid_sink_payload_dat;
        s7pciephy_tx_datapath_pipe_valid_source_payload_be <= s7pciephy_tx_datapath_pipe_valid_sink_payload_be;
    end
    if (((~s7pciephy_rx_datapath_pipe_valid_source_valid) | s7pciephy_rx_datapath_pipe_valid_source_ready)) begin
        s7pciephy_rx_datapath_pipe_valid_source_valid <= s7pciephy_rx_datapath_pipe_valid_sink_valid;
        s7pciephy_rx_datapath_pipe_valid_source_first <= s7pciephy_rx_datapath_pipe_valid_sink_first;
        s7pciephy_rx_datapath_pipe_valid_source_last <= s7pciephy_rx_datapath_pipe_valid_sink_last;
        s7pciephy_rx_datapath_pipe_valid_source_payload_dat <= s7pciephy_rx_datapath_pipe_valid_sink_payload_dat;
        s7pciephy_rx_datapath_pipe_valid_source_payload_be <= s7pciephy_rx_datapath_pipe_valid_sink_payload_be;
    end
    if ((depacketizer_header_extracter_sink_valid & depacketizer_header_extracter_sink_ready)) begin
        depacketizer_header_extracter_dat <= depacketizer_header_extracter_sink_payload_dat;
        depacketizer_header_extracter_be <= depacketizer_header_extracter_sink_payload_be;
    end
    litepcieendpoint_state <= litepcieendpoint_next_state;
    if (depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value_ce0) begin
        depacketizer_header_extracter_first <= depacketizer_header_extracter_first_litepcietlpdepacketizer_next_value0;
    end
    if (depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value_ce1) begin
        depacketizer_header_extracter_last <= depacketizer_header_extracter_last_litepcietlpdepacketizer_next_value1;
    end
    if (depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value_ce2) begin
        depacketizer_header_extracter_count <= depacketizer_header_extracter_count_litepcietlpdepacketizer_next_value2;
    end
    if (litepcieendpoint_next_value_ce0) begin
        depacketizer_header_extracter_source_payload_header[31:0] <= litepcieendpoint_next_value0;
    end
    if (litepcieendpoint_next_value_ce1) begin
        depacketizer_header_extracter_source_payload_header[63:32] <= litepcieendpoint_next_value1;
    end
    if (litepcieendpoint_next_value_ce2) begin
        depacketizer_header_extracter_source_payload_header[95:64] <= litepcieendpoint_next_value2;
    end
    if (litepcieendpoint_next_value_ce3) begin
        depacketizer_header_extracter_source_payload_header[127:96] <= litepcieendpoint_next_value3;
    end
    if (depacketizer_dispatcher_first) begin
        depacketizer_dispatcher_sel_ongoing <= depacketizer_dispatcher_sel0;
    end
    depacketizer_dispatcher_ongoing1 <= depacketizer_dispatcher_ongoing0;
    if (depacketizer_dispatcher_last) begin
        depacketizer_dispatcher_first <= 1'd1;
    end else begin
        if ((depacketizer_dispatch_sink_valid & depacketizer_dispatch_sink_ready)) begin
            depacketizer_dispatcher_first <= 1'd0;
        end
    end
    case (packetizer_grant)
        1'd0: begin
            if ((~packetizer_request[0])) begin
                if (packetizer_request[1]) begin
                    packetizer_grant <= 1'd1;
                end else begin
                    if (packetizer_request[2]) begin
                        packetizer_grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~packetizer_request[1])) begin
                if (packetizer_request[2]) begin
                    packetizer_grant <= 2'd2;
                end else begin
                    if (packetizer_request[0]) begin
                        packetizer_grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~packetizer_request[2])) begin
                if (packetizer_request[0]) begin
                    packetizer_grant <= 1'd0;
                end else begin
                    if (packetizer_request[1]) begin
                        packetizer_grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    packetizer_status0_ongoing1 <= packetizer_status0_ongoing0;
    if (packetizer_status0_last) begin
        packetizer_status0_first <= 1'd1;
    end else begin
        if ((packetizer_tlp_raw_req_valid & packetizer_tlp_raw_req_ready)) begin
            packetizer_status0_first <= 1'd0;
        end
    end
    packetizer_status1_ongoing1 <= packetizer_status1_ongoing0;
    if (packetizer_status1_last) begin
        packetizer_status1_first <= 1'd1;
    end else begin
        if ((packetizer_tlp_raw_cmp_valid & packetizer_tlp_raw_cmp_ready)) begin
            packetizer_status1_first <= 1'd0;
        end
    end
    packetizer_status2_ongoing1 <= packetizer_status2_ongoing0;
    if (packetizer_status2_last) begin
        packetizer_status2_first <= 1'd1;
    end else begin
        if ((packetizer_tlp_raw_ptm_valid & packetizer_tlp_raw_ptm_ready)) begin
            packetizer_status2_first <= 1'd0;
        end
    end
    if (((~packetizer_tlp_raw_buf_pipe_valid_source_valid) | packetizer_tlp_raw_buf_pipe_valid_source_ready)) begin
        packetizer_tlp_raw_buf_pipe_valid_source_valid <= packetizer_tlp_raw_buf_pipe_valid_sink_valid;
        packetizer_tlp_raw_buf_pipe_valid_source_first <= packetizer_tlp_raw_buf_pipe_valid_sink_first;
        packetizer_tlp_raw_buf_pipe_valid_source_last <= packetizer_tlp_raw_buf_pipe_valid_sink_last;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_fmt <= packetizer_tlp_raw_buf_pipe_valid_sink_payload_fmt;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_header <= packetizer_tlp_raw_buf_pipe_valid_sink_payload_header;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_dat <= packetizer_tlp_raw_buf_pipe_valid_sink_payload_dat;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_be <= packetizer_tlp_raw_buf_pipe_valid_sink_payload_be;
    end
    if ((packetizer_header_inserter_header_inserter_3dws_sink_valid & packetizer_header_inserter_header_inserter_3dws_sink_ready)) begin
        packetizer_header_inserter_header_inserter_3dws_dat <= packetizer_header_inserter_header_inserter_3dws_sink_payload_dat;
        packetizer_header_inserter_header_inserter_3dws_be <= packetizer_header_inserter_header_inserter_3dws_sink_payload_be;
        packetizer_header_inserter_header_inserter_3dws_last <= packetizer_header_inserter_header_inserter_3dws_sink_last;
    end
    litepcieendpoint_litepcietlpheaderinserter64b3dws_state <= litepcieendpoint_litepcietlpheaderinserter64b3dws_next_state;
    if (packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value_ce) begin
        packetizer_header_inserter_header_inserter_3dws_count <= packetizer_header_inserter_header_inserter_3dws_count_litepcietlpheaderinserter64b3dws_next_value;
    end
    litepcieendpoint_litepcietlpheaderinserter64b4dws_state <= litepcieendpoint_litepcietlpheaderinserter64b4dws_next_state;
    if (packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value_ce) begin
        packetizer_header_inserter_header_inserter_4dws_count <= packetizer_header_inserter_header_inserter_4dws_count_litepcietlpheaderinserter64b4dws_next_value;
    end
    if (litepcieendpoint_s_dispatcher_first) begin
        litepcieendpoint_s_dispatcher_sel_ongoing <= litepcieendpoint_s_dispatcher_sel0;
    end
    litepcieendpoint_s_dispatcher_ongoing1 <= litepcieendpoint_s_dispatcher_ongoing0;
    if (litepcieendpoint_s_dispatcher_last) begin
        litepcieendpoint_s_dispatcher_first <= 1'd1;
    end else begin
        if ((slave_source_valid & slave_source_ready)) begin
            litepcieendpoint_s_dispatcher_first <= 1'd0;
        end
    end
    case (litepcieendpoint_grant)
        1'd0: begin
            if ((~litepcieendpoint_request[0])) begin
                if (litepcieendpoint_request[1]) begin
                    litepcieendpoint_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~litepcieendpoint_request[1])) begin
                if (litepcieendpoint_request[0]) begin
                    litepcieendpoint_grant <= 1'd0;
                end
            end
        end
    endcase
    litepcieendpoint_status0_ongoing1 <= litepcieendpoint_status0_ongoing0;
    if (litepcieendpoint_status0_last) begin
        litepcieendpoint_status0_first <= 1'd1;
    end else begin
        if ((pcie_wishbone_master_sink_valid & pcie_wishbone_master_sink_ready)) begin
            litepcieendpoint_status0_first <= 1'd0;
        end
    end
    litepcieendpoint_status1_ongoing1 <= litepcieendpoint_status1_ongoing0;
    if (litepcieendpoint_status1_last) begin
        litepcieendpoint_status1_first <= 1'd1;
    end else begin
        if ((ptm_capabilities_sink_valid & ptm_capabilities_sink_ready)) begin
            litepcieendpoint_status1_first <= 1'd0;
        end
    end
    if (litepcieendpoint_tag_queue_syncfifo_re) begin
        litepcieendpoint_tag_queue_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_tag_queue_re) begin
            litepcieendpoint_tag_queue_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_tag_queue_syncfifo_we & litepcieendpoint_tag_queue_syncfifo_writable) & (~litepcieendpoint_tag_queue_replace))) begin
        litepcieendpoint_tag_queue_produce <= (litepcieendpoint_tag_queue_produce + 1'd1);
    end
    if (litepcieendpoint_tag_queue_do_read) begin
        litepcieendpoint_tag_queue_consume <= (litepcieendpoint_tag_queue_consume + 1'd1);
    end
    if (((litepcieendpoint_tag_queue_syncfifo_we & litepcieendpoint_tag_queue_syncfifo_writable) & (~litepcieendpoint_tag_queue_replace))) begin
        if ((~litepcieendpoint_tag_queue_do_read)) begin
            litepcieendpoint_tag_queue_level0 <= (litepcieendpoint_tag_queue_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_tag_queue_do_read) begin
            litepcieendpoint_tag_queue_level0 <= (litepcieendpoint_tag_queue_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_req_queue_syncfifo_re) begin
        litepcieendpoint_req_queue_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_req_queue_re) begin
            litepcieendpoint_req_queue_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_req_queue_syncfifo_we & litepcieendpoint_req_queue_syncfifo_writable) & (~litepcieendpoint_req_queue_replace))) begin
        litepcieendpoint_req_queue_produce <= (litepcieendpoint_req_queue_produce + 1'd1);
    end
    if (litepcieendpoint_req_queue_do_read) begin
        litepcieendpoint_req_queue_consume <= (litepcieendpoint_req_queue_consume + 1'd1);
    end
    if (((litepcieendpoint_req_queue_syncfifo_we & litepcieendpoint_req_queue_syncfifo_writable) & (~litepcieendpoint_req_queue_replace))) begin
        if ((~litepcieendpoint_req_queue_do_read)) begin
            litepcieendpoint_req_queue_level0 <= (litepcieendpoint_req_queue_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_req_queue_do_read) begin
            litepcieendpoint_req_queue_level0 <= (litepcieendpoint_req_queue_level0 - 1'd1);
        end
    end
    litepcieendpoint_fsm0_state <= litepcieendpoint_fsm0_next_state;
    if (litepcieendpoint_syncfifo0_syncfifo0_re) begin
        litepcieendpoint_syncfifo0_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo0_re) begin
            litepcieendpoint_syncfifo0_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo0_syncfifo0_we & litepcieendpoint_syncfifo0_syncfifo0_writable) & (~litepcieendpoint_syncfifo0_replace))) begin
        litepcieendpoint_syncfifo0_produce <= (litepcieendpoint_syncfifo0_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo0_do_read) begin
        litepcieendpoint_syncfifo0_consume <= (litepcieendpoint_syncfifo0_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo0_syncfifo0_we & litepcieendpoint_syncfifo0_syncfifo0_writable) & (~litepcieendpoint_syncfifo0_replace))) begin
        if ((~litepcieendpoint_syncfifo0_do_read)) begin
            litepcieendpoint_syncfifo0_level0 <= (litepcieendpoint_syncfifo0_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo0_do_read) begin
            litepcieendpoint_syncfifo0_level0 <= (litepcieendpoint_syncfifo0_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo1_syncfifo1_re) begin
        litepcieendpoint_syncfifo1_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo1_re) begin
            litepcieendpoint_syncfifo1_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo1_syncfifo1_we & litepcieendpoint_syncfifo1_syncfifo1_writable) & (~litepcieendpoint_syncfifo1_replace))) begin
        litepcieendpoint_syncfifo1_produce <= (litepcieendpoint_syncfifo1_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo1_do_read) begin
        litepcieendpoint_syncfifo1_consume <= (litepcieendpoint_syncfifo1_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo1_syncfifo1_we & litepcieendpoint_syncfifo1_syncfifo1_writable) & (~litepcieendpoint_syncfifo1_replace))) begin
        if ((~litepcieendpoint_syncfifo1_do_read)) begin
            litepcieendpoint_syncfifo1_level0 <= (litepcieendpoint_syncfifo1_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo1_do_read) begin
            litepcieendpoint_syncfifo1_level0 <= (litepcieendpoint_syncfifo1_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo2_syncfifo2_re) begin
        litepcieendpoint_syncfifo2_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo2_re) begin
            litepcieendpoint_syncfifo2_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo2_syncfifo2_we & litepcieendpoint_syncfifo2_syncfifo2_writable) & (~litepcieendpoint_syncfifo2_replace))) begin
        litepcieendpoint_syncfifo2_produce <= (litepcieendpoint_syncfifo2_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo2_do_read) begin
        litepcieendpoint_syncfifo2_consume <= (litepcieendpoint_syncfifo2_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo2_syncfifo2_we & litepcieendpoint_syncfifo2_syncfifo2_writable) & (~litepcieendpoint_syncfifo2_replace))) begin
        if ((~litepcieendpoint_syncfifo2_do_read)) begin
            litepcieendpoint_syncfifo2_level0 <= (litepcieendpoint_syncfifo2_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo2_do_read) begin
            litepcieendpoint_syncfifo2_level0 <= (litepcieendpoint_syncfifo2_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo3_syncfifo3_re) begin
        litepcieendpoint_syncfifo3_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo3_re) begin
            litepcieendpoint_syncfifo3_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo3_syncfifo3_we & litepcieendpoint_syncfifo3_syncfifo3_writable) & (~litepcieendpoint_syncfifo3_replace))) begin
        litepcieendpoint_syncfifo3_produce <= (litepcieendpoint_syncfifo3_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo3_do_read) begin
        litepcieendpoint_syncfifo3_consume <= (litepcieendpoint_syncfifo3_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo3_syncfifo3_we & litepcieendpoint_syncfifo3_syncfifo3_writable) & (~litepcieendpoint_syncfifo3_replace))) begin
        if ((~litepcieendpoint_syncfifo3_do_read)) begin
            litepcieendpoint_syncfifo3_level0 <= (litepcieendpoint_syncfifo3_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo3_do_read) begin
            litepcieendpoint_syncfifo3_level0 <= (litepcieendpoint_syncfifo3_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo4_syncfifo4_re) begin
        litepcieendpoint_syncfifo4_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo4_re) begin
            litepcieendpoint_syncfifo4_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo4_syncfifo4_we & litepcieendpoint_syncfifo4_syncfifo4_writable) & (~litepcieendpoint_syncfifo4_replace))) begin
        litepcieendpoint_syncfifo4_produce <= (litepcieendpoint_syncfifo4_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo4_do_read) begin
        litepcieendpoint_syncfifo4_consume <= (litepcieendpoint_syncfifo4_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo4_syncfifo4_we & litepcieendpoint_syncfifo4_syncfifo4_writable) & (~litepcieendpoint_syncfifo4_replace))) begin
        if ((~litepcieendpoint_syncfifo4_do_read)) begin
            litepcieendpoint_syncfifo4_level0 <= (litepcieendpoint_syncfifo4_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo4_do_read) begin
            litepcieendpoint_syncfifo4_level0 <= (litepcieendpoint_syncfifo4_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo5_syncfifo5_re) begin
        litepcieendpoint_syncfifo5_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo5_re) begin
            litepcieendpoint_syncfifo5_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo5_syncfifo5_we & litepcieendpoint_syncfifo5_syncfifo5_writable) & (~litepcieendpoint_syncfifo5_replace))) begin
        litepcieendpoint_syncfifo5_produce <= (litepcieendpoint_syncfifo5_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo5_do_read) begin
        litepcieendpoint_syncfifo5_consume <= (litepcieendpoint_syncfifo5_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo5_syncfifo5_we & litepcieendpoint_syncfifo5_syncfifo5_writable) & (~litepcieendpoint_syncfifo5_replace))) begin
        if ((~litepcieendpoint_syncfifo5_do_read)) begin
            litepcieendpoint_syncfifo5_level0 <= (litepcieendpoint_syncfifo5_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo5_do_read) begin
            litepcieendpoint_syncfifo5_level0 <= (litepcieendpoint_syncfifo5_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo6_syncfifo6_re) begin
        litepcieendpoint_syncfifo6_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo6_re) begin
            litepcieendpoint_syncfifo6_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo6_syncfifo6_we & litepcieendpoint_syncfifo6_syncfifo6_writable) & (~litepcieendpoint_syncfifo6_replace))) begin
        litepcieendpoint_syncfifo6_produce <= (litepcieendpoint_syncfifo6_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo6_do_read) begin
        litepcieendpoint_syncfifo6_consume <= (litepcieendpoint_syncfifo6_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo6_syncfifo6_we & litepcieendpoint_syncfifo6_syncfifo6_writable) & (~litepcieendpoint_syncfifo6_replace))) begin
        if ((~litepcieendpoint_syncfifo6_do_read)) begin
            litepcieendpoint_syncfifo6_level0 <= (litepcieendpoint_syncfifo6_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo6_do_read) begin
            litepcieendpoint_syncfifo6_level0 <= (litepcieendpoint_syncfifo6_level0 - 1'd1);
        end
    end
    if (litepcieendpoint_syncfifo7_syncfifo7_re) begin
        litepcieendpoint_syncfifo7_readable <= 1'd1;
    end else begin
        if (litepcieendpoint_syncfifo7_re) begin
            litepcieendpoint_syncfifo7_readable <= 1'd0;
        end
    end
    if (((litepcieendpoint_syncfifo7_syncfifo7_we & litepcieendpoint_syncfifo7_syncfifo7_writable) & (~litepcieendpoint_syncfifo7_replace))) begin
        litepcieendpoint_syncfifo7_produce <= (litepcieendpoint_syncfifo7_produce + 1'd1);
    end
    if (litepcieendpoint_syncfifo7_do_read) begin
        litepcieendpoint_syncfifo7_consume <= (litepcieendpoint_syncfifo7_consume + 1'd1);
    end
    if (((litepcieendpoint_syncfifo7_syncfifo7_we & litepcieendpoint_syncfifo7_syncfifo7_writable) & (~litepcieendpoint_syncfifo7_replace))) begin
        if ((~litepcieendpoint_syncfifo7_do_read)) begin
            litepcieendpoint_syncfifo7_level0 <= (litepcieendpoint_syncfifo7_level0 + 1'd1);
        end
    end else begin
        if (litepcieendpoint_syncfifo7_do_read) begin
            litepcieendpoint_syncfifo7_level0 <= (litepcieendpoint_syncfifo7_level0 - 1'd1);
        end
    end
    litepcieendpoint_fsm1_state <= litepcieendpoint_fsm1_next_state;
    if (litepcieendpoint_fill_tag_litepciecrossbar_next_value_ce) begin
        litepcieendpoint_fill_tag <= litepcieendpoint_fill_tag_litepciecrossbar_next_value;
    end
    if (litepcieendpoint_m_dispatcher_first) begin
        litepcieendpoint_m_dispatcher_sel_ongoing <= litepcieendpoint_m_dispatcher_sel0;
    end
    litepcieendpoint_m_dispatcher_ongoing1 <= litepcieendpoint_m_dispatcher_ongoing0;
    if (litepcieendpoint_m_dispatcher_last) begin
        litepcieendpoint_m_dispatcher_first <= 1'd1;
    end else begin
        if ((litepcieendpoint_master_in_source_valid & litepcieendpoint_master_in_source_ready)) begin
            litepcieendpoint_m_dispatcher_first <= 1'd0;
        end
    end
    pcie_wishbone_master_bus_sel <= 4'd15;
    pcie_wishbone_master_bus_adr <= (pcie_wishbone_master_source_payload_adr[31:2] + 1'd0);
    if (1'd0) begin
        if (pcie_wishbone_master_source_payload_adr[2]) begin
            pcie_wishbone_master_bus_dat_w <= pcie_wishbone_master_source_payload_dat[31:0];
        end else begin
            pcie_wishbone_master_bus_dat_w <= pcie_wishbone_master_source_payload_dat[63:32];
        end
    end else begin
        pcie_wishbone_master_bus_dat_w <= pcie_wishbone_master_source_payload_dat[31:0];
    end
    pcie_wishbone_master_sink_first <= 1'd1;
    pcie_wishbone_master_sink_last <= 1'd1;
    pcie_wishbone_master_sink_payload_len <= 1'd1;
    pcie_wishbone_master_sink_payload_err <= 1'd0;
    pcie_wishbone_master_sink_payload_tag <= pcie_wishbone_master_source_payload_tag;
    pcie_wishbone_master_sink_payload_adr <= pcie_wishbone_master_source_payload_adr;
    pcie_wishbone_master_sink_payload_cmp_id <= s7pciephy_id;
    pcie_wishbone_master_sink_payload_req_id <= pcie_wishbone_master_source_payload_req_id;
    if (pcie_wishbone_master_update_dat) begin
        pcie_wishbone_master_sink_payload_dat <= pcie_wishbone_master_bus_dat_r;
    end
    litepciewishbonemaster_state <= litepciewishbonemaster_next_state;
    wishbone2axilite_state <= wishbone2axilite_next_state;
    if (cmd_done_wishbone2axilite_next_value_ce0) begin
        cmd_done <= cmd_done_wishbone2axilite_next_value0;
    end
    if (data_done_wishbone2axilite_next_value_ce1) begin
        data_done <= data_done_wishbone2axilite_next_value1;
    end
    pcie_msi_vector <= (pcie_msi_enable & ((pcie_msi_vector & (~pcie_msi_clear)) | pcie_msi_irqs));
    litepciemsix_state <= litepciemsix_next_state;
    if (pcie_msi_msix_clear_on_ready_litepciemsix_next_value_ce) begin
        pcie_msi_msix_clear_on_ready <= pcie_msi_msix_clear_on_ready_litepciemsix_next_value;
    end
    pcie_ptm_sniffer_cdc_cdc_graycounter1_q_binary <= pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next_binary;
    pcie_ptm_sniffer_cdc_cdc_graycounter1_q <= pcie_ptm_sniffer_cdc_cdc_graycounter1_q_next;
    ptmcapabilities_state <= ptmcapabilities_next_state;
    if (ptm_capabilities_dat_ptmcapabilities_next_value_ce) begin
        ptm_capabilities_dat <= ptm_capabilities_dat_ptmcapabilities_next_value;
    end
    if (ptm_requester_source_source_valid) begin
        ptm_requester_time1 <= ptm_requester_source_source_payload_time;
    end
    ptm_requester_cdc_graycounter1_q_binary <= ptm_requester_cdc_graycounter1_q_next_binary;
    ptm_requester_cdc_graycounter1_q <= ptm_requester_cdc_graycounter1_q_next;
    if (ptm_requester_wait) begin
        if ((~ptm_requester_done)) begin
            ptm_requester_count <= (ptm_requester_count - 1'd1);
        end
    end else begin
        ptm_requester_count <= 7'd125;
    end
    ptmrequester_state <= ptmrequester_next_state;
    if (ptm_requester_t1_ptmrequester_next_value_ce0) begin
        ptm_requester_t1 <= ptm_requester_t1_ptmrequester_next_value0;
    end
    if (ptm_requester_update_ptmrequester_next_value_ce1) begin
        ptm_requester_update <= ptm_requester_update_ptmrequester_next_value1;
    end
    if (ptm_requester_master_time_ptmrequester_next_value_ce2) begin
        ptm_requester_master_time <= ptm_requester_master_time_ptmrequester_next_value2;
    end
    if (ptm_requester_link_delay_ptmrequester_next_value_ce3) begin
        ptm_requester_link_delay <= ptm_requester_link_delay_ptmrequester_next_value3;
    end
    if (ptm_requester_t4_ptmrequester_next_value_ce4) begin
        ptm_requester_t4 <= ptm_requester_t4_ptmrequester_next_value4;
    end
    if (ptm_requester_reset) begin
        ptm_requester_update <= 1'd0;
        ptm_requester_master_time <= 64'd0;
        ptm_requester_link_delay <= 32'd0;
        ptm_requester_t1 <= 64'd0;
        ptm_requester_t4 <= 64'd0;
        ptmrequester_state <= 3'd0;
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_reset0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
            end
            2'd2: begin
                interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csrbank0_reset0_re) begin
        reset_storage <= csrbank0_reset0_r;
    end
    reset_re <= csrbank0_reset0_re;
    if (csrbank0_scratch0_re) begin
        scratch_storage <= csrbank0_scratch0_r;
    end
    scratch_re <= csrbank0_scratch0_re;
    bus_errors_re <= csrbank0_bus_errors_re;
    sram0_sel_r <= sram0_sel;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_phy_link_status_w;
            end
            1'd1: begin
                interface1_bank_bus_dat_r <= csrbank1_phy_msi_enable_w;
            end
            2'd2: begin
                interface1_bank_bus_dat_r <= csrbank1_phy_msix_enable_w;
            end
            2'd3: begin
                interface1_bank_bus_dat_r <= csrbank1_phy_bus_master_enable_w;
            end
            3'd4: begin
                interface1_bank_bus_dat_r <= csrbank1_phy_max_request_size_w;
            end
            3'd5: begin
                interface1_bank_bus_dat_r <= csrbank1_phy_max_payload_size_w;
            end
        endcase
    end
    s7pciephy_link_status_re <= csrbank1_phy_link_status_re;
    s7pciephy_msi_enable_re <= csrbank1_phy_msi_enable_re;
    s7pciephy_msix_enable_re <= csrbank1_phy_msix_enable_re;
    s7pciephy_bus_master_enable_re <= csrbank1_phy_bus_master_enable_re;
    s7pciephy_max_request_size_re <= csrbank1_phy_max_request_size_re;
    s7pciephy_max_payload_size_re <= csrbank1_phy_max_payload_size_re;
    sram1_sel_r <= sram1_sel;
    sram1_word_index <= interface1_sram_bus_adr[1:0];
    if (((sram1_sel & interface1_sram_bus_we) & (interface1_sram_bus_adr[1:0] == 1'd0))) begin
        sram1_wreg0 <= interface1_sram_bus_dat_w;
    end
    if (((sram1_sel & interface1_sram_bus_we) & (interface1_sram_bus_adr[1:0] == 1'd1))) begin
        sram1_wreg1 <= interface1_sram_bus_dat_w;
    end
    if (((sram1_sel & interface1_sram_bus_we) & (interface1_sram_bus_adr[1:0] == 2'd2))) begin
        sram1_wreg2 <= interface1_sram_bus_dat_w;
    end
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_enable1_w;
            end
            1'd1: begin
                interface2_bank_bus_dat_r <= csrbank2_enable0_w;
            end
            2'd2: begin
                interface2_bank_bus_dat_r <= csrbank2_pba1_w;
            end
            2'd3: begin
                interface2_bank_bus_dat_r <= csrbank2_pba0_w;
            end
        endcase
    end
    if (csrbank2_enable1_re) begin
        pcie_msi_enable_storage[63:32] <= csrbank2_enable1_r;
    end
    if (csrbank2_enable0_re) begin
        pcie_msi_enable_storage[31:0] <= csrbank2_enable0_r;
    end
    pcie_msi_enable_re <= csrbank2_enable0_re;
    pcie_msi_pba_re <= csrbank2_pba0_re;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank1_phy_link_status_w;
            end
            1'd1: begin
                interface3_bank_bus_dat_r <= csrbank1_phy_msi_enable_w;
            end
            2'd2: begin
                interface3_bank_bus_dat_r <= csrbank1_phy_msix_enable_w;
            end
            2'd3: begin
                interface3_bank_bus_dat_r <= csrbank1_phy_bus_master_enable_w;
            end
            3'd4: begin
                interface3_bank_bus_dat_r <= csrbank1_phy_max_request_size_w;
            end
            3'd5: begin
                interface3_bank_bus_dat_r <= csrbank1_phy_max_payload_size_w;
            end
        endcase
    end
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= csrbank4_control0_w;
            end
            1'd1: begin
                interface4_bank_bus_dat_r <= csrbank4_status_w;
            end
            2'd2: begin
                interface4_bank_bus_dat_r <= csrbank4_phy_tx_delay_w;
            end
            2'd3: begin
                interface4_bank_bus_dat_r <= csrbank4_phy_rx_delay_w;
            end
            3'd4: begin
                interface4_bank_bus_dat_r <= csrbank4_master_time1_w;
            end
            3'd5: begin
                interface4_bank_bus_dat_r <= csrbank4_master_time0_w;
            end
            3'd6: begin
                interface4_bank_bus_dat_r <= csrbank4_link_delay_w;
            end
            3'd7: begin
                interface4_bank_bus_dat_r <= csrbank4_t1_time1_w;
            end
            4'd8: begin
                interface4_bank_bus_dat_r <= csrbank4_t1_time0_w;
            end
            4'd9: begin
                interface4_bank_bus_dat_r <= csrbank4_t4_time1_w;
            end
            4'd10: begin
                interface4_bank_bus_dat_r <= csrbank4_t4_time0_w;
            end
        endcase
    end
    if (csrbank4_control0_re) begin
        ptm_requester_control_storage <= csrbank4_control0_r;
    end
    ptm_requester_control_re <= csrbank4_control0_re;
    ptm_requester_status_re <= csrbank4_status_re;
    ptm_requester_phy_tx_delay_re <= csrbank4_phy_tx_delay_re;
    ptm_requester_phy_rx_delay_re <= csrbank4_phy_rx_delay_re;
    ptm_requester_master_time_re <= csrbank4_master_time0_re;
    ptm_requester_link_delay_re <= csrbank4_link_delay_re;
    ptm_requester_t1_time_re <= csrbank4_t1_time0_re;
    ptm_requester_t4_time_re <= csrbank4_t4_time0_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        s7pciephy_link_status_re <= 1'd0;
        s7pciephy_msi_enable_re <= 1'd0;
        s7pciephy_msix_enable_re <= 1'd0;
        s7pciephy_bus_master_enable_re <= 1'd0;
        s7pciephy_max_request_size_re <= 1'd0;
        s7pciephy_max_payload_size_re <= 1'd0;
        s7pciephy_tx_datapath_pipe_valid_source_valid <= 1'd0;
        s7pciephy_tx_datapath_pipe_valid_source_payload_dat <= 64'd0;
        s7pciephy_tx_datapath_pipe_valid_source_payload_be <= 8'd0;
        s7pciephy_rx_datapath_pipe_valid_source_valid <= 1'd0;
        s7pciephy_rx_datapath_pipe_valid_source_payload_dat <= 64'd0;
        s7pciephy_rx_datapath_pipe_valid_source_payload_be <= 8'd0;
        depacketizer_header_extracter_source_payload_header <= 128'd0;
        depacketizer_header_extracter_first <= 1'd0;
        depacketizer_header_extracter_last <= 1'd0;
        depacketizer_header_extracter_count <= 1'd0;
        depacketizer_dispatcher_first <= 1'd1;
        depacketizer_dispatcher_ongoing1 <= 1'd0;
        depacketizer_dispatcher_sel_ongoing <= 3'd0;
        packetizer_grant <= 2'd0;
        packetizer_status0_first <= 1'd1;
        packetizer_status0_ongoing1 <= 1'd0;
        packetizer_status1_first <= 1'd1;
        packetizer_status1_ongoing1 <= 1'd0;
        packetizer_status2_first <= 1'd1;
        packetizer_status2_ongoing1 <= 1'd0;
        packetizer_tlp_raw_buf_pipe_valid_source_valid <= 1'd0;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_fmt <= 2'd0;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_header <= 128'd0;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_dat <= 64'd0;
        packetizer_tlp_raw_buf_pipe_valid_source_payload_be <= 8'd0;
        packetizer_header_inserter_header_inserter_3dws_count <= 1'd0;
        packetizer_header_inserter_header_inserter_4dws_count <= 1'd0;
        pcie_wishbone_master_sink_payload_req_id <= 16'd0;
        pcie_wishbone_master_sink_payload_cmp_id <= 16'd0;
        pcie_wishbone_master_sink_payload_adr <= 32'd0;
        pcie_wishbone_master_sink_payload_len <= 10'd0;
        pcie_wishbone_master_sink_payload_err <= 1'd0;
        pcie_wishbone_master_sink_payload_tag <= 8'd0;
        pcie_wishbone_master_sink_payload_dat <= 64'd0;
        cmd_done <= 1'd0;
        data_done <= 1'd0;
        pcie_msi_enable_storage <= 64'd0;
        pcie_msi_enable_re <= 1'd0;
        pcie_msi_pba_re <= 1'd0;
        pcie_msi_vector <= 64'd0;
        pcie_msi_msix_clear_on_ready <= 64'd0;
        pcie_ptm_sniffer_cdc_cdc_graycounter1_q <= 3'd0;
        pcie_ptm_sniffer_cdc_cdc_graycounter1_q_binary <= 3'd0;
        ptm_capabilities_dat <= 32'd0;
        ptm_requester_update <= 1'd0;
        ptm_requester_master_time <= 64'd0;
        ptm_requester_link_delay <= 32'd0;
        ptm_requester_t1 <= 64'd0;
        ptm_requester_t4 <= 64'd0;
        ptm_requester_control_storage <= 2'd0;
        ptm_requester_control_re <= 1'd0;
        ptm_requester_status_re <= 1'd0;
        ptm_requester_phy_tx_delay_re <= 1'd0;
        ptm_requester_phy_rx_delay_re <= 1'd0;
        ptm_requester_master_time_re <= 1'd0;
        ptm_requester_link_delay_re <= 1'd0;
        ptm_requester_t1_time_re <= 1'd0;
        ptm_requester_t4_time_re <= 1'd0;
        ptm_requester_cdc_graycounter1_q <= 3'd0;
        ptm_requester_cdc_graycounter1_q_binary <= 3'd0;
        ptm_requester_time1 <= 64'd0;
        ptm_requester_count <= 7'd125;
        slave_sel_r <= 2'd0;
        count <= 20'd1000000;
        sram0_sel_r <= 1'd0;
        sram1_sel_r <= 1'd0;
        litepcieendpoint_state <= 2'd0;
        litepcieendpoint_litepcietlpheaderinserter64b3dws_state <= 1'd0;
        litepcieendpoint_litepcietlpheaderinserter64b4dws_state <= 1'd0;
        litepcieendpoint_s_dispatcher_first <= 1'd1;
        litepcieendpoint_s_dispatcher_ongoing1 <= 1'd0;
        litepcieendpoint_s_dispatcher_sel_ongoing <= 2'd0;
        litepcieendpoint_grant <= 1'd0;
        litepcieendpoint_status0_first <= 1'd1;
        litepcieendpoint_status0_ongoing1 <= 1'd0;
        litepcieendpoint_status1_first <= 1'd1;
        litepcieendpoint_status1_ongoing1 <= 1'd0;
        litepcieendpoint_tag_queue_readable <= 1'd0;
        litepcieendpoint_tag_queue_level0 <= 4'd0;
        litepcieendpoint_tag_queue_produce <= 3'd0;
        litepcieendpoint_tag_queue_consume <= 3'd0;
        litepcieendpoint_req_queue_readable <= 1'd0;
        litepcieendpoint_req_queue_level0 <= 4'd0;
        litepcieendpoint_req_queue_produce <= 3'd0;
        litepcieendpoint_req_queue_consume <= 3'd0;
        litepcieendpoint_syncfifo0_readable <= 1'd0;
        litepcieendpoint_syncfifo0_level0 <= 9'd0;
        litepcieendpoint_syncfifo0_produce <= 8'd0;
        litepcieendpoint_syncfifo0_consume <= 8'd0;
        litepcieendpoint_syncfifo1_readable <= 1'd0;
        litepcieendpoint_syncfifo1_level0 <= 9'd0;
        litepcieendpoint_syncfifo1_produce <= 8'd0;
        litepcieendpoint_syncfifo1_consume <= 8'd0;
        litepcieendpoint_syncfifo2_readable <= 1'd0;
        litepcieendpoint_syncfifo2_level0 <= 9'd0;
        litepcieendpoint_syncfifo2_produce <= 8'd0;
        litepcieendpoint_syncfifo2_consume <= 8'd0;
        litepcieendpoint_syncfifo3_readable <= 1'd0;
        litepcieendpoint_syncfifo3_level0 <= 9'd0;
        litepcieendpoint_syncfifo3_produce <= 8'd0;
        litepcieendpoint_syncfifo3_consume <= 8'd0;
        litepcieendpoint_syncfifo4_readable <= 1'd0;
        litepcieendpoint_syncfifo4_level0 <= 9'd0;
        litepcieendpoint_syncfifo4_produce <= 8'd0;
        litepcieendpoint_syncfifo4_consume <= 8'd0;
        litepcieendpoint_syncfifo5_readable <= 1'd0;
        litepcieendpoint_syncfifo5_level0 <= 9'd0;
        litepcieendpoint_syncfifo5_produce <= 8'd0;
        litepcieendpoint_syncfifo5_consume <= 8'd0;
        litepcieendpoint_syncfifo6_readable <= 1'd0;
        litepcieendpoint_syncfifo6_level0 <= 9'd0;
        litepcieendpoint_syncfifo6_produce <= 8'd0;
        litepcieendpoint_syncfifo6_consume <= 8'd0;
        litepcieendpoint_syncfifo7_readable <= 1'd0;
        litepcieendpoint_syncfifo7_level0 <= 9'd0;
        litepcieendpoint_syncfifo7_produce <= 8'd0;
        litepcieendpoint_syncfifo7_consume <= 8'd0;
        litepcieendpoint_fill_tag <= 3'd0;
        litepcieendpoint_m_dispatcher_first <= 1'd1;
        litepcieendpoint_m_dispatcher_ongoing1 <= 1'd0;
        litepcieendpoint_m_dispatcher_sel_ongoing <= 1'd0;
        litepcieendpoint_fsm0_state <= 2'd0;
        litepcieendpoint_fsm1_state <= 2'd0;
        litepciewishbonemaster_state <= 2'd0;
        wishbone2axilite_state <= 2'd0;
        litepciemsix_state <= 1'd0;
        ptmcapabilities_state <= 2'd0;
        ptmrequester_state <= 3'd0;
        wishbone2csr_state <= 1'd0;
    end
    xilinxmultiregimpl70 <= s7pciephy_sig0;
    xilinxmultiregimpl71 <= xilinxmultiregimpl70;
    xilinxmultiregimpl80 <= s7pciephy_sig1;
    xilinxmultiregimpl81 <= xilinxmultiregimpl80;
    xilinxmultiregimpl90 <= s7pciephy_sig2;
    xilinxmultiregimpl91 <= xilinxmultiregimpl90;
    xilinxmultiregimpl100 <= s7pciephy_sig3;
    xilinxmultiregimpl101 <= xilinxmultiregimpl100;
    xilinxmultiregimpl110 <= s7pciephy_sig4;
    xilinxmultiregimpl111 <= xilinxmultiregimpl110;
    xilinxmultiregimpl120 <= s7pciephy_sig5;
    xilinxmultiregimpl121 <= xilinxmultiregimpl120;
    xilinxmultiregimpl130 <= s7pciephy_sig6;
    xilinxmultiregimpl131 <= xilinxmultiregimpl130;
    xilinxmultiregimpl140 <= s7pciephy_sig7;
    xilinxmultiregimpl141 <= xilinxmultiregimpl140;
    xilinxmultiregimpl150 <= s7pciephy_sig8;
    xilinxmultiregimpl151 <= xilinxmultiregimpl150;
    xilinxmultiregimpl160 <= s7pciephy_sig9;
    xilinxmultiregimpl161 <= xilinxmultiregimpl160;
    xilinxmultiregimpl170 <= s7pciephy_sig10;
    xilinxmultiregimpl171 <= xilinxmultiregimpl170;
    xilinxmultiregimpl200 <= pcie_ptm_sniffer_cdc_cdc_graycounter0_q;
    xilinxmultiregimpl201 <= xilinxmultiregimpl200;
    xilinxmultiregimpl220 <= ptm_requester_cdc_graycounter0_q;
    xilinxmultiregimpl221 <= xilinxmultiregimpl220;
end

always @(posedge time_clk) begin
    ptm_requester_cdc_graycounter0_q_binary <= ptm_requester_cdc_graycounter0_q_next_binary;
    ptm_requester_cdc_graycounter0_q <= ptm_requester_cdc_graycounter0_q_next;
    if (time_rst) begin
        ptm_requester_cdc_graycounter0_q <= 3'd0;
        ptm_requester_cdc_graycounter0_q_binary <= 3'd0;
    end
    xilinxmultiregimpl230 <= ptm_requester_cdc_graycounter1_q;
    xilinxmultiregimpl231 <= xilinxmultiregimpl230;
end

always @(posedge to216_clk) begin
    s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_binary <= s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next_binary;
    s7pciephy_tx_datapath_cdc_cdc_graycounter1_q <= s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_next;
    if (to216_rst) begin
        s7pciephy_tx_datapath_cdc_cdc_graycounter1_q <= 5'd0;
        s7pciephy_tx_datapath_cdc_cdc_graycounter1_q_binary <= 5'd0;
    end
    xilinxmultiregimpl00 <= s7pciephy_tx_datapath_cdc_cdc_graycounter0_q;
    xilinxmultiregimpl01 <= xilinxmultiregimpl00;
end

always @(posedge to617_clk) begin
    s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_binary <= s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next_binary;
    s7pciephy_rx_datapath_cdc_cdc_graycounter1_q <= s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_next;
    if (to617_rst) begin
        s7pciephy_rx_datapath_cdc_cdc_graycounter1_q <= 5'd0;
        s7pciephy_rx_datapath_cdc_cdc_graycounter1_q_binary <= 5'd0;
    end
    xilinxmultiregimpl20 <= s7pciephy_rx_datapath_cdc_cdc_graycounter0_q;
    xilinxmultiregimpl21 <= xilinxmultiregimpl20;
end

always @(posedge to808_clk) begin
    s7pciephy_msi_cdc_cdc_graycounter1_q_binary <= s7pciephy_msi_cdc_cdc_graycounter1_q_next_binary;
    s7pciephy_msi_cdc_cdc_graycounter1_q <= s7pciephy_msi_cdc_cdc_graycounter1_q_next;
    if (to808_rst) begin
        s7pciephy_msi_cdc_cdc_graycounter1_q <= 3'd0;
        s7pciephy_msi_cdc_cdc_graycounter1_q_binary <= 3'd0;
    end
    xilinxmultiregimpl40 <= s7pciephy_msi_cdc_cdc_graycounter0_q;
    xilinxmultiregimpl41 <= xilinxmultiregimpl40;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 45-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:44];
initial begin
	$readmemh("litepcie_core_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= sram0_adr;
end
assign sram0_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Instance IBUFDS_GTE2 of IBUFDS_GTE2 Module.
//------------------------------------------------------------------------------
IBUFDS_GTE2 IBUFDS_GTE2(
	// Inputs.
	.CEB (1'd0),
	.I   (pcie_clk_p),
	.IB  (pcie_clk_n),

	// Outputs.
	.O   (s7pciephy_pcie_refclk)
);

//------------------------------------------------------------------------------
// Memory storage: 16-words x 74-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 74 
// Port 1 | Read: Sync  | Write: ---- | 
reg [73:0] storage[0:15];
reg [73:0] storage_dat0;
reg [73:0] storage_dat1;
always @(posedge from216_clk) begin
	if (s7pciephy_tx_datapath_cdc_cdc_wrport_we)
		storage[s7pciephy_tx_datapath_cdc_cdc_wrport_adr] <= s7pciephy_tx_datapath_cdc_cdc_wrport_dat_w;
	storage_dat0 <= storage[s7pciephy_tx_datapath_cdc_cdc_wrport_adr];
end
always @(posedge to216_clk) begin
	storage_dat1 <= storage[s7pciephy_tx_datapath_cdc_cdc_rdport_adr];
end
assign s7pciephy_tx_datapath_cdc_cdc_wrport_dat_r = storage_dat0;
assign s7pciephy_tx_datapath_cdc_cdc_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 74-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 74 
// Port 1 | Read: Sync  | Write: ---- | 
reg [73:0] storage_1[0:15];
reg [73:0] storage_1_dat0;
reg [73:0] storage_1_dat1;
always @(posedge from617_clk) begin
	if (s7pciephy_rx_datapath_cdc_cdc_wrport_we)
		storage_1[s7pciephy_rx_datapath_cdc_cdc_wrport_adr] <= s7pciephy_rx_datapath_cdc_cdc_wrport_dat_w;
	storage_1_dat0 <= storage_1[s7pciephy_rx_datapath_cdc_cdc_wrport_adr];
end
always @(posedge to617_clk) begin
	storage_1_dat1 <= storage_1[s7pciephy_rx_datapath_cdc_cdc_rdport_adr];
end
assign s7pciephy_rx_datapath_cdc_cdc_wrport_dat_r = storage_1_dat0;
assign s7pciephy_rx_datapath_cdc_cdc_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:3];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge from808_clk) begin
	if (s7pciephy_msi_cdc_cdc_wrport_we)
		storage_2[s7pciephy_msi_cdc_cdc_wrport_adr] <= s7pciephy_msi_cdc_cdc_wrport_dat_w;
	storage_2_dat0 <= storage_2[s7pciephy_msi_cdc_cdc_wrport_adr];
end
always @(posedge to808_clk) begin
	storage_2_dat1 <= storage_2[s7pciephy_msi_cdc_cdc_rdport_adr];
end
assign s7pciephy_msi_cdc_cdc_wrport_dat_r = storage_2_dat0;
assign s7pciephy_msi_cdc_cdc_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Instance BUFG of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG(
	// Inputs.
	.I (s7pciephy_pipe_txoutclk),

	// Outputs.
	.O (s7pciephy_pipe_txoutclk_bufg)
);

//------------------------------------------------------------------------------
// Instance BUFG_1 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_1(
	// Inputs.
	.I (s7pciephy_clkout0),

	// Outputs.
	.O (s7pciephy_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_2 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_2(
	// Inputs.
	.I (s7pciephy_clkout1),

	// Outputs.
	.O (s7pciephy_clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance BUFG_3 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_3(
	// Inputs.
	.I (s7pciephy_clkout2),

	// Outputs.
	.O (s7pciephy_clkout_buf2)
);

//------------------------------------------------------------------------------
// Instance BUFG_4 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_4(
	// Inputs.
	.I (s7pciephy_clkout3),

	// Outputs.
	.O (s7pciephy_clkout_buf3)
);

//------------------------------------------------------------------------------
// Instance BUFGCTRL of BUFGCTRL Module.
//------------------------------------------------------------------------------
BUFGCTRL BUFGCTRL(
	// Inputs.
	.CE0 (1'd1),
	.CE1 (1'd1),
	.I0  (clk125_clk),
	.I1  (clk250_clk),
	.S0  ((s7pciephy_pclk_sel == 1'd0)),
	.S1  ((s7pciephy_pclk_sel == 1'd1)),

	// Outputs.
	.O   (pclk_clk)
);

//------------------------------------------------------------------------------
// Memory table_1: 64-words x 128-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 128 
reg [127:0] table_1[0:63];
initial begin
	$readmemh("litepcie_core_table_1.init", table_1);
end
reg [5:0] table_1_adr0;
reg [5:0] table_1_adr1;
always @(posedge sys_clk) begin
	if (pcie_msi_table_port_re)
		table_1_adr0 <= pcie_msi_table_port_adr;
end
always @(posedge sys_clk) begin
	if (sram1_we)
		table_1[sram1_adr] <= sram1_dat_w;
	table_1_adr1 <= sram1_adr;
end
assign pcie_msi_table_port_dat_r = table_1[table_1_adr0];
assign sram1_dat_r = table_1[table_1_adr1];


//------------------------------------------------------------------------------
// Instance sniffer_tap of sniffer_tap Module.
//------------------------------------------------------------------------------
sniffer_tap sniffer_tap(
	// Inputs.
	.clk_in      (pclk_clk),
	.rst_n_in    (1'd1),
	.rx_ctl_in   (rx_ctl),
	.rx_data_in  (rx_data),

	// Outputs.
	.clk_out     (sniffer_clk),
	.rst_n_out   (sniffer_rst_n),
	.rx_ctl_out  (sniffer_rx_ctl),
	.rx_data_out (sniffer_rx_data)
);

//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 38-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 38 
// Port 1 | Read: Sync  | Write: ---- | 
reg [37:0] storage_3[0:7];
reg [2:0] storage_3_adr0;
reg [2:0] storage_3_adr1;
always @(posedge sniffer_clk_1) begin
	if (pcie_ptm_sniffer_rawdatapath_cdc_wrport_we)
		storage_3[pcie_ptm_sniffer_rawdatapath_cdc_wrport_adr] <= pcie_ptm_sniffer_rawdatapath_cdc_wrport_dat_w;
	storage_3_adr0 <= pcie_ptm_sniffer_rawdatapath_cdc_wrport_adr;
end
always @(posedge sniffer_clk_1) begin
	storage_3_adr1 <= pcie_ptm_sniffer_rawdatapath_cdc_rdport_adr;
end
assign pcie_ptm_sniffer_rawdatapath_cdc_wrport_dat_r = storage_3[storage_3_adr0];
assign pcie_ptm_sniffer_rawdatapath_cdc_rdport_dat_r = storage_3[storage_3_adr1];


//------------------------------------------------------------------------------
// Memory storage_4: 4-words x 38-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 38 
// Port 1 | Read: Sync  | Write: ---- | 
reg [37:0] storage_4[0:3];
reg [37:0] storage_4_dat0;
reg [37:0] storage_4_dat1;
always @(posedge sniffer_clk_1) begin
	if (pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_we)
		storage_4[pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_adr] <= pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_dat_w;
	storage_4_dat0 <= storage_4[pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_adr];
end
always @(posedge sniffer_clk_1) begin
	if (pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_re)
		storage_4_dat1 <= storage_4[pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_adr];
end
assign pcie_ptm_sniffer_tlpfilterformater_fifo_wrport_dat_r = storage_4_dat0;
assign pcie_ptm_sniffer_tlpfilterformater_fifo_rdport_dat_r = storage_4_dat1;


//------------------------------------------------------------------------------
// Memory storage_5: 4-words x 106-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 106 
// Port 1 | Read: Sync  | Write: ---- | 
reg [105:0] storage_5[0:3];
reg [105:0] storage_5_dat0;
reg [105:0] storage_5_dat1;
always @(posedge sniffer_clk_1) begin
	if (pcie_ptm_sniffer_cdc_cdc_wrport_we)
		storage_5[pcie_ptm_sniffer_cdc_cdc_wrport_adr] <= pcie_ptm_sniffer_cdc_cdc_wrport_dat_w;
	storage_5_dat0 <= storage_5[pcie_ptm_sniffer_cdc_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_5_dat1 <= storage_5[pcie_ptm_sniffer_cdc_cdc_rdport_adr];
end
assign pcie_ptm_sniffer_cdc_cdc_wrport_dat_r = storage_5_dat0;
assign pcie_ptm_sniffer_cdc_cdc_rdport_dat_r = storage_5_dat1;


//------------------------------------------------------------------------------
// Memory mem_1: 3-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
// Port 1 | Read: Async | Write: ---- | 
// Port 2 | Read: Async | Write: ---- | 
reg [31:0] mem_1[0:2];
initial begin
	$readmemh("litepcie_core_mem_1.init", mem_1);
end
reg [1:0] mem_1_adr0;
always @(posedge sys_clk) begin
	if (ptm_capabilities_mem_wr_port_we)
		mem_1[ptm_capabilities_mem_wr_port_adr] <= ptm_capabilities_mem_wr_port_dat_w;
	mem_1_adr0 <= ptm_capabilities_mem_wr_port_adr;
end
always @(posedge sys_clk) begin
end
always @(posedge sys_clk) begin
end
assign ptm_capabilities_mem_wr_port_dat_r = mem_1[mem_1_adr0];
assign ptm_capabilities_mem_rd_port_dat_r = mem_1[ptm_capabilities_mem_rd_port_adr];
assign ptm_capabilities_mem_ctrl_port_dat_r = mem_1[ptm_capabilities_mem_ctrl_port_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 4-words x 66-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 66 
// Port 1 | Read: Sync  | Write: ---- | 
reg [65:0] storage_6[0:3];
reg [65:0] storage_6_dat0;
reg [65:0] storage_6_dat1;
always @(posedge time_clk) begin
	if (ptm_requester_cdc_wrport_we)
		storage_6[ptm_requester_cdc_wrport_adr] <= ptm_requester_cdc_wrport_dat_w;
	storage_6_dat0 <= storage_6[ptm_requester_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_6_dat1 <= storage_6[ptm_requester_cdc_rdport_adr];
end
assign ptm_requester_cdc_wrport_dat_r = storage_6_dat0;
assign ptm_requester_cdc_rdport_dat_r = storage_6_dat1;


//------------------------------------------------------------------------------
// Instance FDCE of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (s7pciephy_reset),

	// Outputs.
	.Q   (reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_1 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_1(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset0),

	// Outputs.
	.Q   (reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_2 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_2(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset1),

	// Outputs.
	.Q   (reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_3 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_3(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset2),

	// Outputs.
	.Q   (reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_4 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_4(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset3),

	// Outputs.
	.Q   (reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_5 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_5(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset4),

	// Outputs.
	.Q   (reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_6 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_6(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset5),

	// Outputs.
	.Q   (reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_7 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_7(
	// Inputs.
	.C   (s7pciephy_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset6),

	// Outputs.
	.Q   (reset7)
);

//------------------------------------------------------------------------------
// Instance MMCME2_ADV of MMCME2_ADV Module.
//------------------------------------------------------------------------------
MMCME2_ADV #(
	// Parameters.
	.BANDWIDTH        ("OPTIMIZED"),
	.CLKFBOUT_MULT_F  (4'd10),
	.CLKIN1_PERIOD    (10.0),
	.CLKOUT0_DIVIDE_F (4'd8),
	.CLKOUT0_PHASE    (1'd0),
	.CLKOUT1_DIVIDE   (3'd4),
	.CLKOUT1_PHASE    (1'd0),
	.CLKOUT2_DIVIDE   (4'd8),
	.CLKOUT2_PHASE    (1'd0),
	.CLKOUT3_DIVIDE   (4'd8),
	.CLKOUT3_PHASE    (1'd0),
	.DIVCLK_DIVIDE    (1'd1),
	.REF_JITTER1      (0.01)
) MMCME2_ADV (
	// Inputs.
	.CLKFBIN  (mmcm_fb),
	.CLKIN1   (s7pciephy_clkin),
	.PWRDWN   (s7pciephy_power_down),
	.RST      (reset7),

	// Outputs.
	.CLKFBOUT (mmcm_fb),
	.CLKOUT0  (s7pciephy_clkout0),
	.CLKOUT1  (s7pciephy_clkout1),
	.CLKOUT2  (s7pciephy_clkout2),
	.CLKOUT3  (s7pciephy_clkout3),
	.LOCKED   (s7pciephy_locked)
);

//------------------------------------------------------------------------------
// Instance pcie_s7 of pcie_s7 Module.
//------------------------------------------------------------------------------
pcie_s7 pcie_s7(
	// Inputs.
	.cfg_aer_interrupt_msgnum                   (1'd0),
	.cfg_ds_bus_number                          (1'd0),
	.cfg_ds_device_number                       (1'd0),
	.cfg_ds_function_number                     (1'd0),
	.cfg_dsn                                    (1'd0),
	.cfg_err_acs                                (1'd0),
	.cfg_err_aer_headerlog                      (1'd0),
	.cfg_err_atomic_egress_blocked              (1'd0),
	.cfg_err_cor                                (1'd0),
	.cfg_err_cpl_abort                          (1'd0),
	.cfg_err_cpl_timeout                        (1'd0),
	.cfg_err_cpl_unexpect                       (1'd0),
	.cfg_err_ecrc                               (1'd0),
	.cfg_err_internal_cor                       (1'd0),
	.cfg_err_internal_uncor                     (1'd0),
	.cfg_err_locked                             (1'd0),
	.cfg_err_malformed                          (1'd0),
	.cfg_err_mc_blocked                         (1'd0),
	.cfg_err_norecovery                         (1'd0),
	.cfg_err_poisoned                           (1'd0),
	.cfg_err_posted                             (1'd0),
	.cfg_err_tlp_cpl_header                     (1'd0),
	.cfg_err_ur                                 (1'd0),
	.cfg_interrupt                              (s7pciephy_msi_cdc_source_source_valid),
	.cfg_interrupt_assert                       (1'd0),
	.cfg_interrupt_di                           (s7pciephy_msi_cdc_source_source_payload_dat),
	.cfg_interrupt_stat                         (1'd0),
	.cfg_mgmt_byte_en                           (1'd0),
	.cfg_mgmt_di                                (1'd0),
	.cfg_mgmt_dwaddr                            (1'd0),
	.cfg_mgmt_rd_en                             (1'd0),
	.cfg_mgmt_wr_en                             (1'd0),
	.cfg_mgmt_wr_readonly                       (1'd0),
	.cfg_mgmt_wr_rw1c_as_rw                     (1'd0),
	.cfg_pciecap_interrupt_msgnum               (1'd0),
	.cfg_pm_force_state                         (1'd0),
	.cfg_pm_force_state_en                      (1'd0),
	.cfg_pm_halt_aspm_l0s                       (1'd0),
	.cfg_pm_halt_aspm_l1                        (1'd0),
	.cfg_pm_send_pme_to                         (1'd0),
	.cfg_pm_wake                                (1'd0),
	.cfg_trn_pending                            (1'd0),
	.cfg_turnoff_ok                             (1'd0),
	.fc_sel                                     (1'd0),
	.m_axis_rx_tready                           (s7pciephy_rx_datapath_sink_sink_ready),
	.pci_exp_rxn                                (pcie_rx_n),
	.pci_exp_rxp                                (pcie_rx_p),
	.pcie_drp_addr                              (1'd0),
	.pcie_drp_clk                               (1'd1),
	.pcie_drp_di                                (1'd0),
	.pcie_drp_en                                (1'd0),
	.pcie_drp_we                                (1'd0),
	.pipe_dclk_in                               (clk125_clk),
	.pipe_mmcm_lock_in                          (s7pciephy_locked),
	.pipe_mmcm_rst_n                            (1'd1),
	.pipe_oobclk_in                             (pclk_clk),
	.pipe_pclk_in                               (pclk_clk),
	.pipe_rxoutclk_in                           (1'd0),
	.pipe_rxusrclk_in                           (pclk_clk),
	.pipe_userclk1_in                           (userclk1_clk),
	.pipe_userclk2_in                           (userclk2_clk),
	.pl_directed_link_auton                     (1'd0),
	.pl_directed_link_change                    (1'd0),
	.pl_directed_link_speed                     (1'd0),
	.pl_directed_link_width                     (1'd0),
	.pl_downstream_deemph_source                (1'd0),
	.pl_transmit_hot_rst                        (1'd0),
	.pl_upstream_prefer_deemph                  (1'd1),
	.rx_np_ok                                   (1'd1),
	.rx_np_req                                  (1'd1),
	.s_axis_tx_tdata                            (s7pciephy_tx_datapath_source_source_payload_dat),
	.s_axis_tx_tkeep                            (s7pciephy_tx_datapath_source_source_payload_be),
	.s_axis_tx_tlast                            (s7pciephy_tx_datapath_source_source_last),
	.s_axis_tx_tuser                            (1'd0),
	.s_axis_tx_tvalid                           (s7pciephy_tx_datapath_source_source_valid),
	.sys_clk                                    (s7pciephy_pcie_refclk),
	.sys_rst_n                                  (s7pciephy_pcie_rst_n),
	.tx_cfg_gnt                                 (1'd1),

	// Outputs.
	.cfg_aer_ecrc_check_en                      (s7pciephy16),
	.cfg_aer_ecrc_gen_en                        (s7pciephy17),
	.cfg_aer_rooterr_corr_err_received          (s7pciephy41),
	.cfg_aer_rooterr_corr_err_reporting_en      (s7pciephy38),
	.cfg_aer_rooterr_fatal_err_received         (s7pciephy43),
	.cfg_aer_rooterr_fatal_err_reporting_en     (s7pciephy40),
	.cfg_aer_rooterr_non_fatal_err_received     (s7pciephy42),
	.cfg_aer_rooterr_non_fatal_err_reporting_en (s7pciephy39),
	.cfg_bridge_serr_en                         (s7pciephy32),
	.cfg_bus_number                             (s7pciephy_sig5),
	.cfg_command                                (s7pciephy_sig3),
	.cfg_dcommand                               (s7pciephy_sig4),
	.cfg_dcommand2                              (s7pciephy25),
	.cfg_device_number                          (s7pciephy_sig6),
	.cfg_dstatus                                (s7pciephy22),
	.cfg_err_aer_headerlog_set                  (s7pciephy15),
	.cfg_err_cpl_rdy                            (s7pciephy14),
	.cfg_function_number                        (s7pciephy_sig7),
	.cfg_interrupt_do                           (s7pciephy18),
	.cfg_interrupt_mmenable                     (s7pciephy19),
	.cfg_interrupt_msienable                    (s7pciephy_sig1),
	.cfg_interrupt_msixenable                   (s7pciephy_sig2),
	.cfg_interrupt_msixfm                       (s7pciephy20),
	.cfg_interrupt_rdy                          (s7pciephy_msi_cdc_source_source_ready),
	.cfg_lcommand                               (s7pciephy24),
	.cfg_lstatus                                (s7pciephy23),
	.cfg_mgmt_do                                (s7pciephy12),
	.cfg_mgmt_rd_wr_done                        (s7pciephy13),
	.cfg_msg_data                               (s7pciephy46),
	.cfg_msg_received                           (s7pciephy45),
	.cfg_msg_received_assert_int_a              (s7pciephy54),
	.cfg_msg_received_assert_int_b              (s7pciephy55),
	.cfg_msg_received_assert_int_c              (s7pciephy56),
	.cfg_msg_received_assert_int_d              (s7pciephy57),
	.cfg_msg_received_deassert_int_a            (s7pciephy58),
	.cfg_msg_received_deassert_int_b            (s7pciephy59),
	.cfg_msg_received_deassert_int_c            (s7pciephy60),
	.cfg_msg_received_deassert_int_d            (s7pciephy61),
	.cfg_msg_received_err_cor                   (s7pciephy49),
	.cfg_msg_received_err_fatal                 (s7pciephy51),
	.cfg_msg_received_err_non_fatal             (s7pciephy50),
	.cfg_msg_received_pm_as_nak                 (s7pciephy47),
	.cfg_msg_received_pm_pme                    (s7pciephy52),
	.cfg_msg_received_pme_to_ack                (s7pciephy53),
	.cfg_msg_received_setslotpowerlimit         (s7pciephy48),
	.cfg_pcie_link_state                        (s7pciephy26),
	.cfg_pmcsr_pme_en                           (s7pciephy28),
	.cfg_pmcsr_pme_status                       (s7pciephy30),
	.cfg_pmcsr_powerstate                       (s7pciephy29),
	.cfg_received_func_lvl_rst                  (s7pciephy31),
	.cfg_root_control_pme_int_en                (s7pciephy37),
	.cfg_root_control_syserr_corr_err_en        (s7pciephy34),
	.cfg_root_control_syserr_fatal_err_en       (s7pciephy36),
	.cfg_root_control_syserr_non_fatal_err_en   (s7pciephy35),
	.cfg_slot_control_electromech_il_ctl_pulse  (s7pciephy33),
	.cfg_status                                 (s7pciephy21),
	.cfg_to_turnoff                             (s7pciephy27),
	.cfg_vc_tcvc_map                            (s7pciephy44),
	.fc_cpld                                    (s7pciephy6),
	.fc_cplh                                    (s7pciephy7),
	.fc_npd                                     (s7pciephy8),
	.fc_nph                                     (s7pciephy9),
	.fc_pd                                      (s7pciephy10),
	.fc_ph                                      (s7pciephy11),
	.m_axis_rx_tdata                            (s7pciephy_rx_datapath_sink_sink_payload_dat),
	.m_axis_rx_tkeep                            (s7pciephy_rx_datapath_sink_sink_payload_be),
	.m_axis_rx_tlast                            (s7pciephy_m_axis_rx_tlast),
	.m_axis_rx_tuser                            (s7pciephy_m_axis_rx_tuser),
	.m_axis_rx_tvalid                           (s7pciephy_rx_datapath_sink_sink_valid),
	.pci_exp_txn                                (pcie_tx_n),
	.pci_exp_txp                                (pcie_tx_p),
	.pcie_drp_do                                (s7pciephy73),
	.pcie_drp_rdy                               (s7pciephy72),
	.pipe_gen3_out                              (s7pciephy1),
	.pipe_pclk_sel_out                          (s7pciephy_pipe_pclk_sel),
	.pipe_rxoutclk_out                          (s7pciephy0),
	.pipe_txoutclk_out                          (s7pciephy_pipe_txoutclk),
	.pl_directed_change_done                    (s7pciephy70),
	.pl_initial_link_width                      (s7pciephy69),
	.pl_lane_reversal_mode                      (s7pciephy62),
	.pl_link_gen2_cap                           (s7pciephy67),
	.pl_link_partner_gen2_supported             (s7pciephy68),
	.pl_link_upcfg_cap                          (s7pciephy66),
	.pl_ltssm_state                             (s7pciephy_sig10),
	.pl_phy_lnk_up                              (s7pciephy63),
	.pl_received_hot_rst                        (s7pciephy71),
	.pl_rx_pm_state                             (s7pciephy65),
	.pl_sel_lnk_rate                            (s7pciephy_sig8),
	.pl_sel_lnk_width                           (s7pciephy_sig9),
	.pl_tx_pm_state                             (s7pciephy64),
	.s_axis_tx_tready                           (s7pciephy_tx_datapath_source_source_ready),
	.tx_buf_av                                  (s7pciephy3),
	.tx_cfg_req                                 (s7pciephy5),
	.tx_err_drop                                (s7pciephy4),
	.user_app_rdy                               (s7pciephy2),
	.user_clk_out                               (pcie_clk),
	.user_lnk_up                                (s7pciephy_sig0),
	.user_reset_out                             (pcie_rst)
);

//------------------------------------------------------------------------------
// Memory storage_7: 8-words x 5-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 5 
// Port 1 | Read: Sync  | Write: ---- | 
reg [4:0] storage_7[0:7];
reg [4:0] storage_7_dat0;
reg [4:0] storage_7_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_tag_queue_wrport_we)
		storage_7[litepcieendpoint_tag_queue_wrport_adr] <= litepcieendpoint_tag_queue_wrport_dat_w;
	storage_7_dat0 <= storage_7[litepcieendpoint_tag_queue_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_tag_queue_rdport_re)
		storage_7_dat1 <= storage_7[litepcieendpoint_tag_queue_rdport_adr];
end
assign litepcieendpoint_tag_queue_wrport_dat_r = storage_7_dat0;
assign litepcieendpoint_tag_queue_rdport_dat_r = storage_7_dat1;


//------------------------------------------------------------------------------
// Memory storage_8: 8-words x 21-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 21 
// Port 1 | Read: Sync  | Write: ---- | 
reg [20:0] storage_8[0:7];
reg [20:0] storage_8_dat0;
reg [20:0] storage_8_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_req_queue_wrport_we)
		storage_8[litepcieendpoint_req_queue_wrport_adr] <= litepcieendpoint_req_queue_wrport_dat_w;
	storage_8_dat0 <= storage_8[litepcieendpoint_req_queue_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_req_queue_rdport_re)
		storage_8_dat1 <= storage_8[litepcieendpoint_req_queue_rdport_adr];
end
assign litepcieendpoint_req_queue_wrport_dat_r = storage_8_dat0;
assign litepcieendpoint_req_queue_rdport_dat_r = storage_8_dat1;


//------------------------------------------------------------------------------
// Memory storage_9: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_9[0:255];
reg [165:0] storage_9_dat0;
reg [165:0] storage_9_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo0_wrport_we)
		storage_9[litepcieendpoint_syncfifo0_wrport_adr] <= litepcieendpoint_syncfifo0_wrport_dat_w;
	storage_9_dat0 <= storage_9[litepcieendpoint_syncfifo0_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo0_rdport_re)
		storage_9_dat1 <= storage_9[litepcieendpoint_syncfifo0_rdport_adr];
end
assign litepcieendpoint_syncfifo0_wrport_dat_r = storage_9_dat0;
assign litepcieendpoint_syncfifo0_rdport_dat_r = storage_9_dat1;


//------------------------------------------------------------------------------
// Memory storage_10: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_10[0:255];
reg [165:0] storage_10_dat0;
reg [165:0] storage_10_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo1_wrport_we)
		storage_10[litepcieendpoint_syncfifo1_wrport_adr] <= litepcieendpoint_syncfifo1_wrport_dat_w;
	storage_10_dat0 <= storage_10[litepcieendpoint_syncfifo1_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo1_rdport_re)
		storage_10_dat1 <= storage_10[litepcieendpoint_syncfifo1_rdport_adr];
end
assign litepcieendpoint_syncfifo1_wrport_dat_r = storage_10_dat0;
assign litepcieendpoint_syncfifo1_rdport_dat_r = storage_10_dat1;


//------------------------------------------------------------------------------
// Memory storage_11: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_11[0:255];
reg [165:0] storage_11_dat0;
reg [165:0] storage_11_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo2_wrport_we)
		storage_11[litepcieendpoint_syncfifo2_wrport_adr] <= litepcieendpoint_syncfifo2_wrport_dat_w;
	storage_11_dat0 <= storage_11[litepcieendpoint_syncfifo2_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo2_rdport_re)
		storage_11_dat1 <= storage_11[litepcieendpoint_syncfifo2_rdport_adr];
end
assign litepcieendpoint_syncfifo2_wrport_dat_r = storage_11_dat0;
assign litepcieendpoint_syncfifo2_rdport_dat_r = storage_11_dat1;


//------------------------------------------------------------------------------
// Memory storage_12: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_12[0:255];
reg [165:0] storage_12_dat0;
reg [165:0] storage_12_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo3_wrport_we)
		storage_12[litepcieendpoint_syncfifo3_wrport_adr] <= litepcieendpoint_syncfifo3_wrport_dat_w;
	storage_12_dat0 <= storage_12[litepcieendpoint_syncfifo3_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo3_rdport_re)
		storage_12_dat1 <= storage_12[litepcieendpoint_syncfifo3_rdport_adr];
end
assign litepcieendpoint_syncfifo3_wrport_dat_r = storage_12_dat0;
assign litepcieendpoint_syncfifo3_rdport_dat_r = storage_12_dat1;


//------------------------------------------------------------------------------
// Memory storage_13: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_13[0:255];
reg [165:0] storage_13_dat0;
reg [165:0] storage_13_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo4_wrport_we)
		storage_13[litepcieendpoint_syncfifo4_wrport_adr] <= litepcieendpoint_syncfifo4_wrport_dat_w;
	storage_13_dat0 <= storage_13[litepcieendpoint_syncfifo4_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo4_rdport_re)
		storage_13_dat1 <= storage_13[litepcieendpoint_syncfifo4_rdport_adr];
end
assign litepcieendpoint_syncfifo4_wrport_dat_r = storage_13_dat0;
assign litepcieendpoint_syncfifo4_rdport_dat_r = storage_13_dat1;


//------------------------------------------------------------------------------
// Memory storage_14: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_14[0:255];
reg [165:0] storage_14_dat0;
reg [165:0] storage_14_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo5_wrport_we)
		storage_14[litepcieendpoint_syncfifo5_wrport_adr] <= litepcieendpoint_syncfifo5_wrport_dat_w;
	storage_14_dat0 <= storage_14[litepcieendpoint_syncfifo5_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo5_rdport_re)
		storage_14_dat1 <= storage_14[litepcieendpoint_syncfifo5_rdport_adr];
end
assign litepcieendpoint_syncfifo5_wrport_dat_r = storage_14_dat0;
assign litepcieendpoint_syncfifo5_rdport_dat_r = storage_14_dat1;


//------------------------------------------------------------------------------
// Memory storage_15: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_15[0:255];
reg [165:0] storage_15_dat0;
reg [165:0] storage_15_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo6_wrport_we)
		storage_15[litepcieendpoint_syncfifo6_wrport_adr] <= litepcieendpoint_syncfifo6_wrport_dat_w;
	storage_15_dat0 <= storage_15[litepcieendpoint_syncfifo6_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo6_rdport_re)
		storage_15_dat1 <= storage_15[litepcieendpoint_syncfifo6_rdport_adr];
end
assign litepcieendpoint_syncfifo6_wrport_dat_r = storage_15_dat0;
assign litepcieendpoint_syncfifo6_rdport_dat_r = storage_15_dat1;


//------------------------------------------------------------------------------
// Memory storage_16: 256-words x 166-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 166 
// Port 1 | Read: Sync  | Write: ---- | 
reg [165:0] storage_16[0:255];
reg [165:0] storage_16_dat0;
reg [165:0] storage_16_dat1;
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo7_wrport_we)
		storage_16[litepcieendpoint_syncfifo7_wrport_adr] <= litepcieendpoint_syncfifo7_wrport_dat_w;
	storage_16_dat0 <= storage_16[litepcieendpoint_syncfifo7_wrport_adr];
end
always @(posedge sys_clk) begin
	if (litepcieendpoint_syncfifo7_rdport_re)
		storage_16_dat1 <= storage_16[litepcieendpoint_syncfifo7_rdport_adr];
end
assign litepcieendpoint_syncfifo7_wrport_dat_r = storage_16_dat0;
assign litepcieendpoint_syncfifo7_rdport_dat_r = storage_16_dat1;


(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE (
	// Inputs.
	.C   (from216_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (s7pciephy_tx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_1 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_1 (
	// Inputs.
	.C   (from216_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE (s7pciephy_tx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (from216_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_2 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_2 (
	// Inputs.
	.C   (to216_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (s7pciephy_tx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_3 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_3 (
	// Inputs.
	.C   (to216_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE (s7pciephy_tx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (to216_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_4 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_4 (
	// Inputs.
	.C   (from617_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (s7pciephy_rx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_5 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_5 (
	// Inputs.
	.C   (from617_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE (s7pciephy_rx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (from617_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_6 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_6 (
	// Inputs.
	.C   (to617_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (s7pciephy_rx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_7 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_7 (
	// Inputs.
	.C   (to617_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE (s7pciephy_rx_datapath_cdc_cd_rst),

	// Outputs.
	.Q   (to617_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_8 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_8 (
	// Inputs.
	.C   (from808_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (s7pciephy_msi_cdc_cd_rst),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl4_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_9 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_9 (
	// Inputs.
	.C   (from808_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl4_rst_meta),
	.PRE (s7pciephy_msi_cdc_cd_rst),

	// Outputs.
	.Q   (from808_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_10 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_10 (
	// Inputs.
	.C   (to808_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (s7pciephy_msi_cdc_cd_rst),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl5_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_11 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_11 (
	// Inputs.
	.C   (to808_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl5_rst_meta),
	.PRE (s7pciephy_msi_cdc_cd_rst),

	// Outputs.
	.Q   (to808_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_12 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_12 (
	// Inputs.
	.C   (clk125_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl6),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl6_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_13 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_13 (
	// Inputs.
	.C   (clk125_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl6_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl6),

	// Outputs.
	.Q   (clk125_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_14 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_14 (
	// Inputs.
	.C   (clk250_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl7),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl7_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_15 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_15 (
	// Inputs.
	.C   (clk250_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl7_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl7),

	// Outputs.
	.Q   (clk250_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_16 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_16 (
	// Inputs.
	.C   (userclk1_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl8),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl8_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_17 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_17 (
	// Inputs.
	.C   (userclk1_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl8_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl8),

	// Outputs.
	.Q   (userclk1_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_18 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_18 (
	// Inputs.
	.C   (userclk2_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl9),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl9_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_19 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_19 (
	// Inputs.
	.C   (userclk2_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl9_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl9),

	// Outputs.
	.Q   (userclk2_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-04-04 23:01:15.
//------------------------------------------------------------------------------
